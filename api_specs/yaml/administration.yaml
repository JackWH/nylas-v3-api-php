openapi: 3.1.0
info:
  title: Nylas v3 Administration APIs
  version: v3
  summary: The Nylas Administration APIs
  description: |
    <div style="padding:24px; background-color: #F5FFFD; border: 1px solid #00A88C; color: #161717">This API reference documentation covers the <strong>Administration APIs</strong> only. See the <strong><a href="/docs/api/v3/ecc/">Email, Calendar, and Contacts API reference</a></strong> for information on working with the Email, Calendar, and Contacts APIs.</div>

    The **Nylas Administration APIs** are how you query and change your Nylas applications, including the application's authentication configuration, provider settings, and webhook subscriptions. You can also use Administration APIs to query your application to list the Grants (specific permissions to access user data) that are associated with each of your Nylas applications.

    The Nylas API is designed using the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) ideology to provide simple and predictable URIs to access and modify objects. Requests support [standard HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) like `GET`, `PUT`, `POST`, and `DELETE`, and [standard status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).

    You can use the [Nylas Postman collection](https://www.postman.com/trynylas/workspace/nylas-api/overview) to quickly start using the Nylas APIs. For more information, check out the [Nylas Postman collection documentation](/docs/v3/api-references/postman/).

    ## Query parameters

    Nylas allows you to include query parameters in `GET` requests that return a list of results. Query parameters let you narrow the results Nylas returns, meaning fewer requests to the provider and less data for your application to sift through. For more information, see [Rate limits in Nylas](/docs/dev-guide/platform/rate-limits/).

    The table below shows the query parameters you can use for the `GET` requests in the Administration APIs.

    | Endpoint | Query parameters |
    | :--- | :--- |
    | [`GET /v3/connectors`](/docs/api/v3/admin/#get-/v3/connectors) | `limit`, `offset` |
    | [`GET /v3/grants`](/docs/api/v3/admin/#get-/v3/grants) | `limit`, `offset`, `sort_by`, `order_by`, `since`, `before`, `email`, `grant_status`, `ip`, `provider` |
    | [`GET /v3/connectors/<PROVIDER>/creds`](/docs/api/v3/admin/#get-/v3/connectors/-provider-/creds) | `limit`, `offset`, `sort_by`, `order_by` |

    You can use the `limit` parameter to set the maximum number of results Nylas returns for your request. Nylas recommends setting a lower `limit` if you encounter rate limits on the provider. For more information, see [Avoiding rate limits in Nylas](/docs/dev-guide/best-practices/rate-limits/).

    ## Updating objects

    `PUT` and `PATCH` requests behave similarly in Nylas v3: when you make a request, Nylas replaces all data in the nested object with the information you define. Because of this, your request might fail if you don't include all mandatory fields.

    Nylas doesn't erase the data from fields that you don't include in your request, so you can define only the mandatory fields and any that you want to update.

    ## Authentication documentation

    You can find more information about the Nylas Administration APIs in the main documentation set:

    - [Authentication in v3](/docs/v3/auth/)
      - [Create grants with OAuth authentication + API key](/docs/v3/auth/hosted-oauth-apikey/)
      - [Create grants with OAuth authentication + Access token](/docs/v3/auth/hosted-oauth-accesstoken/)
      - [Create grants with custom authentication](/docs/v3/auth/custom/) (called "native" authentication in v2)
      - [Create grants with IMAP authentication](/docs/v3/auth/imap/)
    - [Bulk authentication in v3](/docs/v3/auth/bulk-auth-grants/)
    - [v3 event codes](/docs/v3/api-references/event-codes/)
    - [Virtual Calendars in v3](/docs/v3/auth/virtual-calendars/)

    ## Nylas v3 encoding

    Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.
  contact:
    url: https://www.nylas.com/
servers:
  - url: https://api.us.nylas.com
    description: US
  - url: https://api.eu.nylas.com
    description: EU
security:
  - ACCESS_TOKEN: []
  - NYLAS_API_KEY: []
tags:
  - name: Applications
    description: |
      In the context of the Nylas APIs, an "application" is the object record of your Nylas application.
      </br></br>
      <div style="padding:24px; background-color: #F0F3FF; border: 1px solid #00A88C; color: #161717">üîç <b>The term "application" can refer to any of three concepts</b>: your Nylas application, the project you're building ("your application" or "your app"), and applications that you use to connect to service providers ("provider auth applications"). We try to be specific in this documentation to avoid confusion. The API endpoints described here are for working with your Nylas application, specifically.</div>

      The Nylas application is the central resource for your Nylas implementation. It collects the [connectors](/docs/api/v3/admin/#tag--Connectors-(Integrations)) that you use to store information about third party services that your application connects to, and stores the [grants](/docs/api/v3/admin/#tag--Manage-Grants) that you create when using connectors.

      Nylas applications also allow you to define your specific branding, change the look and feel of the Nylas Hosted authentication flow, and list your callback URIs.

      ## Application callback URIs

      Your Nylas application includes a list of allowed callback URIs. These are known URIs that Nylas can direct end users to after authentication. (These are separate from the callback URLs you specify when subscribing to webhook notifications.) You must define at least _one_ callback URI so your end users can complete the auth flow.

      You must include any callback URIs you plan to use in this list. If an auth payload includes a callback URI that isn't on the list, the whole authentication flow fails.

      ## Application limitations

      </br>
      <div style="padding:24px; background-color: #FFFEE6; border: 1px solid #9E9600; color: #161717">‚ö†Ô∏è <b>You can create, edit, and delete applications from the v3 Nylas Dashboard</b>. You <i>cannot</i> create, edit, or delete them using the Nylas APIs.</div>

      Keep the following limitations in mind as you work with Nylas applications:

      - Applications are the central resource that stores other Nylas resources. You _must_ create an application before you can create any other parts of your Nylas implementation.
      - Applications can be associated with only one project at a time. While your project can have more than one Nylas application to provide different authentication experiences, you cannot share applications, connectors, or grants between more than one project.
      - Applications cannot be nested, and cannot be set up with parent-child relationships.
      - Your application must have _at least one_ callback URI, or else it cannot finish the authentication flow, which means it cannot create grants. Nylas requires grants to access end user data.
        - In an ideal scenario, your application will have multiple callback URIs defined.
  - name: Connectors (Integrations)
    description: |

      In Nylas, a connector (formerly called an "integration") stores information that allows your Nylas application to connect to a third party services, such as a provider auth application from Google (GCP), Microsoft (Azure), or to an IMAP provider. You must create a connector in your Nylas application for each specific provider before you can create Grants and access user data from that provider.

      A Nylas connector stores data about how your Nylas application contacts the provider, the default permissions the Nylas application requests, and is generally the starting point for any authentication with that provider.

      ## Connector contents

      The connector stores a label provided by the user, the provider name or type (for example, `google`/`microsoft`/`imap`/`virtual_calendar`), an expiry time for the hosted authentication link, and the provider settings.

      The "provider's settings" come from the provider itself when you create your provider auth application on Google, Azure, or IMAP. For example, a provider's settings might contain the provider auth application's `client_id` and `client_secret`. Nylas stores these values securely and uses them as default credentials when authenticating with that provider.

      Nylas follows modern security best practices to encode and encrypt these provider settings, to ensure that they can never be obtained by a third party, including Nylas internal employees.

      ### What are limitations of connectors?

      Connectors are associated with a single [Nylas application](/docs/api/v3/admin/#tag--Applications).

      In v3, you can have only one Nylas connector for each type of provider. For example, your Nylas application can have only one Google connector.

      If you want to create a grant for a different provider auth application, (for example, on a different GCP project, but you already have a default Google connector), you can use the special Nylas [_connector override protocol_](/docs/api/v3/admin/#post-/v3/connect/custom) to override the defaults.
  - name: Authentication APIs
    description: |
      Nylas provides two ways to handle authentication:

      - **Custom authentication**, which uses the [`/v3/connect/custom` endpoint](/docs/api/v3/admin/#post-/v3/connect/custom). In Custom auth, you already have refresh tokens for your end users, and you just need to create grants for them in Nylas. This endpoint is also used for [virtual calendars](/docs/v3/auth/virtual-calendars/), [IMAP auth](/docs/v3/auth/imap/), and [bulk auth grants](/docs/v3/auth/bulk-auth-grants/).
      - **Hosted OAuth**, where the end user completes an OAuth process on the provider, and the provider returns an access token. Depending on your needs, you can use either the end user's access token or a Nylas API key to authorize requests after you complete the OAuth flow. See the [Authentication documentation](/docs/v3/auth/) for more information.

      ## Hosted authentication with OAuth

      OAuth is the modern industry-standard protocol for authorization, and is used by major technology companies like Google, Apple, Microsoft, and others. Nylas v3 supports authentication using the [OAuth 2.0 protocol](https://oauth.net/2/) and an additional option to use PKCE for extra security. [PKCE is an extension of the OAuth 2.0 protocol](https://oauth.net/2/pkce/) that prevents authorization code interception attacks, and makes OAuth 2.0 more secure on mobile devices and client-side applications.

      During the OAuth 2.0 authentication flow, the end user provides the account that they want to authenticate to Nylas, and they're prompted to allow your application's "scopes" (for example, `https://www.googleapis.com/auth/gmail.readonly` or `https://www.googleapis.com/auth/userinfo.profile`).

      ### Using Hosted OAuth

      To use Hosted OAuth in Nylas v3, you must first create a Nylas application in the v3 Dashboard, then create a [connector](/docs/api/v3/admin/#tag--Connectors-(Integrations)) in that application for each authentication provider. This allows Nylas to get and store each provider's settings, and configure a set of default scopes to apply.

      Nylas can detect which provider an end user is using, and redirect them to the correct provider's authentication system.

      If the end user decides to choose different provider settings for an OAuth 2.0 authorization protocol, Nylas allows them to override the default provider connector's settings.

      A successful OAuth authorization results in a [grant](/docs/api/v3/admin/#tag--Manage-Grants) with the scopes that the end user allowed.

      See [Create grants with OAuth 2.0 and PKCE](/docs/v3/auth/hosted-oauth-accesstoken/#create-grants-with-oauth-2.0-and-pkce) for more information.

      ### Adding the "Sign in with Google" button

      Your Google provider auth app must have a "Sign in with Google" button that meets [Google's branding guidelines](https://developers.google.com/identity/branding-guidelines). This applies to the OAuth flow for both personal Gmail (`@gmail.com`) and Workspace email addresses.

      For Hosted authentication, Nylas recommends you do one of the following:

      - Configure the OAuth login prompt by setting the `prompt` parameter with `select_provider` or `detect,select_provider`. For more information, see [Configure the OAuth login prompt](/docs/v3/auth/customize-login-prompt/).

        <div style="padding:24px; background-color: #FFFEE6; border: 1px solid #9E9600; color: #161717">üìù <b>Note</b>: If you add a <code>login_hint</code> that is a personal Gmail or Workspace email address, and you don't configure a <code>prompt</code> during the Hosted auth flow, the end user is directed immediately to the Google OAuth page without clicking the "Sign in with Google" button. This can result in delays or failure in verification.
        </div>

      - Use the pre-approved "Sign in with Google" button along with the "Connect your account" button (or other provider login buttons) in your application. For more information, see Google's official [Sign in with Google branding guidelines](https://developers.google.com/identity/branding-guidelines).

      For Custom authentication, use the pre-approved "Sign in with Google" button along with the "Connect your account" button (or other provider login buttons) in your application.

      Learn more about [Google verification and security assessment](/docs/dev-guide/provider-guides/google/google-verification-security-assessment-guide/).
  - name: Manage Grants
    description: |
      Grants replace the concept of "connected accounts" in Nylas v3. They represent a specific set of permissions ("scopes") that a specific end user granted Nylas for a specific provider. Think of a grant as a record of an end user "granting access" to specific resources.

      Grants are the main objects that power Nylas, because they grant your Nylas application specific scopes of access (for example, permission to read email messages) to the end user's resources and data on their provider. They also represent access granted to your application for certain end-user resources.

      There are several ways to create grants:

      - Using [Hosted OAuth and an API key](/docs/v3/auth/hosted-oauth-apikey/).
      - Using [Hosted OAuth and an access token](/docs/v3/auth/hosted-oauth-accesstoken/), with [optional PKCE](/docs/v3/auth/hosted-oauth-accesstoken/#create-grants-with-oauth-2.0-and-pkce) for additional security.
      - Using [Custom authentication](/docs/v3/auth//custom/) (called "Native authentication" in Nylas v2).
      - Using a special [bulk auth grant](/docs/v3/auth/bulk-auth-grants) (also called a "service account").

      You can re-authenticate grants using any of these methods, and Nylas handles all the re-authentication logic internally.

      ## Re-authentication and notifications

      Grants can become invalid for many reasons (for example, the end user changing their password). When a grant becomes invalid, the end user must re-authenticate to access your application.

      When a grant becomes invalid, Nylas loses access to the affected user's data and stops sending notifications about changes to its objects. When the end user re-authenticates, Nylas looks at when their grant last authenticated successfully. If it was less than 72 hours ago, Nylas looks for any changes that happened since the last successful sync and sends you notifications about those events. This can be _a lot_ of notifications.

      If the grant was out of service for more than 72 hours, Nylas doesn't send backfill notifications. When this happens, look for the `grant.expired` and `grant.updated` notifications and query the Nylas APIs for objects that changed between those timestamps.
      </br></br>
      <div style="padding:24px; background-color: #FFFEE6; border: 1px solid #9E9600; color: #161717">‚ö†Ô∏è <b>If message tracking events occur while a grant is out of service for more than 72 hours, you cannot backfill the notifications</b>. This includes <a href="/docs/v3/notifications/notification-schemas/#message-opened-notifications"><code>message.opened</code></a>, <a href="/docs/v3/notifications/notification-schemas/#link-clicked-notifications"><code>message.link_clicked</code></a>, and <a href="/docs/v3/notifications/notification-schemas/#thread-replied-notifications"</a><code>thread.replied</code></a> notifications.</div>

      ## Grant limitations

      When working with grants, keep the following limitations in mind:

      - You can re-authenticate a grant to add new scopes, remove scopes, or extend its expiry date.
      - Each grant belongs to a specific Nylas connector (because they come from a specific provider), in a specific Nylas application. A grant cannot be associated with multiple connectors or applications.
      - Grants expire after a pre-defined period of time. When this happens, they must be re-authenticated.

      ## Grant notifications

      You can subscribe to the following triggers so Nylas notifies you about changes to your users' data:

      - `grant.created`
      - `grant.updated`
      - `grant.deleted`
      - `grant.expired`

      For more information, see the [Grant notification schemas](/docs/v3/notifications/notification-schemas/#grant-notifications).
  - name: Webhook Notifications
    description: |
      Your application receives information about changes to user accounts and data through Nylas webhooks.
      </br></br>
      <div style="padding:24px; background-color: #F0F3FF; border: 1px solid #002DB4; color: #161717"> üîç <b>The term "webhook" can refer to any of three component parts</b>: a location where you receive notifications (the "webhook URL" or "webhook endpoint"), a subscription to events that you want notifications for ("webhook triggers"), or the information payload that is sent when a trigger condition is met (the "webhook notification"). We try to be specific in this documentation to avoid confusion.</div>

      To configure webhooks, you first need a webhook URL in your project where your app can receive incoming webhook payloads, and a list of triggers that you want to receive notifications for. See the [list of available trigger types](/docs/v3/notifications/notification-schemas/) for more information.

      Webhooks in Nylas v3 are not compatible with Ngrok because of throughput limiting concerns. Nylas recommends you use [VS Code port forwarding](https://code.visualstudio.com/docs/editor/port-forwarding), [Hookdeck](https://hookdeck.com/), or a similar webhook tool.

      ## Monitor grant status

      The most important webhooks to subscribe to are those related to grant status: `grant.created`, `grant.updated`, `grant.deleted`, and `grant.expired`. They allow you to automate important grant lifecycle processes, like onboarding email messages, data refreshes, and backend deletions.

      The `grant.expired` trigger notifies you when an end user needs to re-authenticate their account. When you receive a `grant.expired` notification, you can take appropriate action (for example, notifying the end user or starting a background re-authentication process).
      </br></br>
      <div style="padding:24px; background-color: #F0F3FF; border: 1px solid #002DB4; color: #161717"> üìù <b>When a grant becomes invalid, Nylas cannot access the end user's data and does not send you webhook notifications about it</b>. When you re-authenticate a grant, Nylas looks at when the grant last authenticated successfully. If it was less than 72 hours ago, Nylas looks for any changes that happened since the time of the last successful sync, and sends you notifications about them. This can be a <i>lot</i> of notifications.

      If the grant has been out of service for more than 72 hours, Nylas does _not_ send backfill notifications. In this case, look for the `grant.expired` and `grant.updated` notifications, and query the Nylas API for objects that changed between those timestamps.</div>

      ## Specify fields for webhook notifications

      Nylas allows you to specify the fields you want to receive for the following webhook notifications:

      - `message.created`
      - `message.updated`
      - `event.created`
      - `event.updated`

      This reduces the payload size for the notifications, and improves their performance.

      When you specify the fields you want to receive for a certain trigger type, Nylas sends those notifications with the `.transformed` suffix (for example, `message.updated.transformed`). You don't need to subscribe to webhook triggers with the `.transformed` suffix separately, but you _do_ need to create logic in your project to handle the new notification type.

      For more information, see the [Webhooks documentation](/docs/v3/notifications/webhooks/#specify-fields-for-webhook-notifications).

      ## iCloud limitation for Calendar notifications

      Because iCloud doesn't support the `primary` property for calendars, Nylas sends `calendar.updated` notifications for changes to all calendars on an iCloud account.

      ## Payload size limit and truncation

      In v3, Nylas sends webhook notifications as JSON payloads that contain the object that triggered the notification, up to a maximum payload size of 1MB. If a webhook notification exceeds the size limit, Nylas truncates the payload by removing the body content, and adds the `.truncated` suffix to the webhook trigger name (for example, `message.created.truncated`). This reduces the size of the payload and improves performance.

      When you receive a truncated webhook notification, you'll need to re-query the Nylas APIs to get the data. For example, if you receive a `message.updated.truncated` notification, make a [Return message request](/docs/api/v3/ecc/#get-/v3/grants/-grant_id-/messages/-message_id-) that includes the message ID.

      If you subscribe to a webhook trigger that can be truncated, Nylas automatically sends you `.truncated` notifications as well. You don't need to subscribe to webhook triggers with the `.truncated` suffix separately, and the suffix doesn't appear as a option in the v3 Dashboard. See the [list of available trigger types](/docs/v3/notifications/notification-schemas/) for more information.

      You can monitor for `.truncated` notifications to create automations that retrieve the full affected object. For example, you can create an automation that makes a [`GET /v3/grants/<NYLAS_GRANT_ID>/messages/<MESSAGE_ID>` request](/docs/api/v3/ecc/#get-/v3/grants/-grant_id-/messages/-message_id-) when your application receives a `message.updated.truncated` notification

      ## How to handle webhook failures

      Nylas v3 improves how the platform handles failing webhooks. This is sometimes called "circuit breaker" logic. See [improvements to failure notifications](/docs/new/in-v3/webhooks-changes/#improvements-to-webhook-failure-notifications) and [Failing and failed webhooks](/docs/v3/notifications/webhooks/#failing-and-failed-webhooks) for more information.

      - **Failing state**: If Nylas cannot deliver a webhook notification to the destination endpoint for 95% of webhooks over a 15-minute period, Nylas marks the endpoint as `failing` but continues sending notifications to it. Nylas also sends you an email message when this happens so you can troubleshoot the issue.
      - **Failed state**: If Nylas cannot deliver 95% of webhook notifications to a `failing` endpoint over the next 72 hours, Nylas marks the endpoint as `failed` and stops sending notifications to it. Nylas also sends you an email message when this happens so you can address the issue.

      </br>
      <div style="padding:24px; background-color: #FFFEE6; border: 1px solid #9E9600; color: #161717">‚ö†Ô∏è Nylas does not automatically restart or reactivate <code>failed</code> webhooks.</div>

      This change gives you full control over when your webhook endpoint becomes active again, so you can verify that it's working as expected before you restart normal webhook traffic.

      ## Webhook triggers

      The following trigger types are available in Nylas v3:

      - `contact.updated`: A contact was modified or updated.
      - `contact.deleted`: A contact was deleted.
      - `calendar.created`: A calendar was created.
      - `calendar.updated`: A calendar was updated or modified.
      - `calendar.deleted`: A calendar was deleted.
      - `event.created`: An event was created on an end user's calendar.
      - `event.updated`: An event was updated or modified.
      - `event.deleted`: An event was deleted.
      - `grant.created`: A new grant was authenticated. This is the v3 equivalent of the v2 `account.created` webhook trigger.
      - `grant.updated`: A grant was modified, updated, or re-authenticated.
      - `grant.deleted`: A grant was deleted as a result of the end user making a [Delete Grant request](/docs/api/v3/admin/#delete-/v3/grants/-grantId-).
      - `grant.expired`: A grant's credentials have expired, and the end user must re-authenticate.
      - `message.created`: An email message was created.
      - `message.updated`: An email message was updated.
      - `message.send_success`: A scheduled email message was sent and delivered successfully. You must set the `send_at` parameter in an email message to use this trigger. For more information, see [Schedule email messages to send in the future](/docs/v3/email/scheduled-send/).
      - `message.send_failed`: A scheduled email message was sent, but was not delivered. You must set the `send_at` parameter in an email message to use this trigger. For more information, see [Schedule email messages to send in the future](/docs/v3/email/scheduled-send/).
      - `message.bounce_detected`: (Available for Google, Microsoft Graph, iCloud, and Yahoo.) An email message bounced or was not delivered.
      - `message.opened`: A participant opened a tracked email message.
      - `message.link_clicked`: A participant clicked a link in a tracked email message.
      - `thread.replied`: A participant replied to an email message in a tracked thread.
      - `message.intelligence.order`: An end user received an email message containing e-commerce order information. ExtractAI must be enabled.
      - `message.intelligence.tracking`: An end user received an email message containing shipping information for an e-commerce order. ExtractAI must be enabled.
      - `folder.created`: A folder or label was created.
      - `folder.updated`: A folder or label was modified or updated.
      - `folder.deleted`: A folder or label was deleted.
      - `booking.created`: A new Scheduler event was created.
      - `booking.rescheduled`: A Scheduler event was rescheduled through Scheduler.
      - `booking.cancelled`: A Scheduler event was cancelled through the Scheduler.
      - `booking.pending`: A pending booking was created.

      <!-- EM: Not confirmed whether this webhook is being included in GA:
      - `message.deleted`: An email message was deleted. -->

      For more information on webhook trigger types, and for schema examples, see the [notification schemas](/docs/v3/notifications/notification-schemas/).
  - name: Pub/Sub Notifications
    description: |
      Nylas offers two ways to get notifications of what's happening on the provider. You can either subscribe to webhook notifications, or you can set up a notification channel.

      Currently, Nylas offers a Pub/Sub notification channel. This can be used in place of, or in addition to, normal webhook notifications.

      To use Pub/Sub notifications, you first need to set up a Pub/Sub queue on Google Cloud Platform. For detailed set up instructions see the [Pub/Sub notifications documentation](/docs/v3/notifications/pubsub-channel/).

      The Nylas Pub/Sub notification channels use the same notification [trigger types and schemas](/docs/v3/notifications/notification-schemas/) as webhook notifications, and require the same [provider scopes](/docs/v3/notifications/notification-scopes/).

      ## Monitor grant status

      The most important notifications to subscribe to are those related to grant status: `grant.created`, `grant.updated`, `grant.deleted`, and `grant.expired`. They allow you to automate important grant lifecycle processes, like onboarding email messages, data refreshes, and backend deletions.

      The `grant.expired` trigger notifies you when an end user needs to re-authenticate their account. When you receive a `grant.expired` notification, you can take appropriate action (for example, notifying the end user or starting a background re-authentication process).
      </br>
      </br>
      <div style="padding:24px; background-color: #F0F3FF; border: 1px solid #002DB4; color: #161717"> üìù <b>When a grant becomes invalid, Nylas cannot access the end user's data and does not send you notifications about it</b>. When you re-authenticate a grant, Nylas looks at when the grant last authenticated successfully. If it was less than 72 hours ago, Nylas looks for any changes that happened since the time of the last successful sync, and sends you notifications about them. This can be a <i>lot</i> of notifications.

      If the grant has been out of service for more than 72 hours, Nylas does _not_ send backfill notifications. In this case, look for the `grant.expired` and `grant.updated` notifications, and query the Nylas API for objects that changed between those timestamps.
      </div>
  - name: Connector credentials
    description: |
      A Nylas connector credential is a special type of record that securely stores information (such as provider settings) that allows you to connect using an administrator account. Nylas securely stores, hashes, and encrypts the connector credential's sensitive data, and the contents vary depending on the authentication provider.

      Bulk authentication grants use connector credentials to connect or reconnect end user accounts to your Nylas application. You can also use them to override a connector's settings to perform administrative tasks. For more information, see the [Bulk authentication grant documentation](/docs/v3/auth/bulk-auth-grants/).

      Both Google and Microsoft bulk authentication grants can use connector credentials.

      To override the default values in a provider's connector settings (for example, the `client_secret` and `client_id`), [create a grant using Custom authentication](/docs/v3/auth/custom/#use-api-request-for-custom-authentication) and provide the connector credential in your request payload, along with the values to override.

      ## Connector credential limitations

      Keep the following limitations in mind as you work with connector credentials:

      - A connector credential _must_ be connected to an existing Nylas connector.
      - Each connector credential must have a unique name.
      - When you make a [Create Credential request](/docs/api/v3/admin/#post-/v3/connectors/-provider-/creds), Nylas checks if a connector credential with the same parameters exists. If one _does_ exist, Nylas uses that connector credential instead of creating one.
paths:
  /v3/applications:
    get:
      operationId: get_application
      tags:
        - Applications
      summary: Get application
      description: Gets the application object
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url https://api.us.nylas.com/v3/applications \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            const applicationDetails = await nylas.applications.getDetails()

            console.log({ applicationDetails })
        - lang: python
          label: Python SDK
          source: |-
            # Load your env variables
            from dotenv import load_dotenv
            load_dotenv()

            # Import your dependencies
            import os
            import sys
            from nylas import Client

            # Initialize your Nylas API client
            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            # Retrieve Application Information
            application = nylas.applications.info()
            application_id = application[1]
            print("Application ID:", application_id)
        - lang: ruby
          label: Ruby SDK
          source: |
            # frozen_string_literal: true

            # Load gems
            require 'nylas'

            # Initialize Nylas client
            nylas = Nylas::Client.new(
              api_key: '<NYLAS_API_KEY>'
            )

            application = nylas.applications.get_details()
            puts application
        - lang: java
          label: Java SDK
          source: |-
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class getApplication {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();
                Response<ApplicationDetails> application = nylas.applications().getDetails();

                System.out.println(application);
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |-
            import com.nylas.NylasClient

            fun main(args: Array<String>) {
              val nylas: NylasClient = NylasClient(
                  apiKey = "<NYLAS_API_KEY>"
              )

              val application = nylas.applications().getDetails()

              print(application)
            }
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/ApplicationObject'
          description: Returns Application object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    patch:
      operationId: update_application
      tags:
        - Applications
      summary: Update an application
      description: |-
        Update a specific Nylas application using the client ID associated with an API key.
        </br></br>
        <div style="padding:24px; background-color: #FFFEE6; border: 1px solid #9E9600; color: #161717">‚ö†Ô∏è <b>This endpoint will be removed in the future when application settings are available in the v3 Nylas Dashboard</b>.</div>

        When you make a `PATCH` request, Nylas replaces all data in the nested object with the information
        included in your request. For more information, see
        [Updating objects](/docs/api/v3/admin/#overview--updating-objects).
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request PATCH \
              --url 'https://api.us.nylas.com/v3/applications' \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                "application_id": "<string>",
                "organization_id": "<string>",
                "region": "<string>",
                "environment": "<string>",
                "branding": {
                  "name": "<string>",
                  "icon_url": "<string>",
                  "website_url": "<string>",
                  "description": "<string>"
                },
                "hosted_authentication": {
                  "background_image_url": "<string>",
                  "alignment": "<string>",
                  "color_primary": "<string>",
                  "color_secondary": "<string>",
                  "title": "<string>",
                  "subtitle": "<string>",
                  "background_color": "<string>",
                  "spacing": "<integer>"
                },
                "callback_uris": [
                  {
                    "id": "<string>",
                    "url": "<string>",
                    "platform": "<string>",
                    "settings": {
                      "origin": "<string>",
                      "bundle_id": "<string>",
                      "package_name": "<string>",
                      "sha1_certificate_fingerprint": "<string>"
                    }
                  },
                  {
                    "id": "<string>",
                    "url": "<string>",
                    "platform": "<string>",
                    "settings": {
                      "origin": "<string>",
                      "bundle_id": "<string>",
                      "package_name": "<string>",
                      "sha1_certificate_fingerprint": "<string>"
                    }
                  }
                ]
              }'
      security:
        - NYLAS_API_KEY: []
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationObject'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ApplicationObject'
          description: Returns application object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /v3/applications/redirect-uris:
    get:
      operationId: get_application_redirect_uri_all
      tags:
        - Applications
      summary: Get an application's callback URIs
      description: Get an application's callback URIs
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url https://api.us.nylas.com/v3/applications/redirect-uris \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from "nylas"

            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            const applicationDetails = await nylas.applications.redirectUris

            console.log({ applicationDetails })
        - lang: python
          label: Python SDK
          source: |-
            # Load your env variables
            from dotenv import load_dotenv
            load_dotenv()

            # Import your dependencies
            import os
            import sys
            from nylas import Client

            # Initialize your Nylas API client
            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            # Retrieve Application Information
            application_redirect_uris = nylas.applications.redirect_uris
            print("Application Redirects:", application_redirect_uris)
        - lang: ruby
          label: Ruby SDK
          source: |
            # frozen_string_literal: true

            # Load gems
            require 'nylas'

            # Initialize Nylas client
            nylas = Nylas::Client.new(
              api_key: '<NYLAS_API_KEY>'
            )

            application = nylas.applications.get_details()
            puts application[0][:callback_uris]
        - lang: java
          label: Java SDK
          source: |-
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class getApplicationUris {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();
                Response<ApplicationDetails> application = nylas.applications().getDetails();

                System.out.println(application.getData().getCallbackUris());
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |-
            import com.nylas.NylasClient

            fun main(args: Array<String>) {
              val nylas: NylasClient = NylasClient(
                  apiKey = "<NYLAS_API_KEY>"
              )

              val application = nylas.applications().getDetails()

              print(application.data.callbackUris)
            }
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RedirectURIObject'
          description: Returns a list of Callback URI objects
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    $ref: '#/components/schemas/400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  error:
                    $ref: '#/components/schemas/404'
    post:
      operationId: add_application_redirect_uri
      tags:
        - Applications
      summary: Add callback URI to application
      description: Add new Callback URI to an existing Application. Callback URIs are used to redirect users back to your application after they authenticate with Nylas. If you don't specify a `platform`, the default is `web`.
      security:
        - NYLAS_API_KEY: []
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              oneOf:
                - $ref: '#/components/schemas/webDesktopCallbackNoSettings'
                - $ref: '#/components/schemas/JsCallbackwSettings'
                - $ref: '#/components/schemas/iosCallbackwSettings'
                - $ref: '#/components/schemas/AndroidCallbackwSettings'
              discriminator:
                propertyName: platform
                mapping:
                  web: '#/components/schemas/webDesktopCallbackNoSettings'
                  desktop: '#/components/schemas/webDesktopCallbackNoSettings'
                  js: '#/components/schemas/JsCallbackwSettings'
                  ios: '#/components/schemas/iosCallbackwSettings'
                  android: '#/components/schemas/AndroidCallbackwSettings'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/RedirectURIObject'
          description: Returns CallbackURI object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request POST \
              --url 'https://api.us.nylas.com/v3/applications/redirect-uris' \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                "url": "<string>",
                "platform": "<string>",
                "settings": {
                  "origin": "<string>",
                  "bundle_id": "<string>",
                  "package_name": "<string>",
                  "sha1_certificate_fingerprint": "<string>"
                }
              }'
  /v3/applications/redirect-uris/{id}:
    parameters:
      - example: 0556d035-6cb6-4262-a035-6b77e11cf8fc
        name: id
        schema:
          type: string
        in: path
        required: true
    get:
      operationId: get_application_redirect_uri_by_id
      tags:
        - Applications
      summary: Get callback URI
      description: Gets a Callback URI based on ID
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url https://api.us.nylas.com/v3/applications/redirect-uris/<CALLBACK_ID> \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from "nylas"

            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            async function getRedirectUri() {
              try {
                const redirectUris = await nylas.applications.redirectUris.find({
                    redirectUriId: process.env.REDIRECT_URI_ID
                })

                console.log('Updated Draft:', redirectUris)
              } catch (error) {
                console.error('Error to update draft:', error)
              }
            }

            getRedirectUri()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            grant_id = os.environ.get("NYLAS_GRANT_ID")
            contact_id = os.environ.get("CONTACT_ID")

            redirect_uri = nylas.applications.redirect_uris.find(
              redirect_uri_id= os.environ.get("REDIRECT_URI_ID"),
            )

            print(redirect_uri)
        - lang: ruby
          label: Ruby SDK
          source: "require 'nylas'\t\n\nnylas = Nylas::Client.new(\n\tapi_key: \"<NYLAS_API_KEY>\"\n)\n\nredirect_uris = nylas.applications.redirect_uris.find(redirect_uri_id: \"<REDIRECT_URI_ID>\")\n\nputs redirect_uris\n"
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class GetApplicationURIs {
                public static void main(String[] args)
                throws NylasSdkTimeoutError, NylasApiError {

                    NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    Response<RedirectUri> redirect_uris =
                    nylas.applications().redirectUris().find("<REDIRECT_URI_ID>");
                    System.out.println(redirect_uris);
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient

            fun main(args: Array<String>) {

                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val redirecturis = nylas.applications().redirectUris().find("<REDIRECT_URI_ID>")
                print(redirecturis)
            }
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/RedirectURIObject'
          description: Returns Callback URI object
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
    patch:
      operationId: patch_application_redirect_uri_by_id
      tags:
        - Applications
      summary: Update a callback URI
      description: |-
        Update a specific callback URI. If you don't define a `platform`, Nylas doesn't modify the existing
        settings.

        When you make a `PATCH` request, Nylas replaces all data in the nested object with the information
        included in your request. For more information, see
        [Updating objects](/docs/api/v3/admin/#overview--updating-objects).
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request PATCH \
              --url https://api.us.nylas.com/v3/applications/redirect-uris/<CALLBACK_ID> \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
              --data '{
                "url": "<UPDATED_CALLBACK_URL>"
              }'
      security:
        - NYLAS_API_KEY: []
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              oneOf:
                - $ref: '#/components/schemas/webDesktopCallbackNoSettings'
                - $ref: '#/components/schemas/JsCallbackwSettings'
                - $ref: '#/components/schemas/iosCallbackwSettings'
                - $ref: '#/components/schemas/AndroidCallbackwSettings'
              discriminator:
                propertyName: platform
                mapping:
                  web: '#/components/schemas/webDesktopCallbackNoSettings'
                  desktop: '#/components/schemas/webDesktopCallbackNoSettings'
                  js: '#/components/schemas/JsCallbackwSettings'
                  ios: '#/components/schemas/iosCallbackwSettings'
                  android: '#/components/schemas/AndroidCallbackwSettings'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/RedirectURIObject'
          description: Returns Callback URI object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
    delete:
      operationId: delete_application_redirect_uri_by_id
      tags:
        - Applications
      summary: Delete a callback URI
      description: Delete existing Callback URI based on it's ID
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request DELETE \
              --url https://api.us.nylas.com/v3/applications/redirect-uris/<CALLBACK_ID> \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            const NylasConfig = {
             apiKey: process.env.NYLAS_API_KEY,
             apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            async function deleteRedirectUriId() {
              try {
                const response = await nylas.applications.redirectUris.destroy({
                  redirectUriId: process.env.REDIRECT_URI_ID,
                })

                console.log('Redirect Uri deleted:', response)
              } catch (error) {
                console.error('Error to delete redirect uri:', error)
              }
            }

            deleteRedirectUriId()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            response = nylas.applications.redirect_uris.destroy(
              redirect_uri_id= os.environ.get("REDIRECT_URI_ID"),
            )

            print(response)
        - lang: ruby
          label: Ruby SDK
          source: |
            # frozen_string_literal: true

            require 'nylas'

            nylas = Nylas::Client.new(
              api_key: '<NYLAS_API_KEY>'
            )

            redirect_uris = nylas.applications.redirect_uris.destroy(redirect_uri_id: "<REDIRECT_URI_ID>")

            puts redirect_uris
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class DeleteApplicationURIs {
                public static void main(String[] args) throws
                NylasSdkTimeoutError, NylasApiError {

                    NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    DeleteResponse redirect_uris =
                    nylas.applications().redirectUris().destroy("<REDIRECT_URI>");
                    System.out.println(redirect_uris);
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient

            fun main(args: Array<String>) {

                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val redirecturis = nylas.applications().redirectUris().destroy("<REDIRECT_URIS>")
                print(redirecturis)
            }
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          $ref: '#/components/responses/200-delete'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /v3/connectors:
    post:
      operationId: create_connector
      tags:
        - Connectors (Integrations)
      summary: Create a connector
      description: |
        Create a connector in your Nylas application.
        Connectors are how your Nylas application stores information it needs to connect to external services. Creating a connector is the first step in setting up authentication for your project.
      security:
        - NYLAS_API_KEY: []
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: Google
                  required:
                    - provider
                  properties:
                    provider:
                      type: string
                      description: The provider type. For Google providers, set to `google`.
                      example: google
                    settings:
                      type: object
                      description: GCP provider auth app credentials and settings.
                      required:
                        - client_id
                        - client_secret
                      properties:
                        client_id:
                          type: string
                          description: The GCP app's client ID.
                          example: abc-def
                        client_secret:
                          type: string
                          description: The GCP app's client secret.
                          example: xyz-abc-def
                        topic_name:
                          type: string
                          description: Google Pub/Sub topic name. Required if using Email webhooks.
                          example: topic-123
                    scope:
                      type: array
                      items:
                        type: string
                      description: Set the default scopes for each connector. These scopes are overridden by scopes set on the specific grant.
                      example:
                        - https://www.googleapis.com/auth/userinfo.email
                        - https://www.googleapis.com/auth/userinfo.profile
                        - https://www.googleapis.com/auth/gmail.readonly
                - type: object
                  title: Microsoft
                  required:
                    - provider
                  properties:
                    provider:
                      type: string
                      description: The provider type. For Microsoft providers, set to `microsoft`.
                      example: microsoft
                    settings:
                      type: object
                      description: Your Azure provider auth app credentials and settings, as stored in Entra ID.
                      required:
                        - client_id
                        - client_secret
                      properties:
                        client_id:
                          type: string
                          description: The Azure auth app's client ID.
                          example: abc-def
                        client_secret:
                          type: string
                          description: The Azure auth app's client secret.
                          example: xyz-abc-def
                        tenant:
                          type: string
                          description: Microsoft tenant ID.
                          example: abc-123-def-456
                    scope:
                      type: array
                      items:
                        type: string
                      description: |-
                        Set the default scopes for each connector. Scopes set on individual grants override these scopes.
                        For Microsoft Graph connectors, the Nylas API accepts both the full URI version of a scope name (for example, `https://graph.microsoft.com/Calendars.Read`), as well as the short form (for example, `Calendars.Read`).
                      example:
                        - User.Read
                        - Mail.Read
                - type: object
                  title: Zoom
                  required:
                    - provider
                  properties:
                    provider:
                      type: string
                      description: The provider type. For Zoom providers, set to `zoom`.
                      example: zoom
                    settings:
                      type: object
                      description: Zoom provider credentials and settings. You can copy them from your [Zoom App](https://developers.zoom.us/docs/zoom-apps/) in [Zoom Developer Platform](https://developers.zoom.us/docs/). The Zoom Nylas connector does not support default scopes, so do not include them.
                      required:
                        - client_id
                        - client_secret
                      properties:
                        client_id:
                          type: string
                          description: The Zoom app's client ID.
                          example: abc-def
                        client_secret:
                          type: string
                          description: The Zoom app's client secret.
                          example: xyz-abc-def
                - type: object
                  title: iCloud
                  required:
                    - provider
                  properties:
                    provider:
                      type: string
                      description: The provider type. For iCloud providers, set to `icloud`.
                      example: icloud
                - type: object
                  title: IMAP
                  required:
                    - provider
                  properties:
                    provider:
                      type: string
                      description: The provider type. For IMAP providers, set to `imap`.
                      example: imap
                - type: object
                  title: Microsoft Exchange (EWS)
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: The provider type (in this case, `ews`).
                      example: ews
                    scopes:
                      type: string
                      description: Scopes settings tell Nylas to request specific data objects from the provider.
                      enum:
                        - ews.messages
                        - ews.calendar
                        - ews.contacts
                      examples:
                        - ews.messages
                        - ews.calendar
                        - ews.contacts
                - type: object
                  title: Virtual Calendars
                  required:
                    - provider
                  properties:
                    provider:
                      type: string
                      description: The provider type. For virtual calendars, set to `virtual-calendar`.
                      example: virtual-calendar
                - type: object
                  title: Yahoo
                  required:
                    - provider
                  properties:
                    provider:
                      type: string
                      description: The provider type. For Yahoo providers, set to `yahoo`.
                      example: yahoo
                    settings:
                      type: object
                      description: Yahoo provider credentials.
                      required:
                        - client_id
                        - client_secret
                      properties:
                        client_id:
                          type: string
                          description: The Yahoo app's client ID.
                          example: abc-def
                        client_secret:
                          type: string
                          description: The Yahoo app's client secret.
                          example: xyz-abc-def
                    scope:
                      type: array
                      items:
                        type: string
                      description: Set the default scopes for each connector. These scopes are overridden by scopes set on the specific grant.
                      example:
                        - email
                        - profile
                        - mail-w
      responses:
        '201':
          description: Connector Created
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request.
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/ConnectorObject'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |
            curl --request POST \
              --url https://api.us.nylas.com/v3/connectors \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                "provider": "<string>",
                "settings": {
                  "client_id": "<NYLAS_CLIENT_ID>",
                  "client_secret": "<NYLAS_CLIENT_SECRET>",
                  "topic_name": "<TOPIC_NAME>"
                },
                "scope": [
                  "<string>",
                  "<string>"
                ]
              }'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            // Nylas configuration
            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            const identifier = process.env.NYLAS_GRANT_ID

            async function createConnector() {
              try {
                const connector = await nylas.connectors.create({
                  requestBody: {
                    name: 'google',
                    provider: 'google',
                    settings: {
                      clientId: process.env.GCP_CLIENT_ID,
                      clientSecret: process.env.GCP_CLIENT_SECRET,
                    },
                    scope: [
                      'openid',
                      'https://www.googleapis.com/auth/userinfo.email',
                      'https://www.googleapis.com/auth/gmail.modify',
                      'https://www.googleapis.com/auth/calendar',
                      'https://www.googleapis.com/auth/contacts',
                    ],
                  },
                });

                console.log('Connector created:', connector)
              } catch (error) {
                console.error('Error creating connector:', error)
              }
            }

            createConnector()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            # Create a connector
            connector = nylas.connectors.create(
              request_body={
                "provider": "google",
                "settings": {
                  "client_id": os.environ.get('GCP_CLIENT_ID'),
                  "client_secret": os.environ.get('GCP_CLIENT_SECRET')
                },
                "scopes": [
                  'openid',
                  'https://www.googleapis.com/auth/userinfo.email',
                  'https://www.googleapis.com/auth/gmail.modify',
                  'https://www.googleapis.com/auth/calendar',
                  'https://www.googleapis.com/auth/contacts'
                ]
              }
            )
        - lang: ruby
          label: Ruby SDK
          source: |-
            require 'nylas'

            nylas = Nylas::Client.new(
                api_key: "<NYLAS_API_KEY>"
            )

            request_body = {
              provider: "google",
              settings: {
                clientId: "<GCP_CLIENT_ID>",
                clientSecret: "<GCP_CLIENT_SECRET>",
              },
              scope: [
                'openid',
                'https://www.googleapis.com/auth/userinfo.email',
                'https://www.googleapis.com/auth/gmail.modify',
                'https://www.googleapis.com/auth/calendar',
                'https://www.googleapis.com/auth/contacts',
              ]
            }

            nylas.connectors.create(request_body: request_body)
        - lang: java
          label: Java SDK
          source: |-
            import com.nylas.NylasClient;
            import com.nylas.models.*;
            import java.util.ArrayList;
            import java.util.List;

            public class connector {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                List<String> scope = new ArrayList<>();
                scope.add("openid");
                scope.add("https://www.googleapis.com/auth/userinfo.email");
                scope.add("https://www.googleapis.com/auth/gmail.modify");
                scope.add("https://www.googleapis.com/auth/calendar");
                scope.add("https://www.googleapis.com/auth/contacts");

                GoogleCreateConnectorSettings settings = new GoogleCreateConnectorSettings(
                    "<GCP_CLIENT_ID>",
                    "<GCP_CLIENT_SECRET>",
                    ""
                );

                CreateConnectorRequest request = new CreateConnectorRequest.Google(settings, scope);

                nylas.connectors().create(request);
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |-
            import com.nylas.NylasClient
            import com.nylas.models.CreateConnectorRequest
            import com.nylas.models.GoogleCreateConnectorSettings

            fun main(args: Array<String>) {
              val nylas: NylasClient = NylasClient(
                  apiKey = "<NYLAS_API_KEY>"
              )

              var scope = listOf(
                  "openid",
                  "https://www.googleapis.com/auth/userinfo.email",
                  "https://www.googleapis.com/auth/gmail.modify",
                  "https://www.googleapis.com/auth/calendar",
                  "https://www.googleapis.com/auth/contacts"
              )

              val settings : GoogleCreateConnectorSettings = GoogleCreateConnectorSettings(
                  "<GCP_CLIENT_ID>",
                  "<GCP_CLIENT_SECRET>",
                  ""
              )

              val request : CreateConnectorRequest = CreateConnectorRequest.Google(settings, scope)

              nylas.connectors().create(request)
            }
    get:
      operationId: get_connector_all
      tags:
        - Connectors (Integrations)
      summary: List connectors
      description: List the connectors in your Nylas application.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          required: false
          description: Limit the number of results in a connector list.
        - name: offset
          in: query
          schema:
            type: integer
          required: false
          description: Offset the list of results in a connector list.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request.
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConnectorObject'
                  limit:
                    type: integer
                    example: 10
                  offset:
                    type: integer
                    example: 0
          description: Returns an array of Connector objects.
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url https://api.us.nylas.com/v3/connectors \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |
            import 'dotenv/config'
            import Nylas from 'nylas'

            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            const listConnectors = async () => {
              try {
                const connectors = await nylas.connectors.list({})

                console.log('Connectors:', connectors)
              } catch (error) {
                console.error('Error fetching connectors:', error)
              }
            }

            listConnectors()
        - lang: python
          label: Python SDK
          source: |-
            # Load your env variables
            from dotenv import load_dotenv
            load_dotenv()

            # Import your dependencies
            import os
            import sys
            from nylas import Client

            # Initialize your Nylas API client
            nylas = Client(
              os.environ.get('NYLAS_API_KEY'),
              os.environ.get('NYLAS_API_URI')
            )

            connectors = nylas.connectors.list

            print("Connectors:", connectors)
        - lang: ruby
          label: Ruby SDK
          source: |-
            require 'nylas'
            require 'dotenv/load'

            nylas = Nylas::Client.new(
                api_key: ENV["NYLAS_API_KEY"]
            )

            connectors = nylas.connectors.list()

            puts connectors
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class ListDraft {
                public static void main(String[] args) throws
                NylasSdkTimeoutError, NylasApiError {
                    NylasClient nylas =
                    new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    ListResponse<Connector> connectors =
                    nylas.connectors().list();
                    System.out.println(connectors);
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient

            fun main(args: Array<String>) {

                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val connectors = nylas.connectors().list()
                println(connectors)
            }
  /v3/connectors/{provider}:
    get:
      operationId: get_connector_by_provider
      tags:
        - Connectors (Integrations)
      summary: Get connector
      description: Returns a connector (previously called an integration) for the provider you specify. These APIs take a `provider` type instead of an ID, because in API v3 you only have one connector per provider.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - $ref: '#/components/parameters/provider'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/ConnectorObject'
          description: Returns a connector object
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |
            curl --request GET \
              --url https://api.us.nylas.com/v3/connectors \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |
            import 'dotenv/config'
            import Nylas from 'nylas'

            // Configure the Nylas SDK with your API key and server URL
            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            const getConnector = async () => {
              try {
                const connector = await nylas.connectors.find({
                  provider: 'google'
                })

                console.log('Connector', connector)
              } catch (error) {
                console.error('Error fetching connector:', error)
              }
            }

            getConnector()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            # Import your dependencies
            import os
            import sys
            from nylas import Client

            # Initialize your Nylas API client
            nylas = Client(
              os.environ.get('NYLAS_API_KEY'),
              os.environ.get('NYLAS_API_URI')
            )

            connector = nylas.connectors.find(
              provider="google"
            )

            print("Connector:", connector)
        - lang: ruby
          label: Ruby SDK
          source: |-
            require 'nylas'
            require 'dotenv/load'

            nylas = Nylas::Client.new(
                api_key: ENV["NYLAS_API_KEY"]
            )

            connectors = nylas.connectors.find(provider: "google")

            puts connectors
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class ListDraft {
                public static void main(String[] args) throws
                NylasSdkTimeoutError, NylasApiError {
                    NylasClient nylas =
                    new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    Response<Connector> connector =
                    nylas.connectors().find(AuthProvider.GOOGLE);
                    System.out.println(connector);
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient
            import com.nylas.models.AuthProvider

            fun main(args: Array<String>) {

                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val connector =
                nylas.connectors().find(AuthProvider.GOOGLE)
                println(connector)
            }
    patch:
      operationId: update_connector_by_provider
      tags:
        - Connectors (Integrations)
      summary: Update a connector
      description: |-
        Update the connector for the specified provider.

        When you make a `PATCH` request, Nylas replaces all data in the nested object with the information
        included in your request. For more information, see
        [Updating objects](/docs/api/v3/admin/#overview--updating-objects).
      security:
        - NYLAS_API_KEY: []
      parameters:
        - $ref: '#/components/parameters/provider'
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                settings:
                  type: object
                  description: Oauth provider credentials and settings
                  example:
                    tenant: common
                scope:
                  type: array
                  description: Oauth "scope" parameter
                  example:
                    - Mail.Read
                    - User.Read
                    - offline_access
                  items:
                    type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/ConnectorObject'
          description: Returns the connector object (previously called an integration) for the provider you specify.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request PATCH \
              --url 'https://api.us.nylas.com/v3/connectors/<CONNECTOR>' \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                  "name": "google"
              }'
        - lang: python
          label: Python SDK
          source: |-
            # Load your env variables
            from dotenv import load_dotenv
            load_dotenv()

            # Import your dependencies
            import os
            import sys
            from nylas import Client

            # Initialize your Nylas API client
            nylas = Client(
              os.environ.get('NYLAS_API_KEY'),
              os.environ.get('NYLAS_API_URI')
            )

            connector = nylas.connectors.update(
              provider='google',
              request_body={
                "name": "google"
              }
            )

            print("Connector:", connector)
        - lang: ruby
          label: Ruby SDK
          source: |
            require 'nylas'

            nylas = Nylas::Client.new(
                api_key: "<NYLAS_API_KEY>"
            )

            request_body = {
              scope: [
                'https://www.googleapis.com/auth/contacts'
              ]
            }

            connector = nylas.connectors.update(provider: "google", request_body: request_body)

            puts connector
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            import java.util.ArrayList;
            import java.util.List;

            public class ListDraft {
                public static void main(String[] args) throws
                NylasSdkTimeoutError, NylasApiError {

                    NylasClient nylas =
                    new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    List<String> scope = new ArrayList<>();
                    scope.add("https://www.googleapis.com/auth/contacts");

                    GoogleConnectorSettings settings =
                    new GoogleConnectorSettings();

                    UpdateConnectorRequest.Google request =
                    new UpdateConnectorRequest.Google(settings, scope);

                    nylas.connectors().update(AuthProvider.GOOGLE, request);
                }
            }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient
            import com.nylas.models.AuthProvider
            import com.nylas.models.GoogleConnectorSettings
            import com.nylas.models.UpdateConnectorRequest

            fun main(args: Array<String>) {

                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val settings : GoogleConnectorSettings =
                GoogleConnectorSettings()

                val request =
                UpdateConnectorRequest.Google(settings)

                val connector =
                nylas.connectors().update(AuthProvider.GOOGLE,
                request)
                println(connector)
            }
    delete:
      operationId: delete_connector_by_provider
      tags:
        - Connectors (Integrations)
      summary: Delete a connector
      description: Delete the existing connector for the provider you specify.
      parameters:
        - $ref: '#/components/parameters/provider'
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          $ref: '#/components/responses/200-delete'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |
            curl --request DELETE \
              --url https://api.us.nylas.com/v3/connectors \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            // Configure the Nylas SDK with your API key and server URL
            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            // Function to remove a connector
            const removeConnector = async (provider) => {
              try {
                await nylas.connectors.destroy({ provider })

                console.log(`Connector with ID ${provider} removed successfully.`)
              } catch (error) {
                console.error('Error removing connector:', error)
              }
            }

            const provider = 'google'
            removeConnector(provider)
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            provider = 'google'

            request = nylas.connectors.destroy(
              provider,
            )

            print(request)
        - lang: ruby
          label: Ruby SDK
          source: |-
            require 'nylas'
            require 'dotenv/load'

            nylas = Nylas::Client.new(
                api_key: ENV["NYLAS_API_KEY"]
            )

            connector = nylas.connectors.destroy(provider: "google")

            puts connector
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class ListDraft {
                public static void main(String[] args) throws
                NylasSdkTimeoutError, NylasApiError {
                    NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    DeleteResponse connector =
                    nylas.connectors().destroy(AuthProvider.GOOGLE);
                    System.out.println(connector);
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient
            import com.nylas.models.AuthProvider

            fun main(args: Array<String>) {

                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val connector =
                nylas.connectors().destroy(AuthProvider.GOOGLE)
                println(connector)
            }
  /v3/providers/detect:
    post:
      operationId: detect_provider_by_email
      tags:
        - Connectors (Integrations)
      summary: Detect provider
      description: Returns detected provider if it is found
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request POST \
              --url https://api.us.nylas.com/v3/providers/detect?email=<EMAIL>&all_provider_types=false \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            // Configure the Nylas SDK with your API key and server URL
            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            const detectProvider = async () => {
              try {
                const response = await nylas.auth.detectProvider({
                  clientId: process.env.NYLAS_CLIENT_ID,
                  email: process.env.EMAIL,
                })

                console.log('Connector', response)
              } catch (error) {
                console.error('Error removing connector:', error)
              }
            }

            detectProvider()
        - lang: python
          label: Python SDK
          source: '# TODO'
        - lang: ruby
          label: Ruby SDK
          source: |-
            require 'nylas'

            nylas = Nylas::Client.new(
                api_key: "<NYLAS_API_KEY>"
            )

            query_params = {
              email:  "<EMAIL>"
            }

            provider, _ = nylas.connectors.detect_provider(query_params)

            puts provider
        - lang: java
          label: Java SDK
          source: |-
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class detect_provider {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();
                ProviderDetectConnectorParams params = new ProviderDetectConnectorParams("<EMAIL>", null);
                Response<ProviderDetectResponse> provider = nylas.connectors().detectProvider(params);

                System.out.println(provider);
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |-
            import com.nylas.NylasClient
            import com.nylas.models.ProviderDetectConnectorParams

            fun main(args: Array<String>) {
              val nylas: NylasClient = NylasClient(
                  apiKey = "<NYLAS_API_KEY>"
              )

              val params = ProviderDetectConnectorParams("<EMAIL>", null)
              val provider = nylas.connectors().detectProvider(params)

              print(provider)
            }
      security:
        - NYLAS_API_KEY: []
      parameters:
        - in: query
          name: email
          description: Email for detection
          required: true
          schema:
            type: string
        - in: query
          name: all_provider_types
          description: Search by all providers regardless of if they have an existing connector
          schema:
            default: false
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/AutodetectObject'
          description: Returns the autodetected provider
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /v3/connect/auth:
    get:
      operationId: get_oauth2_flow
      tags:
        - Authentication APIs
      summary: Hosted OAuth - Authorization Request
      description: The initial OAuth 2.0 authorization request. Supports the authorization code flow, in addition to optional PKCE settings for client-side only applications. For more information, see the  [Hosted OAuth with access token](/docs/v3/auth/hosted-oauth-accesstoken/) and [Hosted OAuth with access token and PKCE](/docs/v3/auth/hosted-oauth-accesstoken/#create-grants-with-oauth-2.0-and-pkce) documentation.
      x-code-samples:
        - lang: python
          label: Python SDK
          source: |
            @app.route("/nylas/auth", methods=["GET"])
            def login():
              if session.get("grant_id") is None:
                config = URLForAuthenticationConfig({"client_id": "<NYLAS_CLIENT_ID>",
                    "redirect_uri" : "http://localhost:5000/oauth/exchange"})

                url = nylas.auth.url_for_oauth2(config)
                return redirect(url)
              else:
                return f'{session["grant_id"]}'

            @app.route("/oauth/exchange", methods=["GET"])
            def authorized():
              if session.get("grant_id") is None:
                code = request.args.get("code")

                exchangeRequest = CodeExchangeRequest({"redirect_uri": "http://localhost:5000/oauth/exchange",
                    "code": code, "client_id": "<NYLAS_CLIENT_ID>"})

                exchange = nylas.auth.exchange_code_for_token(exchangeRequest)
                session["grant_id"] = exchange.grant_id

                return redirect(url_for("login"))
        - lang: ruby
          label: Ruby SDK
          source: |
            get '/nylas/auth' do
              config = {
                client_id: '<NYLAS_CLIENT_ID>',
                provider: 'google',
                redirect_uri: 'http://localhost:4567/oauth/exchange',
                login_hint: 'swag@nylas.com',
                access_type: 'offline'
              }

              url = nylas.auth.url_for_oauth2(config)
              redirect url
            end


            get '/oauth/exchange' do
              code = params[:code]
              status 404 if code.nil?

              begin
                response = nylas.auth.exchange_code_for_token({
                client_id: '<NYLAS_CLIENT_ID>',
                redirect_uri: 'http://localhost:4567/oauth/exchange',
                code: code})
              rescue StandardError
                status 500
              else
                response[:grant_id]
                response[:email]
                session[:grant_id] = response[:grant_id]
              end
            end
        - lang: java
          label: Java SDK
          source: |
            get("/nylas/auth", (request, response) -> {

                List<String> scope = new ArrayList<>();
                scope.add("https://www.googleapis.com/auth/calendar");

                UrlForAuthenticationConfig config = new UrlForAuthenticationConfig("<NYLAS_CLIENT_ID>",
                        "http://localhost:4567/oauth/exchange",
                        AccessType.ONLINE,
                        AuthProvider.GOOGLE,
                        Prompt.DETECT,
                        scope,
                        true,
                        "sQ6vFQN",
                        "swag@nylas.com");

                String url = nylas.auth().urlForOAuth2(config);
                response.redirect(url);
                return null;
            });

            get("/oauth/exchange", (request, response) -> {
                String code = request.queryParams("code");
                if(code == null) { response.status(401);}
                assert code != null;
                CodeExchangeRequest codeRequest = new CodeExchangeRequest(
                        "http://localhost:4567/oauth/exchange",
                        code,
                        "<NYLAS_CLIENT_ID>",
                        null,
                        null);
                try{
                    CodeExchangeResponse codeResponse = nylas.auth().exchangeCodeForToken(codeRequest);
                    request.session().attribute("grant_id", codeResponse.getGrantId());
                    return "%s".formatted(codeResponse.getGrantId());
                }catch(Exception e){
                    return  "%s".formatted(e);
                }
            });
        - lang: kotlin
          label: Kotlin SDK
          source: |
            http.get("/nylas/auth") {
                val scope = listOf("https://www.googleapis.com/auth/calendar",
                "https://www.googleapis.com/auth/calendar.events")
                val config : UrlForAuthenticationConfig = UrlForAuthenticationConfig(
                    "<NYLAS_CLIENT_ID>",
                    "http://localhost:4567/oauth/exchange",
                    AccessType.ONLINE,
                    AuthProvider.GOOGLE,
                    Prompt.DETECT,
                    scope,
                    true,
                    "sQ6vFQN",
                    "swag@nylas.com")

                val url = nylas.auth().urlForOAuth2(config)
                response.redirect(url)
            }

            http.get("/oauth/exchange") {
                val code : String = request.queryParams("code")
                if(code == "") { response.status(401) }
                val codeRequest : CodeExchangeRequest = CodeExchangeRequest(
                    "http://localhost:4567/oauth/exchange",
                    code,
                    "<NYLAS_CLIENT_ID>",
                    null,
                    null
                )
                try {
                    val codeResponse : CodeExchangeResponse =
                    nylas.auth().exchangeCodeForToken(codeRequest)
                    request.session().attribute("grant_id",codeResponse.grantId)
                    codeResponse.grantId
                }catch (e : Exception){
                    e.toString()
                }
             }
      parameters:
        - in: query
          name: client_id
          required: true
          description: Your Nylas application's client ID (or application ID).
          schema:
            type: string
        - in: query
          name: provider
          required: false
          description: The connector provider type that you set up with Nylas for this application. If the provider isn't set, the end user is directed to the Nylas Hosted login page and prompted to select their provider. Multiple providers can be set as a comma-separated list.
          schema:
            type: string
            enum:
              - google
              - microsoft
              - imap
              - icloud
              - yahoo
              - ews
              - zoom
        - in: query
          name: redirect_uri
          required: true
          description: Your Nylas application's redirect URI (or callback URI).
          schema:
            type: string
        - in: query
          name: response_type
          required: true
          description: Specifies the type of response Nylas returns for the authorization flow. Should be set to `code` for the OAuth 2.0 flow, and `adminconsent` for the Microsoft admin consent service flow.
          schema:
            type: string
            enum:
              - code
              - adminconsent
        - in: query
          name: scope
          description: A space-delimited list of scopes that identify the resources that your application may access on the end user's behalf. If no scopes are set, Nylas uses the default connector scopes.
          schema:
            type: string
        - in: query
          name: prompt
          required: false
          description: |-
            (Optional) The prompt for the Hosted login page. This parameter can accept multiple values separated by a comma, without spaces in between. The order of the prompts affects the UI of the Hosted login page.
            If `provider` is not set, the end user is redirected to the provider page directly, and the prompt is ignored.
          schema:
            type: string
            default: select_provider
            enum:
              - select_provider
              - detect
              - select_provider,detect
              - detect,select_provider
        - in: query
          name: state
          description: (Optional) The state of the grant, returned after authentication. The maximum length is 256 characters.
          schema:
            type: string
        - in: query
          name: login_hint
          description: Prefill the login name (usually the email address) during the authentication flow. If a grant already exists for the provided email address, Nylas automatically re-authenticates the grant.
          schema:
            type: string
        - in: query
          name: access_type
          description: Specifies whether Nylas should return a refresh token along with the exchange token. This isn't suitable for client-side or JavaScript applications.
          schema:
            type: string
            enum:
              - offline
              - online
        - in: query
          name: code_challenge
          description: Specifies a Base64-encoded `code_verifier` without padding. The verifier is used as a server-side challenge during the authorization code exchange.
          schema:
            example: e96bf6686a3c3510e9e927db7069cb1cba9b99b022f49483a6ce3270809e68a2
            type: string
        - in: query
          name: code_challenge_method
          description: Specifies the method used to encode the `code_verifier`. The verifier is used as a server-side challenge during the authorization code exchange.
          schema:
            example: S256
            type: string
            enum:
              - plain
              - S256
            default: plain
        - in: query
          name: credential_id
          description: (Microsoft admin consent bulk authentication flow only) The ID of an existing Nylas connector credential record that's attached to the application's Microsoft connector. Use this field for Microsoft admin consent credential IDs only.
          schema:
            type: string
            example: e19f8e1a-eb1c-41c0-b6a6-d2e59daf7f47
      responses:
        '302':
          description: Redirects an end user to the selected provider's authorization page.
          headers:
            Location:
              description: Location header.
              schema:
                type: string
                format: url
                example: |
                  https://accounts.google.com/o/oauth2/auth/oauthchooseaccount?prompt=consent&login_hint=email@google.com&access_type=offline&state=<BA630DED06...> &redirect_uri=https://api.us.nylas.com/v3/connect/callback&response_type=code&client_id=<NYLAS_CLIENT_ID>
  /v3/connect/token:
    post:
      operationId: exchange_oauth2_token
      tags:
        - Authentication APIs
      summary: Hosted OAuth - Token exchange
      description: |-
        The standard OAuth token endpoint for Hosted authentication. You can pass one of the following
        `grant_type` values:

        - `authorization_code`: Exchange the `code` Nylas returns from the OAuth 2.0 authorization flow
        for tokens (`access_token` and `refresh_token`).
        - `refresh_token`: Issue a new `access_token` using an existing `refresh_token`. You _must_ pass
        your API key in the `client_secret` field.

        This endpoint accepts both `application/json` and `application/x-www-form-urlencoded` request body
        types. The body parameters are the same for both, with the same naming conventions.

        For more information, see the
        [Hosted authentication with access token documentation](/docs/v3/auth/hosted-oauth-accesstoken/).

        ### Failed token exchange requests

        Because OAuth `code`s are unique, one-time-use credentials, you must restart the OAuth process if
        your token exchange request fails. If you try to pass the original `code` in another token exchange
        request, Nylas returns an error.
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: Exchange code
                  required:
                    - code
                    - client_id
                    - client_secret
                    - redirect_uri
                    - grant_type
                  properties:
                    client_id:
                      example: <NYLAS_CLIENT_ID>
                      type: string
                      description: Your Nylas application's client ID.
                    client_secret:
                      example: <NYLAS_API_KEY>
                      type: string
                      description: Your Nylas application's API key.
                    grant_type:
                      example: authorization_code
                      type: string
                      description: Supports exchanging a `code` for a token, or refreshing an access token using a `refresh_token`.
                      enum:
                        - authorization_code
                    code:
                      type: string
                      description: The `code` from the OAuth 2.0 authorization flow.
                    redirect_uri:
                      example: https://example.com/callback-handler
                      format: url
                      type: string
                      description: The URL that Nylas redirects the end user to after the authentication flow. This should match the `callback_uri` or `redirect_uri` that you used to get the `code` during the initial [authorization request](/docs/api/v3/admin/#get-/v3/connect/auth).
                    code_verifier:
                      example: nylas
                      type: string
                      description: The plaintext `code` verifier (`code_challenge`) that you created in the [authorization request](/docs/api/v3/admin/#get-/v3/connect/auth).
                - type: object
                  title: Refresh access token
                  required:
                    - refresh_token
                    - client_id
                    - client_secret
                    - grant_type
                  properties:
                    client_id:
                      example: <NYLAS_CLIENT_ID>
                      type: string
                      description: Your Nylas application's client ID.
                    client_secret:
                      example: <NYLAS_API_KEY>
                      type: string
                      description: Your Nylas application's API key.
                    grant_type:
                      example: refresh_token
                      type: string
                      description: Supports exchanging a `code` for a token, or refreshing an access token using a `refresh_token`.
                      enum:
                        - refresh_token
                    refresh_token:
                      example: <REFRESH_TOKEN>
                      type: string
                      description: Required to refresh or request a short-lived access token.
      responses:
        '200':
          description: The token exchange was successful.
          content:
            application/json:
              schema:
                type: object
                title: data
                properties:
                  access_token:
                    example: <NYLAS_ACCESS_TOKEN>
                    type: string
                    description: Supports exchanging a `code` for a token, or refreshing an access token using a `refresh_token`.
                  expires_in:
                    example: 3600
                    type: integer
                    default: 3600
                    description: The remaining lifetime of the access token, in seconds.
                  id_token:
                    example: <JWT_TOKEN>
                    type: string
                    description: A JSON web token (JWT) that contains identity information about an end user. It's digitally signed by Nylas.
                  email:
                    example: example@gmail.com
                    type: string
                    description: The email address associated with the provider token exchange.
                  refresh_token:
                    example: <REFRESH_TOKEN>
                    type: string
                    description: Returned only if the `code` was requested using `access_type=offline`.
                  scope:
                    example: https://www.googleapis.com/auth/gmail.readonly profile
                    type: string
                    description: List of scopes associated with this token.
                  token_type:
                    example: Bearer
                    type: string
                    description: Currently always `Bearer`.
                  grant_id:
                    example: <NYLAS_GRANT_ID>
                    type: string
                    description: The ID for the new grant.
                  provider:
                    example: google
                    enum:
                      - google
                      - microsoft
                      - imap
                      - icloud
                      - yahoo
                      - ews
                      - zoom
                    type: string
                    description: The provider name associated with the authorized grant. Only returned during the code exchange process.
        '400':
          description: The token exchange was unsuccessful. Nylas returns a message with a description, and a link to troubleshooting documentation.
          content:
            application/json:
              schema:
                type: object
                title: data
                properties:
                  error:
                    example: invalid_request
                    type: string
                    description: Error type constant.
                  error_description:
                    example: 'Missing required parameter: code'
                    type: string
                    description: A human-readable error description.
                  error_uri:
                    example: developer.nylas.com/docs/api/errors/400-response/
                    type: string
                    description: A URL to the related documentation and troubleshooting regarding this error.
                  error_code:
                    example: 400
                    type: string
                    description: Error code used for referencing the documentation, logs, and data stream.
      x-code-samples:
        - lang: javascript
          label: Node.js SDK
          source: |
            app.get('/oauth/exchange', async (req, res) => {
              console.log(res.status)

              const code = req.query.code

              if (!code) {
                res.status(400).send('No authorization code returned from Nylas')
                return
              }

              try {
                const response = await nylas.auth.exchangeCodeForToken({
                  clientId: config.clientId,
                  redirectUri: config.redirectUri,
                  codeVerifier: 'insert-code-challenge-secret-hash',
                  code
                })

                const { grantId } = response

                res.status(200)
              } catch (error) {
                console.error('Error exchanging code for token:', error)

                res.status(500).send('Failed to exchange authorization code for token')
              }
            })
        - lang: python
          label: Python SDK
          source: |
            import json
            import os
            from functools import wraps
            from io import BytesIO
            from flask import Flask
            from nylas import Client

            nylas = Client(
                "<NYLAS_CLIENT_ID>",
                "<NYLAS_API_URI>"
            )

            REDIRECT_CLIENT_URI = 'http://localhost:9000/oauth/exchange'

            @flask_app.route("/oauth/exchange", methods=["GET"])

            def exchange_code_for_token():
              code_exchange_response = nylas.auth.exchange_code_for_token(
                  request={
                    "code": request.args.get('code'),
                    "client_id": "<NYLAS_CLIENT_ID>",
                    "redirect_uri": REDIRECT_CLIENT_URI
                  }
              )

              return {
                'email_address': code_exchange_response.email,
                'grant_id': code_exchange_response.grant_id
              }
        - lang: ruby
          label: Ruby SDK
          source: |
            get '/oauth/exchange' do
              code = params[:code]
              status 404 if code.nil?

              begin
                response = nylas.auth.exchange_code_for_token({
                  client_id: "<NYLAS_CLIENT_ID>",
                  redirect_uri: 'http://localhost:4567/oauth/exchange',
                  code: code
                })
              rescue StandardError
                status 500
              else
                grant_id = response[:grant_id]
                email = response[:email]

                "Grant_Id: #{grant_id} \n Email: #{email}"
              end
            end
        - lang: java
          label: Java SDK
          source: |
            get("/oauth/exchange", (request, response) -> {
              String code = request.queryParams("code");

              if(code == null) { response.status(401); }

              assert code != null;

              CodeExchangeRequest codeRequest = new CodeExchangeRequest(
                  "http://localhost:4567/oauth/exchange",
                  code,
                  "<NYLAS_CLIENT_ID>",
                  "nylas"
              );

              try {
                CodeExchangeResponse codeResponse = nylas.auth().exchangeCodeForToken(codeRequest);

                return "%s".formatted(codeResponse);
              } catch(Exception e) {
                return  "%s".formatted(e);
              }
            });
        - lang: kotlin
          label: Kotlin SDK
          source: |
            http.get("/oauth/exchange") {
              val code : String = request.queryParams("code")

              if(code == "") { response.status(401) }

              val codeRequest : CodeExchangeRequest = CodeExchangeRequest(
                  "http://localhost:4567/oauth/exchange",
                  code,
                  "<NYLAS_CLIENT_ID>",
                  "nylas"
              )

              try {
                val codeResponse : CodeExchangeResponse = nylas.auth().exchangeCodeForToken(codeRequest)

                codeResponse
              } catch (e : Exception) {
                e
              }
            }
  /v3/connect/revoke:
    post:
      operationId: revoke_oauth2_token_and_grant
      tags:
        - Authentication APIs
      summary: Hosted OAuth - Revoke OAuth token
      description: |
        Revoke a Nylas OAuth access token. Pass the token to be revoked as a query parameter.
        If you revoke the Nylas OAuth token, it does not revoke the grant or the associated provider token that Nylas uses internally. This means that an end-user can reauthenticate to get a new access token for the existing grant, so the `grant_id` does not change.
        If you revoke a Nylas access token, Nylas also revokes all child tokens and the parent `refresh_token` attached to the access token.
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: The token to revoke
      responses:
        '200':
          description: The token was revoked successfully.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: The token could not be revoked, possibly because it was invalid or already expired.
          content:
            application/json:
              schema:
                type: object
                title: data
                properties:
                  error:
                    example: invalid_token
                    type: string
                    description: Error type constant.
                  error_description:
                    example: Token expired or revoked
                    type: string
                    description: Human readable error description.
                  error_uri:
                    example: developer.nylas.com/docs/api/errors/400-response/
                    type: string
                    description: A url to the related documentation and troubleshooting regarding this error.
                  error_code:
                    example: 400
                    type: string
                    description: Error code used for referencing the docs, logs and data stream.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request POST \
            --url 'https://api.us.nylas.com/v3/connect/revoke?token=<TOKEN>' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer <NYLAS_API_KEY>' \
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            // Configure the Nylas SDK with your API key and server URL
            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            const revokeToken = async () => {
              try {
                const token = process.env.TOKEN
                const response = await nylas.auth.revoke(token)

                console.log('Token Revoked:', response)
              } catch (error) {
                console.error('Error removing connector:', error)
              }
            }

            revokeToken()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            request = nylas.auth.revoke(
              os.environ.get('TOKEN'),
            )

            print(request)
        - lang: ruby
          label: Ruby SDK
          source: |
            # frozen_string_literal: true

            require 'nylas'
            require 'dotenv/load'

            nylas = Nylas::Client.new(
              api_key: ENV['V3_TOKEN']
            )

            begin
            token_state = nylas.auth.revoke("<NYLAS_AUTH_TOKEN>")
              if(token_state)
                puts "The token was successfully removed"
              else
                puts "The token cannot be removed"
              end
            rescue Exception => e
              puts "Invalid token cannot be removed"
            end
        - lang: java
          label: Java SDK
          source: |
            package org.example;

            import com.nylas.NylasClient;
            import com.nylas.models.TokenParams;

            public class Revoke_Auth_Token {
                public static void main(String[] args) {
                    Dotenv dotenv = Dotenv.load();
                    NylasClient nylas = new NylasClient.Builder("<V3_TOKEN_API>").build();
                    TokenParams token = new TokenParams("<NYLAS_AUTH_TOKEN>");

                    try{
                    boolean token_status = nylas.auth().revoke(token);
                        if(token_status){
                            System.out.println("The token was successfully removed");
                        }else{
                            System.out.println("The token cannot be removed");
                        }
                    }catch (Exception e){
                        System.out.println("Invalid token cannot be removed");
                    }
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: "package org.example\n\nimport com.nylas.NylasClient\nimport com.nylas.models.*\n\nfun main() {\n\t\n    val nylas: NylasClient = NylasClient(\n        apiKey = \"<V3_TOKEN_API>\"\n    )\n\n    val token = TokenParams(\"<NYLAS_AUTH_TOKEN>\")\n\n    try{\n        val token_status = nylas.auth().revoke(token)\n        if(token_status){\n            println(\"The token was successfully removed\");\n        }else{\n            println(\"The token cannot be removed\");\n        }\n    }catch (e: Exception){\n        print(\"Invalid token cannot be removed\")\n    }\n}\n"
  /v3/connect/tokeninfo:
    get:
      operationId: info_oauth2_token
      tags:
        - Authentication APIs
      summary: OAuth Token Info
      description: |
        Get info about a specific token based on the identifier you include. Use _either_ the ID Token or Access Token.</br></br>**Note**: Because Nylas uses the schema outlined in [RFC 9068](https://datatracker.ietf.org/doc/html/rfc9068#name-requesting-a-jwt-access-tok) to ensure that it is compatible with all OAuth libraries in all languages, the format for this endpoint is different from the other OAuth endpoints.
      parameters:
        - in: query
          name: id_token
          schema:
            type: string
          description: ID token
        - in: query
          name: access_token
          schema:
            type: string
          description: Access token
      responses:
        '200':
          description: Returns Token info
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    type: object
                    properties:
                      iss:
                        type: string
                        description: Token's issuer
                        example: https://nylas.com
                      aud:
                        type: string
                        description: Token's audience
                        example: 'http://localhost: 3030'
                      sub:
                        type: string
                        description: Token's subject
                        example: Jaf84d88-¬£274-46cc-bbc9-aed7dac061c7
                      email:
                        type: string
                        description: Email of grant's user token belongs to
                        example: user@example.com
                      iat:
                        type: integer
                        description: Token issued at
                        example: 1692094848
                      exp:
                        type: integer
                        description: Token expries at
                        example: 1692095173
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                title: data
                properties:
                  error:
                    example: invalid_token
                    type: string
                    description: Error type constant.
                  error_description:
                    example: Token expired or revoked
                    type: string
                    description: Human readable error description.
                  error_uri:
                    example: developer.nylas.com/docs/api/errors/400-response/
                    type: string
                    description: A url to the related documentation and troubleshooting regarding this error.
                  error_code:
                    example: 400
                    type: string
                    description: Error code used for referencing the docs, logs and data stream.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url 'https://api.us.nylas.com/v3/connect/tokeninfo?id_token=<ACCESS_TOKEN_ID>&access_token=<NYLAS_ACCESS_TOKEN>' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            // Configure the Nylas SDK with your API key and server URL
            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            const revokeToken = async () => {
              try {
                const token = process.env.TOKEN
                const response = await nylas.auth.accessTokenInfo(token)

                console.log('Token Revoked:', response)
              } catch (error) {
                console.error('Error removing connector:', error)
              }
            }

            revokeToken()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            request = nylas.auth.id_token_info(
              os.environ.get('ACCESS_TOKEN_ID'),
            )

            print(request)
        - lang: ruby
          label: Ruby SDK
          source: "require 'nylas'\t\n\nnylas = Nylas::Client.new(\n\t  api_key: \"<NYLAS_API_KEY>\"\n)\n\nquery_params = {\n    id_token: \"<ACCESS_TOKEN_ID>\"\n}\n\ntoken_info = nylas.auth.access_token_info(query_params: query_params)\n\nputs token_info\n"
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class GetTokenInfo {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();
                Response<TokenInfoResponse> token = nylas.auth().idTokenInfo("<ACCESS_TOKEN_ID>");

                System.out.println(token);
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient

            fun main(args: Array<String>) {
              val nylas: NylasClient = NylasClient(
                  apiKey = "<NYLAS_API_KEY>"
              )

              val token = nylas.auth().idTokenInfo("<ACCESS_TOKEN_ID>")

              print(token)
            }
  /v3/connect/custom:
    post:
      operationId: custom_auth_flow
      tags:
        - Manage Grants
        - Authentication APIs
      summary: Custom Authentication
      description: Manually create a grant using a Custom authentication flow (previously called "Native authentication"). If you are handling the OAuth flow in your own application or want to migrate existing users, Custom auth allows you to provide the user `refresh_token` in order to create a grant. </br></br> If a user previously authenticated with your Nylas application using the same email account, Nylas detects this and re-authenticates the existing grant instead of creating a new one. The API response contains the existing `grant_id` for the user.
      security:
        - NYLAS_API_KEY: []
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  description: Refresh Token
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: OAuth provider
                      enum:
                        - google
                        - microsoft
                        - yahoo
                        - zoom
                    settings:
                      description: Settings required by provider. This includes the `refresh_token`.
                      example:
                        refresh_token: 1//09XpDHQ6hq6PrCgYIARAAGAkSNwF...
                      type: object
                      properties:
                        refresh_token:
                          type: string
                          description: The refresh token associated with the email account.
                          example: 1//09XpDHQ6hq6PrCgYIARAAGAkSNwF...
                - type: object
                  description: Credential Override
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: OAuth provider
                      enum:
                        - google
                        - microsoft
                        - yahoo
                        - zoom
                    settings:
                      description: |-
                        A list of settings required by the provider, including the `refresh_token`.
                        If you add the `credential_id` attribute with the UUID of an existing [credential record](/docs/api/v3/admin/#post-/v3/connectors/-provider-/creds), Nylas uses the provider's `client_id` and `client_secret` from the credential record. If the credential data is missing or invalid, Nylas falls back and uses the connector's default values.
                      example:
                        refresh_token: 1//09XpDHQ6hq6PrCgYIARAAGAkSNwF...
                        credential_id: e280d2fa-86db-4937-81c9-ffbd539872d6
                      type: object
                      properties:
                        refresh_token:
                          type: string
                          description: The refresh token associated with the email account.
                          example: 1//09XpDHQ6hq6PrCgYIARAAGAkSNwF...
                        credential_id:
                          type: string
                          description: The ID of an existing connector credential that Nylas can use to override default connector settings. When you specify a credential ID, it overrides the default connector settings for the provider.
                - type: object
                  description: Microsoft App Permission (Bulk Auth)
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: OAuth provider
                      enum:
                        - microsoft
                    settings:
                      description: Settings required by Bulk Auth. This sets the end user's email address and the Nylas Credential record ID. If a grant already exists for the provided email address, Nylas automatically starts the re-authentication process.
                      example:
                        email_address: user@office365.com
                        credential_id: e280d2fa-86db-4937-81c9-ffbd539872d6
                      type: object
                      properties:
                        email_address:
                          type: string
                          description: The end user's email address.
                          example: user@office365.com
                        credential_id:
                          type: string
                          description: The ID of an existing `adminconsent` credential that can be used to authenticate Microsoft App Permission grants.
                          example: e280d2fa-86db-4937-81c9-ffbd539872d6
                - type: object
                  description: Google Service Account (Bulk Auth)
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: OAuth provider
                      enum:
                        - google
                    settings:
                      description: Settings required by Bulk Auth. This sets the end user's email address and the Nylas `credential_id`. If a grant already exists for the provided email address, Nylas automatically starts the re-authentication process.
                      example:
                        email_address: user@gmailworkspace.com
                        credential_id: e280d2fa-86db-4937-81c9-ffbd539872d6
                      type: object
                      properties:
                        email_address:
                          type: string
                          description: The end user's email address.
                          example: user@gmailworkspace.com
                        credential_id:
                          type: string
                          description: The ID of an existing `serviceaccount` credential that can be used to authenticate Google workspace service account grants.
                          example: e280d2fa-86db-4937-81c9-ffbd539872d6
                        scopes:
                          type: array
                          items:
                            type: string
                          description: The scopes defined for this generated grant.
                          example:
                            - https://www.googleapis.com/auth/userinfo.email
                            - https://www.googleapis.com/auth/userinfo.profile
                            - https://www.googleapis.com/auth/gmail.readonly
                - type: object
                  description: IMAP
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: OAuth provider
                      enum:
                        - imap
                    settings:
                      description: Settings required by the IMAP provider.
                      example:
                        imap_username: <IMAP_USERNAME>
                        imap_password: <IMAP_PASSWORD>
                        imap_host: <IMAP_HOST>
                        imap_port: '993'
                        smtp_host: <SMTP_HOST>
                        smtp_port: '465'
                      type: object
                      properties:
                        imap_username:
                          type: string
                          description: The end user's email address.
                          example: user@example.com
                        imap_password:
                          type: string
                          description: The end user's email account password or app password.
                        imap_host:
                          type: string
                          description: (Optional) The IMAP host. If you don't define the host in the request payload, Nylas tries to auto-detect the hostname using the `imap_username`. If you're using a self-hosted IMAP server, you must provide the hostname.
                          example: imap.mail.me.com
                        imap_port:
                          type: integer
                          description: (Optional) The IMAP port. If you don't define the port in the request payload, Nylas tries to auto-detect the port using the `imap_username`. If you're using a self-hosted IMAP server, you must provide the port number.
                          example: 993
                        smtp_host:
                          type: string
                          description: (Optional) The SMTP host. If you don't define the host in the request payload, Nylas tries to auto-detect the hostname using the `imap_username`. If you're using a self-hosted SMTP server, you must provide the host name.
                          example: smtp.mail.me.com
                        smtp_port:
                          type: integer
                          description: (Optional) The SMTP port. If you don't define the port in the request payload, Nylas tries to auto-detect the port using the `imap_username`. If you're using a self-hosted SMTP server, you must provide the port number.
                          example: 587
                - type: object
                  description: iCloud
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: OAuth provider
                      enum:
                        - icloud
                    settings:
                      description: Settings required by iCloud.
                      example:
                        username: <ICLOUD_USERNAME>
                        password: <ICLOUD_PASSWORD>
                      type: object
                      properties:
                        username:
                          type: string
                          description: The end user's iCloud email address.
                          example: example@icloud.com
                        password:
                          type: string
                          description: The end user's app password.
                - type: object
                  description: Microsoft Exchange (EWS)
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: The OAuth provider.
                      enum:
                        - ews
                    settings:
                      description: The settings required by the OAuth provider (`email`, `ews_username`, `ews_password`, `ews_host`).
                      example:
                        email: <email>
                        ews_username: <username>
                        ews_password: <password>
                        ews_host: <host>
                      type: object
                      properties:
                        email:
                          type: string
                          description: The end user's email address.
                          example: user@ews.example.com
                        ews_username:
                          type: string
                          description: The end user's Exchange username, formatted as an email address.
                          example: user@ews.example.com
                        ews_password:
                          type: string
                          description: The user's Microsoft Exchange password.
                        ews_host:
                          type: string
                          description: The EWS host. If you don't define the host in the request payload, Nylas tries to auto-detect the hostname using the `ews_username`. If you are using a self-hosted EWS server, you must provide the hostname.
                          example: ews.mail.example.com
                        ews_port:
                          type: integer
                          description: (Optional) The EWS port. If you don't define the port in the request payload, Nylas defaults to `443`.
                          default: 443
                    scope:
                      type: array
                      items:
                        type: string
                      description: The scopes defined for this grant.
                      example:
                        - ews.messages
                        - ews.calendars
                        - ews.contacts
                - type: object
                  description: Virtual Calendars
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: provider
                      enum:
                        - virtual-calendar
                      example: virtual-calendar
                    settings:
                      description: Settings required by Virtual Calendars provider.
                      type: object
                      properties:
                        email:
                          type: string
                          description: The email address associated with the virtual account. This can be any arbitrary identifier. It does not need to be a real email address.
                          example: floor1desk24@example.com
                    state:
                      type: string
                      description: |-
                        Optional state value to return to your project when the auth flow completes. If you include the `state`, Nylas returns the unmodified value to the application. You can use this for verification, or to track information about the user.

                        Learn more about the `state` parameter in the [OAuth 2.0 specification](https://datatracker.ietf.org/doc/html/rfc6749) or the [official OAuth 2.0 documentation](https://www.oauth.com/oauth2-servers/authorization/the-authorization-request/).
                      example: my-state
                - type: object
                  description: Zoom
                  required:
                    - provider
                    - settings
                  properties:
                    provider:
                      type: string
                      description: Zoom Meetings
                      enum:
                        - zoom
                      example: zoom
                    settings:
                      description: Settings required by Zoom provider.
                      type: object
                      properties:
                        refresh_token:
                          type: string
                          description: The refresh_token from Zoom code exchange.
                          example: <ZOOM_REFRESH_TOKEN>
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: The request ID.
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/GrantObject'
          description: Grant Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request POST
              --url https://api.us.nylas.com/v3/connect/custom \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>'\
              --header 'Content-Type: application/json' \
              --data '{
                "provider": "microsoft",
                "settings": {
                  "refresh_token":"<REFRESH_TOKEN>"
                },
                "state": "<STATE>"
              }'
        - lang: ruby
          label: Ruby SDK
          source: "# Load gems\nrequire 'dotenv/load'\nrequire 'nylas'\n\n# Initialize Nylas client\nnylas = Nylas::Client.new(\n\tapi_key: \"<NYLAS_API_KEY>\"\n)\n\n# Request body\nrequest_body = {\n  provider: '<PROVIDER>',\n  settings: {'username': '<USERNAME>', 'password': '<PASSWORD>'},\n  scope: 'email.read_only,calendar.read_only,contacts.read_only',\n  state: '<STATE>'\n}\n\n# Call Custom Authentication\nauth = nylas.auth.custom_authentication(request_body)\nputs auth\n"
        - lang: python
          label: Python SDK
          source: |
            import os
            import sys
            from nylas import Client
            from nylas.models.grants import CreateGrantRequest
            from nylas.models.auth import Provider

            nylas = Client(
              <'NYLAS_API_KEY'>,
              <'NYLAS_API_URI'>
            )

            request_body = CreateGrantRequest(
            {
              "provider": "<PROVIDER>",
              "settings": {"username": "<USERNAME>", "password" : "<PASSWORD>"},
              "scope": ["email.read_only", "calendar.read_only", "contacts.read_only"],
              "state": "<STATE>"
            }
            )

            auth = nylas.auth.custom_authentication(request_body)
            print(auth)
        - lang: java
          label: Java SDK
          source: |
            package org.example;

            // Import Nylas Packages
            import com.nylas.NylasClient;
            import com.nylas.models.*;
            // Import Packages
            import java.util.ArrayList;
            import java.util.HashMap;
            import java.util.List;
            import java.util.Map;

            public class Main {
                public static void main(String[] args) throws
                        NylasSdkTimeoutError, NylasApiError {
                    // Initialize the Nylas client
                    NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();
                    // Select the provider
                    AuthProvider provider = AuthProvider.ICLOUD;
                    // Build out the settings
                    Map<String, String> settings = new HashMap<String, String>();
                    settings.put("username","<USERNAME>");
                    settings.put("password","<PASSWORD>");
                    // Build our the scopes
                    List<String> scope = new ArrayList<String>();
                    scope.add("email.read_only");
                    scope.add("calendar.read_only");
                    scope.add("contacts.read_only");
                    // Create the request body
                    CreateGrantRequest request_body = new CreateGrantRequest(provider,settings, "<SCOPE>", scope);
                    // Generate the grant
                    Response<Grant> auth = nylas.auth().customAuthentication(request_body);
                    System.out.println(auth);
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            package org.example

            // Import Nylas Packages
            import com.nylas.NylasClient
            import com.nylas.models.*

            fun main() {

                // Initialize Nylas client
                val nylas: NylasClient = NylasClient(
                    apiKey = <"V3_TOKEN_API">
                )
                // Select the provider
                val provider = AuthProvider.ICLOUD
                // Build out the settings
                val settings = mapOf<String, String>("username" to <"USERNAME">,
                    "password" to <"PASSWORD">)
                // Build our the scope
                val scopes = listOf("email.read_only", "calendar.read_only", "contacts.read_only")
                // Create the request body
                val requestBody = CreateGrantRequest(provider, settings, "<STATE>", scopes)
                val auth = nylas.auth().customAuthentication(requestBody)
                // Generate the grant
                println(auth)
            }
  /v3/grants:
    get:
      operationId: get_grant_all
      tags:
        - Manage Grants
      summary: List grants
      description: Lists grants for a v3 application
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
            --url 'https://api.us.nylas.com/v3/grants?limit=3&provider=google' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer <NYLAS_API_KEY>' \
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            // Nylas configuration
            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            // Instantiate Nylas SDK
            const nylas = new Nylas(NylasConfig)

            async function listGrants() {
              try {
                const grants = await nylas.grants.list()

                console.log('Grants found:', grants)
              } catch (error) {
                console.error('Error finding grants:', error)
              }
            }

            listGrants()
        - lang: python
          label: Python SDK
          source: |
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            grant_id = os.environ.get("NYLAS_GRANT_ID")

            grants = nylas.grants.list()

            print(grants)
        - lang: ruby
          label: Ruby SDK
          source: |
            # frozen_string_literal: true

            # Load gems
            require 'nylas'

            # Initialize Nylas client
            nylas = Nylas::Client.new(
              api_key: '<NYLAS_API_KEY>'
            )

            grants, _ = nylas.grants.list()

            grants.each do |grant|
              puts "#{grant}\n\n"
            end
        - lang: java
          label: Java SDK
          source: |-
            // Import Nylas packages
            import com.nylas.NylasClient;
            import com.nylas.models.*;
            import java.util.List;

            public class read_grants {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();
                ListResponse<Grant> grants = nylas.grants().list();

                for(Grant grant : grants.getData()){
                  System.out.println(grant);
                }
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            // Import Nylas packages
            import com.nylas.NylasClient

            fun main(args: Array<String>) {
              val nylas: NylasClient = NylasClient(
                  apiKey = "<NYLAS_API_KEY>"
              )

              val grants = nylas.grants().list().data;

              for(grant in grants){
                println(grant)
              }
            }
      security:
        - NYLAS_API_KEY: []
      parameters:
        - in: query
          name: limit
          description: Limit the number of grant results
          schema:
            type: integer
            default: 10
        - in: query
          name: offset
          description: Offset grant results
          schema:
            default: 0
            type: integer
        - in: query
          name: sort_by
          description: Sort entries by field name
          schema:
            type: string
            default: created_at
            enum:
              - created_at
              - updated_at
        - in: query
          name: order_by
          description: Specify ascending or descending order
          schema:
            type: string
            default: desc
            enum:
              - desc
              - asc
        - in: query
          name: since
          description: Scope grants from a specific point in time by `created_at`
          schema:
            type: integer
        - in: query
          name: before
          description: Scope grants to a specific point in time by `created_at`
          schema:
            type: integer
        - in: query
          name: email
          description: Filtering your query based on grant email address (if applicable)
          schema:
            type: string
        - in: query
          name: grant_status
          description: Filtering your query based on grant email status (if applicable)
          schema:
            type: string
            enum:
              - valid
              - invalid
        - in: query
          name: ip
          description: Filtering your query based on grant IP address
          schema:
            type: string
        - in: query
          name: provider
          description: OAuth provider
          schema:
            type: string
        - in: query
          name: account_id
          description: v2 account ID this grant was created from (if applicable)
          schema:
            type: string
        - in: query
          name: account_ids
          description: A comma separated list of v2 account IDs grants was created from (if applicable)
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GrantObject'
                  limit:
                    type: integer
                    example: 10
                  offset:
                    type: integer
                    example: 0
          description: Returns array of Grant objects
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /v3/grants/{grantId}:
    parameters:
      - name: grantId
        schema:
          example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
          type: string
        in: path
        required: true
    get:
      operationId: get_grant_by_id
      tags:
        - Manage Grants
      summary: Get a grant
      description: Gets a grant with the provided ID
      x-code-samples:
        - lang: bash
          label: cURL
          source: |
            curl --request GET \
              --url 'https://api.us.nylas.com/v3/grants/<NYLAS_GRANT_ID>' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            // Instantiate Nylas SDK
            const nylas = new Nylas(NylasConfig)

            // Define the identifier for the grant
            const identifier = process.env.NYLAS_GRANT_ID

            // Function to find the grant
            async function findGrant() {
              try {
                const grant = await nylas.grants.find({ grantId });

                console.log('Grant found:', grant)
              } catch (error) {
                console.error('Error finding grant:', error)
              }
            }

            findGrant()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            grant_id = os.environ.get("NYLAS_GRANT_ID")

            grant = nylas.grants.find(
              grant_id
            )

            print(grant)
        - lang: ruby
          label: Ruby SDK
          source: |-
            # frozen_string_literal: true

            # Load gems
            require 'nylas'

            # Initialize Nylas client
            nylas = Nylas::Client.new(
              api_key: '<NYLAS_API_KEY>'
            )

            grant, _ = nylas.grants.find(grant_id: "<NYLAS_GRANT_ID>")

            puts grant
        - lang: java
          label: Java SDK
          source: |-
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class get_grants {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();
                Response<Grant> grant = nylas.grants().find("<NYLAS_GRANT_ID>");

                System.out.println(grant);
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |-
            // Import Nylas packages
            import com.nylas.NylasClient

            // Import DotEnv to handle .env files
            import io.github.cdimascio.dotenv.dotenv

            fun main(args: Array<String>) {
              // Load our env variable
              val dotenv = dotenv()

              // Initialize Nylas client
              val nylas: NylasClient = NylasClient(
                  apiKey = dotenv["NYLAS_API_KEY"]
              )

              val grant = nylas.grants().find("a57cdf3e-6580-4097-9d71-a95e867fb79c")
              print(grant)
            }
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/GrantObject'
          description: Returns Grant object
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
    patch:
      operationId: patch_grant_by_id
      tags:
        - Manage Grants
      summary: Update a grant
      description: |-
        Update a specific grant.

        When you make a `PATCH` request, Nylas replaces all data in the nested object with the information
        included in your request. For more information, see
        [Updating objects](/docs/api/v3/admin/#overview--updating-objects).
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request PATCH \
              --url 'https://api.us.nylas.com/v3/grants/<NYLAS_GRANT_ID>' \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                "state": "test-state"
              }'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            const NylasConfig = {
             apiKey: process.env.NYLAS_API_KEY,
             apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            async function updateGrant() {
              try {
                const grant = await nylas.grants.update({
                  grantId: process.env.NYLAS_GRANT_ID,
                  requestBody: {
                    scope: ["mail.ready"]
                  }
                })

                console.log('Updated Grant:', grant)
              } catch (error) {
                console.error('Error to update grant:', error)
              }
            }

            updateGrant()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            grant_id = os.environ.get("NYLAS_GRANT_ID")

            grant = nylas.grants.update(
              grant_id,
              request_body={
                "scope": ["mail.ready"]
              }
            )

            print(grant)
        - lang: ruby
          label: Ruby SDK
          source: |-
            # frozen_string_literal: true

            # Load gems
            require 'dotenv/load'
            require 'nylas'

            # Initialize Nylas client
            nylas = Nylas::Client.new(
              api_key: ENV['NYLAS_API_KEY']
            )

            request_body = {
              scope: ["mail.read"]
            }

            status, _ = nylas.grants.update(grant_id: "a57cdf3e-6580-4097-9d71-a95e867fb79c", request_body: request_body)

            puts status
        - lang: java
          label: Java SDK
          source: |-
            import com.nylas.NylasClient;
            import com.nylas.models.*;
            import java.util.ArrayList;
            import java.util.List;

            public class update_grants {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                List<String> scope = new ArrayList<>();
                scope.add("mail.read");

                UpdateGrantRequest requestBody = new UpdateGrantRequest.Builder().scopes(scope).build();
                Response<Grant> grant = nylas.grants().update("<NYLAS_GRANT_ID>", requestBody);

                System.out.println(grant);
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |-
            import com.nylas.NylasClient
            import com.nylas.models.UpdateGrantRequest

            fun main(args: Array<String>) {
              val nylas: NylasClient = NylasClient(
                  apiKey = "<NYLAS_API_KEY>"
              )

              val scope = listOf("mail.read")
              val requestBody = UpdateGrantRequest(null, scope)
              val grant = nylas.grants().update("<NYLAS_GRANT_ID>", requestBody);

              print(grant)
            }
      security:
        - NYLAS_API_KEY: []
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                settings:
                  description: Settings required by provider
                  example:
                    refresh_token: adadada...
                  type: object
                scope:
                  type: array
                  description: Oauth "scope" parameter
                  example:
                    - Mail.Read
                    - User.Read
                    - offline_access
                  items:
                    type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/GrantObject'
          description: Returns Grant object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
    delete:
      operationId: delete_grant_by_id
      tags:
        - Manage Grants
      summary: Delete a grant
      description: Delete an existing grant by ID. You cannot re-authenticate the deleted grant. If you try to re-authenticate it, Nylas creates a new grant instead.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request DELETE \
              --url https://api.us.nylas.com/v3/grants/<NYLAS_GRANT_ID> \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            // Instantiate Nylas SDK
            const nylas = new Nylas(NylasConfig)

            // Define the identifier for the grant
            const identifier = process.env.NYLAS_GRANT_ID

            // Function to delete the grant
            async function destroyGrant() {
              try {
                const response = await nylas.grants.destroy({
                  grantId: identifier,
                })

                console.log('Grant deleted:', response)
              } catch (error) {
                console.error('Error finding grant:', error)
              }
            }

            destroyGrant()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            grant_id = os.environ.get("NYLAS_GRANT_ID")

            response = nylas.grants.destroy(
              grant_id
            )

            print(response)
        - lang: ruby
          label: Ruby SDK
          source: |-
            # frozen_string_literal: true

            # Load gems
            require 'nylas'

            nylas = Nylas::Client.new(
              api_key: '<NYLAS_API_KEY>'
            )

            status, _ = nylas.grants.destroy(grant_id: "<NYLAS_GRANT_ID>")

            puts status
        - lang: java
          label: Java SDK
          source: |-
            import com.nylas.NylasClient;
            import com.nylas.models.*;
            import io.github.cdimascio.dotenv.Dotenv;
            import java.util.List;

            public class read_grants {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY").build();
                DeleteResponse grant = nylas.grants().destroy("<NYLAS_GRANT_ID>");

                System.out.println(grant);
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |-
            import com.nylas.NylasClient

            fun main(args: Array<String>) {
              val nylas: NylasClient = NylasClient(
                  apiKey = "<NYLAS_API_KEY>"
              )

              val grant = nylas.grants().destroy("<NYLAS_GRANT_ID>")

              print(grant)
            }
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          $ref: '#/components/responses/200-delete'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /v3/grants/me:
    get:
      operationId: get_grant_by_access_token
      tags:
        - Manage Grants
      summary: Get current grant
      description: Gets a grant using current access token
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url 'https://api.us.nylas.com/v3/grants/me' \
              --header 'Authorization: Bearer <NYLAS_USER_ACCESS_TOKEN>' \
              --header 'Accept: application/json'
      security:
        - ACCESS_TOKEN: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: ID of the request
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/GrantObject'
          description: Returns Grant object
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /v3/webhooks:
    post:
      tags:
        - Webhook Notifications
      summary: Create a webhook destination
      operationId: post-webhook-destinations
      description: |
        Create a new Webhook Destination with a webhook URL and a set of trigger types to send to the URL.  <br> <i> **Note**: You should limit how many webhook destinations you have for each trigger type. When Nylas retries a webhook, the retry goes to all of the destinations for that trigger type, and can result in a lot of messages. Some webhook testing tools rate limit or block you if your endpoint generates too much traffic. Nylas blocks ngrok connections in v3 for this reason.</i>
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          $ref: '#/components/responses/create_200'
          description: Returns the new Destination
        '400':
          $ref: '#/components/responses/create_400'
      requestBody:
        required: true
        description: Destination definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/destination_input_payload'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |
            curl --request POST \
              --url 'https://api.us.nylas.com/v3/webhooks/' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data-raw '{
                "trigger_types": [
                  "grant.created",
                  "grant.deleted",
                  "grant.expired"
                ],
                "description": "local",
                "webhook_url": "<WEBHOOK_URL>",
                "notification_email_addresses": ["jane@example.com", "joe@example.com"]
              }'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from "nylas"

            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            const createWebhook = async () => {
              try {
                const webhook = await nylas.webhooks.create({
                  requestBody: {
                    triggerTypes: [WebhookTriggers.EventCreated],
                    webhookUrl: process.env.WEBHOOK_URL,
                    description: "My first webhook",
                    notificationEmailAddress: process.env.EMAIL,
                  }
                })

                console.log("Webhook created:", webhook)
              } catch (error) {
                console.error("Error creating webhook:", error)
              }
            }

            createWebhook()
        - lang: python
          label: Python SDK
          source: |
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client
            from nylas.models.webhooks import WebhookTriggers

            nylas = Client(
              os.environ.get('NYLAS_API_KEY'),
              os.environ.get('NYLAS_API_URI')
            )

            grant_id = os.environ.get("NYLAS_GRANT_ID")
            webhook_url = os.environ.get("WEBHOOK_URL")

            email = os.environ.get("EMAIL")

            webhook = nylas.webhooks.create(
              request_body={
                "trigger_types": [WebhookTriggers.EVENT_CREATED],
                "webhook_url": webhook_url,
                "description": "My first webhook",
                "notification_email_address": email,
              }
            )

            print(webhook)
        - lang: ruby
          label: Ruby SDK
          source: |
            require 'nylas'

            nylas = Nylas::Client.new(api_key: "<NYLAS_API_KEY>")

            request_body = {
              trigger_types: [Nylas::WebhookTrigger::EVENT_CREATED],
              webhook_url: "<WEBHOOK_URL>",
              description: 'My first webhook',
              notification_email_address: ["EMAIL_ADDRESS"]
            }

            begin
              webhooks, = nylas.webhooks.create(request_body: request_body)

              puts "Webhook created: #{webhooks}"
            rescue StandardError => ex
              puts "Error creating webhook: #{ex}"
            end
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;
            import com.nylas.resources.Webhooks;
            import com.nylas.models.WebhookTriggers;
            import java.util.*;

            public class webhooks {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                List<WebhookTriggers> triggers = new ArrayList<>();
                triggers.add(WebhookTriggers.EVENT_CREATED);

                CreateWebhookRequest webhookRequest = new CreateWebhookRequest(triggers, "<WEBHOOK_URL>",
                    "My first webhook", "<EMAIL_ADDRESS>");

                try {
                  Response<WebhookWithSecret> webhook = new Webhooks(nylas).create(webhookRequest);

                  System.out.println(webhook.getData());
                } catch (Exception e) {
                  System.out.println("Error: " + e);
                }
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient
            import com.nylas.models.*
            import com.nylas.resources.Webhooks

            fun main(args: Array<String>){
              val nylas: NylasClient = NylasClient(apiKey = "<NYLAS_API_KEY>")
              val triggersList: List<WebhookTriggers> = listOf(WebhookTriggers.EVENT_CREATED)

              val webhookRequest: CreateWebhookRequest = CreateWebhookRequest(triggersList,
                  "<WEBHOOK_URL>",
                  "My first webhook",
                  "<EMAIL_ADDRESS>")

              try {
                val webhook: Response<WebhookWithSecret> = Webhooks(nylas).create(webhookRequest)

                println(webhook.data)
              } catch(exception : Exception) {
                println("Error :$exception")
              }
            }
    get:
      tags:
        - Webhook Notifications
      summary: Get destinations for an application
      operationId: get-webhook-destinations-application
      description: Get a list of all webhook destinations for an application id.
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          $ref: '#/components/responses/get_200'
          description: List of destinations for an application.
        '400':
          $ref: '#/components/responses/get_400'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url 'https://api.us.nylas.com/v3/webhooks' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |
            import 'dotenv/config'
            import Nylas from 'nylas'

            // Configure the Nylas SDK with your API key and server URL
            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            // Function to list connectors
            const listWebhooks = async () => {
              try {
                const webhooks = await nylas.webhooks.list({})

                console.log('webhooks:', webhooks)
              } catch (error) {
                console.error('Error fetching webhooks:', error)
              }
            }

            listWebhooks()
        - lang: python
          label: Python SDK
          source: |
            # Load your env variables
            from dotenv import load_dotenv
            load_dotenv()

            # Import your dependencies
            import os
            import sys
            from nylas import Client

            # Initialize your Nylas API client
            nylas = Client(
              os.environ.get('NYLAS_API_KEY'),
              os.environ.get('NYLAS_API_URI')
            )

            webhooks = nylas.webhooks.list()

            print("webhooks:", webhooks)
        - lang: ruby
          label: Ruby SDK
          source: |
            require 'nylas'

            nylas = Nylas::Client.new(
              api_key: "<NYLAS_API_KEY>"
            )

            webhooks = nylas.webhooks.list()
            puts webhooks
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class webhooks {
                public static void main(String[] args) throws
                NylasSdkTimeoutError, NylasApiError {
                    NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    ListResponse<Webhook> webhooks = nylas.webhooks().list();
                    System.out.println(webhooks.getData());
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient

            fun main(args: Array<String>){

                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val webhooks = nylas.webhooks().list()
                println(webhooks.data)
            }
  /v3/webhooks/{id}:
    get:
      operationId: get-webhook-by-id
      tags:
        - Webhook Notifications
      summary: Get the destinations for an application by webhook ID
      description: Get the webhook destinations for an application ID by webhook ID
      security:
        - NYLAS_API_KEY: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/get_by_id_200'
          description: The destinations matching the query
        '400':
          $ref: '#/components/responses/get_400'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url 'https://api.us.nylas.com/v3/webhooks/<WEBHOOK_ID>' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            const NylasConfig = {
             apiKey: process.env.NYLAS_API_KEY,
             apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)

            async function fetchWebhookById() {
              try {
                const webhook = await nylas.webhooks.find({
                  webhookId: process.env.WEBHOOK_ID,
                })

                console.log('webhook:', webhook)
              } catch (error) {
                console.error('Error fetching webhook:', error)
              }
            }

            fetchWebhookById()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            webhook_id = os.environ.get("WEBHOOK_ID")

            message = nylas.webhooks.find(
              webhook_id,
            )

            print(message)
        - lang: ruby
          label: Ruby SDK
          source: |
            require 'nylas'

            nylas = Nylas::Client.new(
              api_key: "<NYLAS_API_KEY>"
            )

            webhook = nylas.webhooks.find(webhook_id: "<WEBHOOK_ID>")
            puts webhook
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class webhooks {
                public static void main(String[] args) throws
                NylasSdkTimeoutError, NylasApiError {

                    NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    Response<Webhook> webhook = nylas.webhooks().find("<WEBHOOK_ID>");
                    System.out.println(webhook.getData());
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient

            fun main(args: Array<String>){

                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val webhooks = nylas.webhooks().find("<WEBHOOK_ID>")
                println(webhooks.data)
            }
    put:
      operationId: put-webhook-by-id
      tags:
        - Webhook Notifications
      summary: Update a webhook destination
      description: |-
        Update the values in a specific webhook destination.

        ### Limitations

        - You only need to specify fields that need to change when you make a request to this endpoint.
        Empty fields in the request do not overwrite existing fields.
        - You should limit how many webhook destinations you have for each trigger type. When Nylas retries
        a webhook, the retry goes to _all destinations for the specific trigger type_. This can result in
        a lot of notifications.
        - Some webhook testing tools rate-limit or block you if your webhook destination endpoint generates
        too much traffic. Nylas blocks Ngrok connections in v3 for this reason.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/update_200'
        '400':
          $ref: '#/components/responses/update_400'
      requestBody:
        required: true
        description: Destination definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/destination_update_payload'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request PUT \
              --url 'https://api.us.nylas.com/v3/webhooks/<WEBHOOK_ID>' \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                "notification_email_addresses": [
                  "EMAIL_ADDRESS_1",
                ]
              }'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            const NylasConfig = {
             apiKey: process.env.NYLAS_API_KEY,
             apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)
            const webhookId = process.env.WEBHOOK_ID

            async function updateWebhook() {
              try {
                const folder = await nylas.webhooks.update({
                  webhookId,
                  requestBody: {
                    notificationEmailAddresses: [process.env.EMAIL],
                  }
                })

                console.log('Updated Folder:', folder)
              } catch (error) {
                console.error('Error to update folder:', error)
              }
            }

            updateWebhook()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            webhook_id = os.environ.get("WEBHOOK_ID")
            email = os.environ.get("EMAIL")

            webhook = nylas.webhooks.update(
              webhook_id,
              request_body={
                "notification_email_addresses": [email],
              }
            )

            print(webhook)
        - lang: ruby
          label: Ruby SDK
          source: |
            require 'nylas'

            nylas = Nylas::Client.new(
              api_key: "<NYLAS_API_KEY>"
            )

            request_body = {
                description: 'My updated webhook'
            }

            webhooks = nylas.webhooks.update(webhook_id: "<WEBHOOK_ID>",
            request_body: request_body)
            puts webhooks
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class webhooks {
                public static void main(String[] args) throws
                NylasSdkTimeoutError, NylasApiError {

                    NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    UpdateWebhookRequest webhookRequest = new
                            UpdateWebhookRequest.Builder().
                            description("My updated webhook").
                            build();

                    Response<Webhook> webhook = nylas.webhooks().update("<WEBHOOK_ID>",
                    webhookRequest);
                    System.out.println(webhook.getData());
                }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient
            import com.nylas.models.UpdateWebhookRequest

            fun main(args: Array<String>){

                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val webhookRequest : UpdateWebhookRequest =
                    UpdateWebhookRequest.Builder().
                    description("My updated webhook").
                    build()

                val webhooks = nylas.webhooks().update("<WEBHOOK_ID>",
                webhookRequest)
                println(webhooks.data)
            }
    delete:
      operationId: delete-webhook-by-id
      tags:
        - Webhook Notifications
      summary: Delete a webhook destination
      description: Delete a webhook destination record.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/delete_200'
          description: Returns a success message.
        '400':
          $ref: '#/components/responses/delete_400'
          description: Returns an error message.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request DELETE \
              --url 'https://api.us.nylas.com/v3/webhooks/<WEBHOOK_ID>' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --header 'Content-Type: application/json'
        - lang: javascript
          label: Node.js SDK
          source: |-
            import 'dotenv/config'
            import Nylas from 'nylas'

            const NylasConfig = {
              apiKey: process.env.NYLAS_API_KEY,
              apiUri: process.env.NYLAS_API_URI,
            }

            const nylas = new Nylas(NylasConfig)
            const webhookId = process.env.WEBHOOK_ID

            const deleteWebhook = async () => {
              try {
                await nylas.webhooks.destroy({ webhookId })
                console.log(`Webhook with ID ${webhookId} deleted successfully.`)
              } catch (error) {
                console.error(`Error deleting webhook with ID ${webhookId}:`, error)
              }
            }


            deleteWebhook()
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            webhook_id = os.environ.get("WEBHOOK_ID")

            request = nylas.webhooks.destroy(
              webhook_id,
            )

            print(request)
        - lang: ruby
          label: Ruby SDK
          source: |
            require 'nylas'

            nylas = Nylas::Client.new(
              api_key: "<NYLAS_API_KEY>"
            )

            status = nylas.webhooks.destroy(webhook_id: "<WEBHOOK_ID>")
            puts status
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;

            public class webhooks {
                public static void main(String[] args) throws
                NylasSdkTimeoutError, NylasApiError {

                    NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();

                    WebhookDeleteResponse deleteResponse =
                    nylas.webhooks().destroy("<WEBHOOK_ID>");
                    System.out.println(deleteResponse);
                }
            }
        - lang: kotlin
          label: Kotllin SDK
          source: |
            import com.nylas.NylasClient

            fun main(args: Array<String>){
                val nylas: NylasClient = NylasClient(
                    apiKey = "<NYLAS_API_KEY>"
                )

                val webhooks = nylas.webhooks().destroy("<WEBHOOK_ID>")
                println(webhooks.data)
            }
  /v3/webhooks/rotate-secret/{id}:
    post:
      operationId: post-new-secret
      tags:
        - Webhook Notifications
      summary: Rotate a webhook secret
      description: Update the webhook secret value for a destination. The previous value will immediately stop being used and the new value will take over.
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request POST \
              --url 'https://api.us.nylas.com/v3/webhooks/rotate-secret/<WEBHOOK_ID>' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>'
        - lang: javascript
          label: Node.js SDK
          source: // TODO
        - lang: python
          label: Python SDK
          source: |-
            from dotenv import load_dotenv
            load_dotenv()

            import os
            import sys
            from nylas import Client

            nylas = Client(
                os.environ.get('NYLAS_API_KEY'),
                os.environ.get('NYLAS_API_URI')
            )

            webhook_id = os.environ.get("WEBHOOK_ID")
            email = os.environ.get("EMAIL")

            webhook = nylas.webhooks.rotate_secret(
              webhook_id
            )

            print(webhook)
        - lang: ruby
          label: Ruby SDK
          source: |
            # frozen_string_literal: true

            # Load gems
            require 'nylas'

            # Initialize Nylas client
            nylas = Nylas::Client.new(
                api_key: '<NYLAS_API_KEY>'
            )

            secret, _ = nylas.webhooks.rotate_secret(webhook_id: "<WEBHOOK_ID>")

            puts secret
        - lang: java
          label: Java SDK
          source: |
            import com.nylas.NylasClient;
            import com.nylas.models.*;
            import java.util.List;

            public class read_grants {
              public static void main(String[] args) throws NylasSdkTimeoutError, NylasApiError {
                NylasClient nylas = new NylasClient.Builder("<NYLAS_API_KEY>").build();
                Response<WebhookWithSecret> secret = nylas.webhooks().rotateSecret("<WEBHOOK_ID>");

                System.out.println(secret);
              }
            }
        - lang: kotlin
          label: Kotlin SDK
          source: |
            import com.nylas.NylasClient
            import com.nylas.models.UpdateGrantRequest

            fun main(args: Array<String>) {
              val nylas: NylasClient = NylasClient(
                  apiKey = "<NYLAS_API_KEY>"
              )

              val secret = nylas.webhooks().rotateSecret("<WEBHOOK_ID>")

              print(secret)
            }
      security:
        - NYLAS_API_KEY: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          $ref: '#/components/responses/rotate_secret_200'
          description: Returns the updated Destination.
        '400':
          $ref: '#/components/responses/delete_400'
  /v3/webhooks/mock-payload:
    post:
      operationId: get_mock_webhook_payload
      tags:
        - Webhook Notifications
        - Pub/Sub Notifications
      summary: Get mock notification payload
      description: The notification payload that Nylas sends for the corresponding trigger type
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request POST \
              --url 'https://api.us.nylas.com/v3/webhooks/mock-payload' \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                "trigger_type": "<string>",
                "webhook_url": "<string>"
              }'
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          $ref: '#/components/responses/get_mock_payload_200'
          description: Returns the mock payload for corresponding trigger type.
      requestBody:
        required: true
        description: Destination definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/get_mock_payload_input'
  /v3/webhooks/send-test-event:
    post:
      operationId: send_test_event
      tags:
        - Webhook Notifications
      summary: Send test event
      description: |-
        The mock webhook feature sends sample events so you can test your webhook destinations or receivers. Webhooks with mock payloads are sent to the webhook URL you provide.
        The secret used will be "mock-webhook-secret"
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request POST \
              --url 'https://api.us.nylas.com/v3/webhooks/send-test-event' \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                "trigger_type": "<string>",
                "webhook_url": "<string>"
              }'
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          $ref: '#/components/responses/send_test_event_200'
          description: Returns the mock payload for corresponding trigger type.
      requestBody:
        required: true
        description: Destination definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/send_test_event_input'
  /v3/channels/pubsub:
    post:
      summary: Create a Pub/Sub channel
      tags:
        - Pub/Sub Notifications
      operationId: create-pubsub-channel
      description: |
        Create a Pub/Sub channel in the specified application.
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          $ref: '#/components/responses/create_pubsub_200'
          description: Returns the new Destination
        '400':
          $ref: '#/components/responses/create_pubsub_400'
          description: Returns the new Destination
      requestBody:
        required: true
        description: Destination definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pubsub_input_payload'
    get:
      summary: Get Pub/Sub channels for an application
      tags:
        - Pub/Sub Notifications
      operationId: get-pubsub-channels
      description: |
        Get the Pub/Sub channels for an application.
      security:
        - NYLAS_API_KEY: []
      responses:
        '200':
          $ref: '#/components/responses/get_pubsub_200'
          description: List of destinations for an application.
        '400':
          $ref: '#/components/responses/get_pubsub_400'
          description: List of destinations for an application.
  /v3/channels/pubsub/{id}:
    get:
      operationId: get-pubsub-by-id
      tags:
        - Pub/Sub Notifications
      summary: Get a specific Pub/Sub channel
      description: Get a specific Pub/Sub channel from a specific Nylas application.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - name: id
          in: path
          description: The ID of the Pub/Sub channel to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/get_pubsub_by_id_200'
          description: The destinations matching the query
        '400':
          $ref: '#/components/responses/get_pubsub_400'
    put:
      operationId: put-pubsub-by-id
      tags:
        - Pub/Sub Notifications
      summary: Update a Pub/Sub channel
      description: |-
        Update a specific Pub/Sub channel from a Nylas application.

        When you make a `PUT` request, Nylas replaces all data in the nested object with the information
        included in your request. For more information, see
        [Updating objects](/docs/api/v3/admin/#overview--updating-objects).
      security:
        - NYLAS_API_KEY: []
      parameters:
        - name: id
          in: path
          description: The ID of the Pub/Sub channel to retrieve.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: The Pub/Sub channel properties to update.
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                  description: A human-readable description of the Pub/Sub channel.
                  example: Prod account status notifications PubSub
                trigger_types:
                  $ref: '#/components/schemas/trigger_types'
                topic:
                  type: string
                  description: The Google Pub/Sub topic that Nylas sends notifications to.
                  example: projects/your-project-id/topics/your-topic-id
                status:
                  type: string
                  description: The new status of the channel. Use this to restart a channel that you manually paused, or that was automatically paused due to deliverability issues.
                  enum:
                    - active
                    - pause
                notification_email_addresses:
                  type: array
                  items:
                    type: string
                  description: The email addresses that Nylas notifies if there are errors or deliverability problems. See the [rate limit documentation](/docs/dev-guide/best-practices/rate-limits/) for details.
                  example:
                    - sysadmin@example.com
                    - sre_pager@example.com
      responses:
        '200':
          $ref: '#/components/responses/update_pubsub_200'
        '400':
          $ref: '#/components/responses/update_pubsub_400'
    delete:
      operationId: delete-pubsub-by-id
      tags:
        - Pub/Sub Notifications
      summary: Delete a specific Pub/Sub channel
      description: Delete a specific Pub/Sub channel from a specific Nylas application.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - name: id
          in: path
          description: The ID of the Pub/Sub channel to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/delete_200'
          description: Returns a success message.
        '400':
          $ref: '#/components/responses/delete_400'
          description: Returns an error message.
  /v3/connectors/{provider}/creds:
    post:
      operationId: create_credential
      tags:
        - Connector credentials
      summary: Create a credential
      description: Manually create a credential record.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - $ref: '#/components/parameters/provider'
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  title: Service Account
                  required:
                    - name
                    - credential_type
                    - credential_data
                  properties:
                    name:
                      type: string
                      description: The name of the credential. Must be unique.
                      example: My first Google credential
                    credential_type:
                      type: string
                      description: The type of the credential. For the App Permission flow (currently supported for [Google App Permission](/docs/v3/auth/bulk-auth-grants/#google-app-permission-via-nylas) only), the type must be `serviceaccount`.
                      example: serviceaccount
                    credential_data:
                      type: object
                      description: An object that specifies some special information required for the credential. This information is securely encoded and stored, and is _not_ visible to end users. </br></br> For the [Google App Permission flow](/docs/v3/auth/bulk-auth-grants/#google-app-permission-via-nylas), this field must contain the `private_key_id`, `private_key`, and `client_email`.
                      example:
                        type: service_account
                        project_id: marketplace-sa-test
                        private_key_id: abcd1234defg5678
                        private_key: |
                          -----BEGIN PRIVATE KEY-----
                          ...
                          -----END PRIVATE KEY-----
                        client_email: some-name@marketplace-sa-test.iam.gserviceaccount.com
                        client_id: '123456789'
                        auth_uri: https://accounts.google.com/o/oauth2/auth
                        token_uri: https://oauth2.googleapis.com/token
                        auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
                        client_x509_cert_url: https://www.googleapis.com/robot/v1/metadata/x509/some-name%40marketplace-sa-test.iam.gserviceaccount.com
                - type: object
                  title: Admin Consent
                  required:
                    - name
                    - credential_type
                    - credential_data
                  properties:
                    name:
                      type: string
                      description: The name of the credential. Must be unique.
                      example: My Microsoft Admin Consent credential
                    credential_type:
                      type: string
                      description: The type of the credential. For the [Microsoft Admin Consent flow](/docs/v3/auth/bulk-auth-grants/#use-a-microsoft-bulk-authentication-grant), the type must be `adminconsent`.
                      example: adminconsent
                    credential_data:
                      type: object
                      description: An object that specifies some special information required for the credential. This information is securely encoded and stored, and is _not_ visible to end users. </br></br> For the Microsoft Admin Consent 2.0 flow, this field must contain the `tenant` (either yours or the end user's). If you don't specify the Azure `client_id` and `client_secret` Nylas uses the information from your Nylas application's Microsoft connector.
                      example:
                        client_id: 2f70ABCD-1234-ABCD-1234-ABCD0316be16
                        client_secret: yhg7.....6BoK4j
                        tenant: 2f70ABCD-5678-DEFG-5678-ABCD0316be16
                - type: object
                  title: Connector Override
                  required:
                    - name
                    - credential_type
                    - credential_data
                  properties:
                    name:
                      type: string
                      description: The name of the credential. Must be unique.
                      example: Google auth app \#2 multitenant
                    credential_type:
                      type: string
                      description: The type of the credential. Set this value to `connector` if you have multiple provider auth applications for a single provider and need to create an override credential.  </br></br> For example, if you have two Google provider auth apps, the Google connector for each application can only connect to one of those Google auth apps by default. You can set up a connector override credential, however, then specify that credential ID in authentication requests so that the request goes through the Google connector, but goes to the non-default Google auth app.
                      example: connector
                    credential_data:
                      type: object
                      description: An object that contains special information that must be included in the credential. This information is securely encrypted and stored, and is _not_ visible to end users. </br></br> You must include data such as the `client_id` and `client_secret` for the provider auth application.
                      example:
                        client_id: 3805ABCD1234-ABCD1234uv02m.apps.googleusercontent.com
                        client_secret: Ilg....01pe8db
      responses:
        '201':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: The request ID.
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/CredentialObject'
          description: The credential is created.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request POST \
              --url 'https://api.us.nylas.com/v3/connectors/<CONNECTOR>/creds' \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                "name": "CONNECTOR",
                "credential_type": "connector",
                "credential_data": {
                  "client_id": "<NYLAS_CLIENT_ID>",
                  "client_secret": "<NYLAS_CLIENT_SECRET>"
                }
              }'
    get:
      operationId: get_credential_all
      tags:
        - Connector credentials
      summary: List credentials
      description: List credentials for the specified provider.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - in: query
          name: limit
          description: Limit the number of credentials Nylas returns.
          schema:
            type: integer
            default: 10
        - in: query
          name: offset
          description: Offset the results.
          schema:
            default: 0
            type: integer
        - in: query
          name: sort_by
          description: Sort the returned credentials using the contents of the specified field.
          schema:
            type: string
            default: created_at
            enum:
              - created_at
              - updated_at
        - in: query
          name: order_by
          description: Specify the sort order of returned credentials.
          schema:
            type: string
            default: desc
            enum:
              - desc
              - asc
        - $ref: '#/components/parameters/provider'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: The request ID.
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CredentialObject'
                  limit:
                    type: integer
                    example: 10
                  offset:
                    type: integer
                    example: 0
          description: Returns an array of Credential objects.
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url 'https://api.us.nylas.com/v3/connectors/<CONNECTOR>/creds' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
  /v3/connectors/{provider}/creds/{id}:
    get:
      operationId: get_credential_by_id
      tags:
        - Connector credentials
      summary: Get credential
      description: Return a credential with the specified ID.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: The request ID.
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/CredentialObject'
          description: Returns the credential with the specified ID.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request GET \
              --url 'https://api.us.nylas.com/v3/connectors/<CONNECTOR>/creds/<CREDENTIAL_ID>' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
    patch:
      operationId: patch_credential_by_id
      tags:
        - Connector credentials
      summary: Update a connector credential
      description: |-
        Update a specific connector credential.

        When you make a `PATCH` request, Nylas replaces all data in the nested object with the information
        included in your request. For more information, see
        [Updating objects](/docs/api/v3/admin/#overview--updating-objects).
      security:
        - NYLAS_API_KEY: []
      parameters:
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The credential name.
                  example: My first Google credential
                credential_data:
                  description: |-
                    An object that specifies some special information required for the credential. This information is securely encoded and stored, and is _not_ visible to end users.
                    For the [Google App Permission flow](/docs/v3/auth/bulk-auth-grants/#google-app-permission-via-nylas), this field must contain the `private_key_id`, `private_key`, and `client_email`.
                    For the [Microsoft App Permission flow](/docs/v3/auth/bulk-auth-grants/#use-a-microsoft-bulk-authentication-grant), this field must contain the Azure `client_id` and `client_secret`.
                    To use the credential to override a connector, this field must contain the `client_id` and `client_secret`.
                  example:
                    type: service_account
                    project_id: marketplace-sa-test
                    private_key_id: abcd1234defg5678
                    private_key: |
                      -----BEGIN PRIVATE KEY-----
                      ...
                      -----END PRIVATE KEY-----
                    client_email: some-name@marketplace-sa-test.iam.gserviceaccount.com
                    client_id: '123456789'
                    auth_uri: https://accounts.google.com/o/oauth2/auth
                    token_uri: https://oauth2.googleapis.com/token
                    auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
                    client_x509_cert_url: https://www.googleapis.com/robot/v1/metadata/x509/some-name%40marketplace-sa-test.iam.gserviceaccount.com
                  type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: The request ID.
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
                  data:
                    $ref: '#/components/schemas/CredentialObject'
          description: Returns the updated credential.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request PATCH \
              --url 'https://api.us.nylas.com/v3/connectors/<CONNECTOR>/creds/<CREDENTIAL_ID>' \
              --header 'Content-Type: application/json' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
              --data '{
                "name": "google",
                "credential_data": {
                  "client_id": "<NYLAS_CLIENT_ID>",
                  "client_secret": "<NYLAS_CLIENT_SECRET>"
                }
              }'
    delete:
      operationId: delete_credential_by_id
      tags:
        - Connector credentials
      summary: Delete credential
      description: Delete a credential with the specified ID.
      security:
        - NYLAS_API_KEY: []
      parameters:
        - $ref: '#/components/parameters/provider'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  request_id:
                    type: string
                    description: The request ID.
                    example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
          description: The credential is deleted from the database.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
      x-code-samples:
        - lang: bash
          label: cURL
          source: |-
            curl --request DELETE \
              --url 'https://api.us.nylas.com/v3/connectors/<CONNECTOR>/creds/<CREDENTIAL_ID>' \
              --header 'Accept: application/json' \
              --header 'Authorization: Bearer <NYLAS_API_KEY>' \
components:
  schemas:
    '400':
      type: object
      required:
        - request_id
        - error
      additionalProperties: false
      properties:
        request_id:
          description: ID of the request
          type: string
          example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
        error:
          description: Error object
          type: object
          properties:
            type:
              type: string
              description: Type of error
              example: bad_request
            message:
              description: Informative error message
              default: Bad request
              type: string
              example: Bad request
            provider_error:
              description: (OPTIONAL) informative error message from provider's side
              type: object
              example:
                error: invalid_grant
                provider_error: Bad Request
    '401':
      type: object
      required:
        - request_id
        - error
      additionalProperties: false
      properties:
        request_id:
          description: ID of the request
          type: string
          example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
        error:
          description: Error object
          type: object
          properties:
            type:
              type: string
              description: Type of error
              example: invalid_request_error
            message:
              description: Informative error message
              default: Authentication error
              type: string
              example: Authentication error
            provider_error:
              description: (OPTIONAL) informative error message from provider's side
              type: object
              example:
                error: invalid_grant
                provider_error: Bad Request
    '404':
      type: object
      required:
        - request_id
        - error
      additionalProperties: false
      properties:
        request_id:
          description: ID of the request
          type: string
          example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
        error:
          description: Error object
          type: object
          properties:
            type:
              type: string
              description: Type of error
              example: xyz.not_found_error
            message:
              description: Informative error message
              default: Resource not found
              type: string
              example: Resource not found
            provider_error:
              description: (OPTIONAL) informative error message from provider's side
              type: object
              example:
                error: invalid_grant
                provider_error: Bad Request
    webDesktopCallbackNoSettings:
      title: Web or Desktop
      description: Callback URIs for web or desktop applications don't require additional `settings`.
      properties:
        platform:
          type: string
          description: Platform identifier
          enum:
            - web
            - desktop
        id:
          type: string
          description: Callback URI ID - UUID
          example: 0556d035-6cb6-4262-a035-6b77e11cf8fc
        url:
          type: string
          description: Callback URL, including the protocol. This must be https, unless using http for localhost development.
          example: https://yourapp.com/callback
    JsCallbackwSettings:
      title: JS
      properties:
        platform:
          type: string
          description: Platform identifier
          enum:
            - js
        id:
          type: string
          description: Callback URI ID - UUID
          example: 0556d035-6cb6-4262-a035-6b77e11cf8fc
        url:
          type: string
          description: Callback URL, including the protocol. This must be https, unless using http for localhost development.
          example: https://yourapp.com/callback
        settings:
          description: Additional platform settings and configurations for the Javascript callback URI.
          type: object
          required:
            - origin
          properties:
            origin:
              type: string
              description: Th `origin` is the base URL from which your project or app is served. It is required because it's a critical part of defining your app's trust boundaries to prevent cross-origin issues. Set this when you set up OAuth redirect URIs and other security settings.
              example: yourapp.com
    iosCallbackwSettings:
      title: iOS
      properties:
        platform:
          type: string
          description: Platform identifier
          enum:
            - ios
        id:
          type: string
          description: Callback URI ID - UUID
          example: 0556d035-6cb6-4262-a035-6b77e11cf8fc
        url:
          type: string
          description: Callback URL.This can be https, or a deeplink `<package/bundle-name>://<deeplink>`. Http is only allowed for localhost development, otherwise you must use https.
          example: https://yourapp.com/callback
        settings:
          description: Additional platform settings and configurations for the iOS callback URI.
          type: object
          required:
            - bundle_id
          properties:
            bundle_id:
              type: string
              description: The `bundle_id` (Bundle Identifier) is a unique identifier for an iOS app. It's set in the Xcode project and follows a reverse domain name style.
              example: com.example.myapp
            app_store_id:
              type: string
              description: Unique identifier for your app on the Apple App Store. This ID is assigned to your app when you submit it to the App Store and it is approved.
              example: 1234567890
            team_id:
              type: string
              example: ABCDE12345
              description: Unique identifier for your Apple Developer Account or team.
    AndroidCallbackwSettings:
      title: Android
      properties:
        platform:
          type: string
          description: Platform identifier
          enum:
            - android
        id:
          type: string
          description: Callback URI ID - UUID
          example: 0556d035-6cb6-4262-a035-6b77e11cf8fc
        url:
          type: string
          description: Callback URL. This can be https, or a deeplink `<package/bundle-name>://<deeplink>`. Http is only allowed for localhost development, otherwise you must use https.
          example: https://yourapp.com/callback
        settings:
          description: Additional platform settings and configurations for the Android callback URI.
          type: object
          required:
            - package_name
            - sha1_certificate_fingerprint
          properties:
            package_name:
              type: string
              description: Find your app's Package Name in the Android Manifest. It's a unique identifier that distinguishes your app on the Google Play Store and on the device. It follows a reverse domain name notation, such as `com.example.myapp`.
              example: com.example.myapp
            sha1_certificate_fingerprint:
              type: string
              description: A SHA-1 hash of the app's signing certificate. This ensures that only the _signed_ version of your app can use the redirect URI.
              example: AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12
    ApplicationObject:
      type: object
      properties:
        application_id:
          type: string
          description: Application ID
          example: ad410018-d306-43f9-8361-fa5d7b2172e0
        organization_id:
          type: string
          description: ID of organization
          example: f5db4482-dbbe-4b32-b347-61c260d803ce
        region:
          type: string
          description: Region identifier
          example: us
        environment:
          type: string
          description: Environment identifier
          enum:
            - production
            - staging
        v2_application_id:
          type: string
          description: Linked v2 Application ID
          example: 9nsr7pjw1e1g6hgy9l1znjql7
        branding:
          type: object
          properties:
            name:
              type: string
              description: Name of the application
              example: My application
            icon_url:
              type: string
              description: URL points to application icon.
              example: https://my-app.com/my-icon.png
            website_url:
              type: string
              description: Application / publisher website URL
              example: https://my-app.com
            description:
              type: string
              description: Description of the application.
              example: Online banking application.
        hosted_authentication:
          type: object
          properties:
            background_image_url:
              type: string
              description: URL of the background image
              example: https://my-app.com/bg.jpg
            alignment:
              type: string
              description: Alignment of background image
              enum:
                - left
                - center
                - right
            color_primary:
              type: string
              description: Primary color
              example: '#dc0000'
            color_secondary:
              type: string
              description: Secondary color
              example: '#000056'
            title:
              type: string
              description: Title
            subtitle:
              type: string
              description: Subtitle
            background_color:
              type: string
              description: Background color
              example: '#003400'
            spacing:
              type: integer
              description: CSS spacing attribute in px
              example: 5
        callback_uris:
          description: List of Callback URIs.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/webDesktopCallbackNoSettings'
              - $ref: '#/components/schemas/JsCallbackwSettings'
              - $ref: '#/components/schemas/iosCallbackwSettings'
              - $ref: '#/components/schemas/AndroidCallbackwSettings'
            discriminator:
              propertyName: platform
              mapping:
                web: '#/components/schemas/webDesktopCallbackNoSettings'
                desktop: '#/components/schemas/webDesktopCallbackNoSettings'
                js: '#/components/schemas/JsCallbackwSettings'
                ios: '#/components/schemas/iosCallbackwSettings'
                android: '#/components/schemas/AndroidCallbackwSettings'
    RedirectURIObject:
      oneOf:
        - $ref: '#/components/schemas/webDesktopCallbackNoSettings'
        - $ref: '#/components/schemas/JsCallbackwSettings'
        - $ref: '#/components/schemas/iosCallbackwSettings'
        - $ref: '#/components/schemas/AndroidCallbackwSettings'
      discriminator:
        propertyName: platform
        mapping:
          web: '#/components/schemas/webDesktopCallbackNoSettings'
          desktop: '#/components/schemas/webDesktopCallbackNoSettings'
          js: '#/components/schemas/JsCallbackwSettings'
          ios: '#/components/schemas/iosCallbackwSettings'
          android: '#/components/schemas/AndroidCallbackwSettings'
    ConnectorObject:
      type: object
      additionalProperties: false
      required:
        - provider
        - name
      properties:
        provider:
          type: string
          description: Provider type
          enum:
            - google
            - microsoft
            - imap
            - icloud
            - yahoo
            - virtual-calendar
            - ews
            - zoom
          example: google
        settings:
          description: Optional settings from provider
          example:
            topic_name: abc123
          type: object
        scope:
          type: array
          items:
            type: string
          description: (Not used for Zoom connectors.) Optional default scopes for the connector.
          example:
            - https://www.googleapis.com/auth/userinfo.email
            - https://www.googleapis.com/auth/userinfo.profile
    AutodetectObject:
      type: object
      additionalProperties: false
      required:
        - email_address
        - detected
      properties:
        provider:
          type: string
          description: Provider detected.
          example: google
        type:
          type: string
          description: Provider type. Returned only when IMAP detected displays the IMAP provider.
          example: icloud
        email_address:
          type: string
          description: Email provided for autodetection.
          example: test@example.com
        detected:
          type: boolean
          description: Whether Nylas detected a provider for the given email address.
          example: true
    GrantObject:
      type: object
      additionalProperties: false
      required:
        - id
        - provider
        - grant_id
        - scope
        - created_at
        - issued_at
      properties:
        id:
          type: string
          description: The grant ID.
          example: e19f8e1a-eb1c-41c0-b6a6-d2e59daf7f47
        provider:
          type: string
          description: The provider that the end user authenticated with.
          enum:
            - google
            - microsoft
            - imap
            - icloud
            - yahoo
            - ews
            - virtual-calendar
            - zoom
          example: microsoft
        account_id:
          type: string
          description: The v2 account ID. This field appears only if the grant was created by migrating a v2 connected account.
          example: df0yq6c9okc6t9j4ejd5nyrt7
        grant_status:
          type: string
          description: Specifies whether the grant is valid, or if the end user needs to re-authenticate.
          example: valid
          enum:
            - valid
            - invalid
        email:
          description: The email address associated with the grant. If the provider supports `id_token` and exposes the end user's email address, Nylas automatically extracts this value.
          type: string
          example: email@example.com
        scope:
          type: array
          description: An array of scopes associated with the grant. If none are specified, Nylas uses the default scopes from the provider connector.
          example:
            - Mail.Read
            - User.Read
            - offline_access
          items:
            type: string
        user_agent:
          type: string
          description: The end user's [client or browser information](https://www.useragents.me/). Mostly useful for Hosted authentication.
        ip:
          type: string
          description: The end user's client IP address. Mostly useful for Hosted authentication.
        state:
          description: The initial state that was sent as part of the OAuth request. Nylas passes this value back to the application without modification. You can use this for verification or to track information about the user.
          example: my-state
          type: string
        created_at:
          type: integer
          description: When the grant was created, in Unix epoch format.
          example: 1617817109
        updated_at:
          type: integer
          description: |-
            When the end user last authenticated their grant, in Unix epoch format. Initially, this value
            is the same as `created_at`, but it can differ if the end user re-authenticates their account.
          example: 1617817109
    trigger_types:
      type: array
      items:
        type: string
        enum:
          - calendar.created
          - calendar.updated
          - calendar.deleted
          - event.created
          - event.updated
          - event.deleted
          - grant.created
          - grant.updated
          - grant.deleted
          - grant.expired
          - message.send_success
          - message.send_failed
          - message.bounce_detected
          - message.created
          - message.opened
          - message.updated
          - contact.updated
          - contact.deleted
          - folder.created
          - folder.updated
          - folder.deleted
      description: The event that triggers the notification.  </br></br> See the [notification schema documentation](/docs/v3/notifications/notification-schemas/) for details about each trigger type. </br></br> See the [Calendar](/docs/api/v3/ecc/#tag--Calendar), [Event](/docs/api/v3/ecc/#tag--Events), [Grant](/docs/api/v3/admin/#tag--Grants), and [Messages](/docs/api/v3/ecc/#tag--Messages) reference documentation for details on how to trigger each event type.
    destination_input_payload:
      title: Destination Payload
      required:
        - trigger_types
        - webhook_url
      type: object
      properties:
        description:
          type: string
          description: A human-readable description of the webhook destination.
          example: Production webhook destination
        trigger_types:
          $ref: '#/components/schemas/trigger_types'
        webhook_url:
          type: string
          description: The URL to send webhooks to.
          example: https://example.com/webhooks
        notification_email_addresses:
          type: array
          items:
            type: string
          description: The email addresses that Nylas notifies when a webhook is down for a while. See the [webhook documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
          example:
            - jane@example.com
            - joe@example.com
    destination_update_payload:
      title: Destination Update Payload
      properties:
        description:
          type: string
          description: A human-readable description of the webhook destination.
          example: Production webhook destination
        trigger_types:
          $ref: '#/components/schemas/trigger_types'
        webhook_url:
          type: string
          description: The URL to send webhooks to.
          example: https://example.com/webhooks
        status:
          type: string
          description: The new status of the destination.
          enum:
            - active
            - pause
        notification_email_addresses:
          type: array
          items:
            type: string
          description: The email addresses that Nylas notifies when a webhook is down for a while. See the [rate limit documentation](/docs/dev-guide/best-practices/rate-limits/) for details.
          example:
            - abc@example.com
            - def@example.com
    get_mock_payload_input:
      title: Input Payload
      required:
        - trigger_type
        - webhook_url
      properties:
        trigger_type:
          type: string
          enum:
            - calendar.created
            - calendar.updated
            - calendar.deleted
            - event.created
            - event.updated
            - event.deleted
            - grant.created
            - grant.updated
            - grant.deleted
            - grant.expired
            - message.send_success
            - message.send_failed
            - message.bounce_detected
            - message.created
            - message.created.truncated
            - message.updated
            - message.updated.truncated
            - contact.updated
            - contact.deleted
            - folder.created
            - folder.updated
            - folder.deleted
          description: |-
            Select the event that triggers the webhook. See the
            [notification schema documentation](/docs/v3/notifications/notification-schemas/) for details
            about each trigger type.

            See the [Calendar](/docs/api/v3/ecc/#tag--Calendar), [Events](/docs/api/v3/ecc/#tag--Events),
            [Grants](/docs/api/v3/admin/#tag--Grants), and [Messages](/docs/api/v3/ecc/#tag--Messages)
            reference documentation for details on how to trigger each event type.

            You can also test the `message.created.truncated` and `message.updated.truncated` webhooks using
            this endpoint. For more information about truncated webhook notifications, see the
            [Webhooks documentation](/docs/v3/notifications/webhooks/#truncated-webhooks).
    send_test_event_input:
      title: Input Payload
      required:
        - trigger_type
        - webhook_url
      properties:
        trigger_type:
          type: string
          enum:
            - calendar.created
            - calendar.updated
            - calendar.deleted
            - event.created
            - event.updated
            - event.deleted
            - grant.created
            - grant.updated
            - grant.deleted
            - grant.expired
            - message.send_success
            - message.send_failed
            - message.bounce_detected
            - message.created
            - message.created.truncated
            - message.updated
            - message.updated.truncated
            - contact.updated
            - contact.deleted
            - folder.created
            - folder.updated
            - folder.deleted
          description: |-
            Select the event that triggers the webhook. See the
            [notification schema documentation](/docs/v3/notifications/notification-schemas/) for details
            about each trigger type.

            See the [Calendar](/docs/api/v3/ecc/#tag--Calendar), [Events](/docs/api/v3/ecc/#tag--Events),
            [Grants](/docs/api/v3/admin/#tag--Grants), and [Messages](/docs/api/v3/ecc/#tag--Messages)
            reference documentation for details on how to trigger each event type.

            You can also test the `message.created.truncated` and `message.updated.truncated` webhooks using
            this endpoint. For more information about truncated webhook notifications, see the
            [Webhooks documentation](/docs/v3/notifications/webhooks/#truncated-webhooks).
        webhook_url:
          type: string
          description: The URL to send webhooks to.
          example: https://example.com/webhooks
    pubsub_input_payload:
      title: Destination Payload
      required:
        - trigger_types
        - webhook_url
      type: object
      properties:
        description:
          type: string
          description: A human-readable description of the Pub/Sub channel.
          example: Production Pub/Sub for Events notifications
        trigger_types:
          $ref: '#/components/schemas/trigger_types'
        topic:
          type: string
          description: The Google Pub/Sub topic that Nylas sends notifications to.
          example: projects/your-project-id/topics/your-topic-id
        notification_email_addresses:
          type: array
          items:
            type: string
          description: The email addresses that Nylas notifies if delivery to the Pub/Sub channel fails. See the [webhook documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
          example:
            - jane@example.com
            - joe@example.com
    CredentialObject:
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Credential ID
          example: e19f8e1a-eb1c-41c0-b6a6-d2e59daf7f47
        name:
          description: Unique name of this credential
          type: string
          example: My first Google credential
        created_at:
          type: integer
          description: Date of creation of the credential
          example: 1617817109
        updated_at:
          type: integer
          description: Initially same as `created_at`. Can differ if the credential has been updated.
          example: 1617817109
  requestBodies: {}
  securitySchemes:
    ACCESS_TOKEN:
      scheme: bearer
      type: http
      bearerFormat: Access token
      description: The Nylas **access token** for a specific grant. Issued as part of OAuth 2.1 flow token exchange.
    NYLAS_API_KEY:
      scheme: bearer
      type: http
      bearerFormat: API key
      description: The Nylas **API key** provides application-level access to APIs and all grants. You can generate these from the v3 Dashboard. Learn more about [authorizing requests in Nylas v3](/docs/v3/auth/).
  responses:
    200-delete:
      description: Delete Succeed
      content:
        application/json:
          schema:
            type: object
            required:
              - request_id
            properties:
              request_id:
                type: string
                description: ID of the request.
                example: 5967ca40-a2d8-4ee0-a0e0-6f18ace39a90
    get_200:
      description: Destinations Returned
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: A unique identifier for the webhook destination.
                      example: UMWjAjMeWQ4D8gYF2moonK4486
                    description:
                      type: string
                      description: A human-readable description of the webhook destination.
                      example: Production webhook destination
                    trigger_types:
                      $ref: '#/components/schemas/trigger_types'
                    webhook_url:
                      type: string
                      description: The URL to send webhooks to.
                      example: https://example.com/webhooks
                    status:
                      type: string
                      description: The status of the new destination.
                      enum:
                        - active
                        - pause
                        - failing
                        - failed
                    notification_email_addresses:
                      type: array
                      items:
                        type: string
                      description: The email addresses that Nylas notifies when a webhook is down for a while. See the [webhook documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
                      example:
                        - jane@example.com
                        - joe@example.com
              request_id:
                type: string
                description: The ID for each request.
    get_400:
      description: Destination not returned
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    type: string
                    description: An alphanumeric code that represents the error type.
                    example: '70001'
                  message:
                    type: string
                    description: A human readable message with details about the error.
                    example: application_id.required
              request_id:
                type: string
                description: The ID for each request.
    create_200:
      description: Webhook Destination Created
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    type: string
                    description: A unique identifier for the webhook destination.
                    example: UMWjAjMeWQ4D8gYF2moonK4486
                  description:
                    type: string
                    description: A human-readable description of the webhook destination.
                    example: Production webhook destination
                  trigger_types:
                    $ref: '#/components/schemas/trigger_types'
                  webhook_url:
                    type: string
                    description: The URL to send webhooks to.
                    example: https://example.com/webhooks
                  webhook_secret:
                    type: string
                    description: A secret value used to encode the `X-Nylas-Signature` header on webhook requests.
                    example: 41dD3-nXTUfebYuk81Gr
                  status:
                    type: string
                    description: The status of the new destination. This will always be "active" if Nylas successfully created the destination. If you need to pause the destination, use the [Update webhook destination](#put-/v3/webhooks/-id-) method to change the status to `pause`.
                    enum:
                      - active
                  notification_email_addresses:
                    type: array
                    items:
                      type: string
                    description: The email addresses that Nylas notifies when a webhook is down for a while. See the [Webhooks documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
                    example:
                      - jane@example.com
                      - joe@example.com
              request_id:
                type: string
                description: The request ID for each request.
    create_400:
      description: Destination not created
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    type: string
                    description: An alphanumeric code that represents the error type.
                    example: '70005'
                  message:
                    type: string
                    description: A human-readable message with details about the error.
                    example: 'unable.verify.webhook_url : status is not ok, got 404'
              request_id:
                type: string
                description: The ID of the request.
    get_by_id_200:
      description: Destinations Returned
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    type: string
                    description: A unique identifier for the webhook destination.
                    example: UMWjAjMeWQ4D8gYF2moonK4486
                  description:
                    type: string
                    description: A human-readable description of the webhook destination.
                    example: Production webhook destination
                  trigger_types:
                    type: array
                    items:
                      type: string
                      enum:
                        - calendar.created
                        - calendar.updated
                        - calendar.deleted
                        - event.created
                        - event.updated
                        - event.deleted
                        - grant.created
                        - grant.updated
                        - grant.deleted
                        - grant.expired
                        - message.send_success
                        - message.send_failed
                        - message.bounce_detected
                        - message.created
                        - message.updated
                        - contact.updated
                        - contact.deleted
                        - folder.created
                        - folder.updated
                        - folder.deleted
                    description: The event that triggers the webhook. </br></br> See the [notification schema documentation](/docs/v3/notifications/notification-schemas/) for details about each trigger type. </br></br> See the [Calendar](/docs/api/v3/ecc/#tag--Calendar), [Event](/docs/api/v3/ecc/#tag--Events), [Grant](/docs/api/v3/admin/#tag--Grants), and [Messages](/docs/api/v3/ecc/#tag--Messages) reference documentation for details on how to trigger each event type.
                  webhook_url:
                    type: string
                    description: The URL to send webhooks to.
                    example: https://example.com/webhooks
                  status:
                    type: string
                    description: The status of the new destination.
                    enum:
                      - active
                      - pause
                      - failing
                      - failed
                  notification_email_addresses:
                    type: array
                    items:
                      type: string
                    description: The email addresses that Nylas notifies when a webhook is down for a while. See the [Webhooks documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
                    example:
                      - jane@example.com
                      - joe@example.com
                  status_updated_at:
                    type: integer
                    description: The time the `status` field was last updated, represented as a Unix timestamp in seconds.
                    example: 1234567890
                  created_at:
                    type: integer
                    description: The time the webhook destination was created, represented as a Unix timestamp in seconds.
                    example: 1234567890
                  updated_at:
                    type: integer
                    description: The time the webhook destination was last updated, represented as a Unix timestamp in seconds.
                    example: 1234567890
              request_id:
                type: string
                description: The ID for each request.
    update_200:
      description: Destination Updated
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    type: string
                    description: A unique identifier for the webhook destination.
                    example: UMWjAjMeWQ4D8gYF2moonK4486
                  description:
                    type: string
                    description: A human-readable description of the webhook destination.
                    example: Production webhook destination
                  trigger_types:
                    $ref: '#/components/schemas/trigger_types'
                  webhook_url:
                    type: string
                    description: The URL to send webhooks to.
                    example: https://example.com/webhooks
                  status:
                    type: string
                    description: The status of the new destination.
                    enum:
                      - active
                      - pause
                      - failing
                      - failed
                  notification_email_addresses:
                    type: array
                    items:
                      type: string
                    description: The email addresses that Nylas notifies when a webhook is down for a while. See the [webhook documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
                    example:
                      - jane@example.com
                      - joe@example.com
                  status_updated_at:
                    type: integer
                    description: The time the `status` field was last updated, represented as a Unix timestamp in seconds.
                    example: 1234567890
                  created_at:
                    type: integer
                    description: The time the webhook destination was created, represented as a Unix timestamp in seconds.
                    example: 1234567890
                  updated_at:
                    type: integer
                    description: The time the webhook destination was last updated, represented as a Unix timestamp in seconds.
                    example: 1234567890
              request_id:
                type: string
                description: The ID for each request.
    update_400:
      description: Unable to update Pub/Sub channel
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    type: string
                    description: An alphanumeric code that represents the error type.
                    example: '70000'
                  message:
                    type: string
                    description: A human readable message with details about the error.
                    example: 'destination.id.not.found : record not found'
              request_id:
                type: string
                description: The unique ID of the request that generated this response.
    delete_200:
      description: Destination Deleted
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
              request_id:
                type: string
                description: The ID for each request.
    delete_400:
      description: Notification channel not deleted
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    type: string
                    description: An alphanumeric code that represents the error type.
                    example: '70000'
                  message:
                    type: string
                    description: A human readable message with details about the error.
                    example: 'destination.id.not.found : record not found'
              request_id:
                type: string
                description: The unique ID of the request that generated this response.
    rotate_secret_200:
      description: Webhook Secret Updated
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    type: string
                    description: A unique identifier for the webhook destination.
                    example: UMWjAjMeWQ4D8gYF2moonK4486
                  description:
                    type: string
                    description: A human-readable description of the webhook destination.
                    example: Production webhook destination
                  trigger_types:
                    $ref: '#/components/schemas/trigger_types'
                  webhook_url:
                    type: string
                    description: The URL to send webhooks to.
                    example: https://example.com/webhooks
                  webhook_secret:
                    type: string
                    description: A secret value used to encode the `X-Nylas-Signature` header on webhook requests.
                    example: 41dD3-nXTUfebYuk81Gr
                  status:
                    type: string
                    description: The status of the new destination.
                    enum:
                      - active
                      - pause
                      - failing
                      - failed
                  notification_email_addresses:
                    type: array
                    items:
                      type: string
                    description: The email addresses that Nylas notifies when a webhook is down for a while. See the [webhook documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
                    example:
                      - jane@example.com
                      - joe@example.com
              request_id:
                type: string
                description: The request ID for each request.
    get_mock_payload_200:
      description: Webhook Payload Returned
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  data:
                    type: object
                    description: This object is an example payload that Nylas sends to your webhook destination
              request_id:
                type: string
                description: The ID for each request.
    send_test_event_200:
      description: Test event sent
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: string
                description: Indicates if the test event succeeded or failed.
                example: success
              request_id:
                type: string
                description: The ID for each request.
    get_pubsub_200:
      description: Get Pub/Sub channel information
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: A unique identifier for the Pub/Sub notification channel.
                      example: UMWjAjMeWQ4D8gYF2moonK4486
                    description:
                      type: string
                      description: A human-readable description of the Pub/Sub notification channel.
                      example: Production Pub/Sub channel for Email notifications
                    trigger_types:
                      $ref: '#/components/schemas/trigger_types'
                    topic:
                      type: string
                      description: The Google Pub/Sub topic that Nylas sends notifications to.
                      example: projects/your-project-id/topics/your-topic-id
                    status:
                      type: string
                      description: The status of the new destination.
                      enum:
                        - active
                        - paused
                        - failing
                        - failed
                    notification_email_addresses:
                      type: array
                      items:
                        type: string
                      description: The email addresses that Nylas notifies if delivery to the Pub/Sub channel fails. See the [webhook documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
                      example:
                        - jane@example.com
                        - joe@example.com
              request_id:
                type: string
                description: The unique ID of the request that generated this response.
    get_pubsub_400:
      description: Unable to get Pub/Sub channel information
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    type: string
                    description: An alphanumeric code that represents the error type.
                    example: '70001'
                  message:
                    type: string
                    description: A human readable message with details about the error.
                    example: 'invalid.input.format : topic is required'
              request_id:
                type: string
                description: The unique ID of the request that generated this response.
    create_pubsub_200:
      description: Pub/Sub channel created
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    type: string
                    description: A unique identifier for the Pub/Sub notification channel.
                    example: UMWjAjMeWQ4D8gYF2moonK4486
                  description:
                    type: string
                    description: A human-readable description of the Pub/Sub notification channel.
                    example: Production Pub/Sub channel for Grant notifications
                  trigger_types:
                    $ref: '#/components/schemas/trigger_types'
                  topic:
                    type: string
                    description: The Google Pub/Sub topic that Nylas sends notifications to.
                    example: projects/your-project-id/topics/your-topic-id
                  status:
                    type: string
                    description: The status of the Pub/Sub channel. When you first create a new channel, Nylas sets it to "active".
                    enum:
                      - active
                  notification_email_addresses:
                    type: array
                    items:
                      type: string
                    description: The email addresses that Nylas notifies if delivery to the Pub/Sub channel fails. See the [Webhooks documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
                    example:
                      - jane@example.com
                      - joe@example.com
              request_id:
                type: string
                description: The unique ID of the request that generated this response.
    create_pubsub_400:
      description: Unable to create Pub/Sub channel
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    type: string
                    description: An alphanumeric code that represents the error type.
                    example: '70005'
                  message:
                    type: string
                    description: A human-readable message with details about the error.
                    example: 'invalid.input.format : topic is required'
              request_id:
                type: string
                description: The unique ID of the request that generated this response.
    get_pubsub_by_id_200:
      description: Get specific Pub/Sub channel information
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    type: string
                    description: A unique identifier for the Pub/Sub channel.
                    example: UMWjAjMeWQ4D8gYF2moonK4486
                  description:
                    type: string
                    description: A human-readable description of the Pub/Sub channel.
                    example: Production Pub/Sub for Event updates
                  trigger_types:
                    $ref: '#/components/schemas/trigger_types'
                  topic:
                    type: string
                    description: The Google Pub/Sub topic that Nylas sends notifications to.
                    example: projects/your-project-id/topics/your-topic-id
                  status:
                    type: string
                    description: The deliverability status of the Pub/Sub channel.
                    enum:
                      - active
                      - pause
                      - failing
                      - failed
                  notification_email_addresses:
                    type: array
                    items:
                      type: string
                    description: The email addresses that Nylas notifies if delivery to the Pub/Sub channel fails. See the [Webhooks documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
                    example:
                      - jane@example.com
                      - joe@example.com
                  status_updated_at:
                    type: integer
                    description: The time the `status` field was last updated, represented as a Unix timestamp in seconds.
                    example: 1234567890
                  created_at:
                    type: integer
                    description: The time the Pub/Sub channel was created, represented as a Unix timestamp in seconds.
                    example: 1234567890
                  updated_at:
                    type: integer
                    description: The time the Pub/Sub channel was last updated, represented as a Unix timestamp in seconds.
                    example: 1234567890
              request_id:
                type: string
                description: The unique ID of the request that generated this response.
    update_pubsub_200:
      description: Pub/Sub channel updated
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  id:
                    type: string
                    description: A unique identifier for the Pub/Sub channel.
                    example: UMWjAjMeWQ4D8gYF2moonK4486
                  description:
                    type: string
                    description: A human-readable description of the Pub/Sub channel.
                    example: Production Pub/Sub channel
                  trigger_types:
                    $ref: '#/components/schemas/trigger_types'
                  topic:
                    type: string
                    description: The Google Pub/Sub topic that Nylas sends notifications to.
                    example: projects/your-project-id/topics/your-topic-id
                  status:
                    type: string
                    description: The deliverability status of the Pub/Sub channel.
                    enum:
                      - active
                      - pause
                      - failing
                      - failed
                  notification_email_addresses:
                    type: array
                    items:
                      type: string
                    description: The email addresses that Nylas notifies if delivery to the Pub/Sub channel fails. See the [webhook documentation](/docs/v3/notifications/webhooks/#failed-and-failing-webhooks) for details.
                    example:
                      - jane@example.com
                      - joe@example.com
                  status_updated_at:
                    type: integer
                    description: The time the `status` field was last updated, represented as a Unix timestamp in seconds.
                    example: 1234567890
                  created_at:
                    type: integer
                    description: The time the Pub/Sub channel was created, represented as a Unix timestamp in seconds.
                    example: 1234567890
                  updated_at:
                    type: integer
                    description: The time the Pub/Sub channel was last updated, represented as a Unix timestamp in seconds.
                    example: 1234567890
              request_id:
                type: string
                description: The unique ID of the request that generated this response.
    update_pubsub_400:
      description: Pub/Sub channel not updated
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  type:
                    type: string
                    description: An alphanumeric code that represents the error type.
                    example: '70000'
                  message:
                    type: string
                    description: A human readable message with details about the error.
                    example: 'invalid.input.format : topic is required"'
              request_id:
                type: string
                description: The unique ID of the request that generated this response.
  parameters:
    provider:
      name: provider
      in: path
      required: true
      schema:
        type: string
        enum:
          - google
          - microsoft
          - imap
          - icloud
          - yahoo
          - ews
          - virtual-calendar
          - zoom
        example: google
    id:
      name: id
      required: true
      in: path
      schema:
        type: string
      example: e19f8e1a-eb1c-41c0-b6a6-d2e59daf7f47
