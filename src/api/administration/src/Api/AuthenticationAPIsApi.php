<?php
/**
 * AuthenticationAPIsApi
 * PHP version 8.1
 *
 * @package  JackWH\NylasV3\Administration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nylas v3 Administration APIs
 *
 * <div style=\"padding:24px; background-color: #F5FFFD; border: 1px solid #00A88C; color: #161717\">This API reference documentation covers the <strong>Administration APIs</strong> only. See the <strong><a href=\"/docs/api/v3/ecc/\">Email, Calendar, and Contacts API reference</a></strong> for information on working with the Email, Calendar, and Contacts APIs.</div>  The **Nylas Administration APIs** are how you query and change your Nylas applications, including the application's authentication configuration, provider settings, and webhook subscriptions. You can also use Administration APIs to query your application to list the Grants (specific permissions to access user data) that are associated with each of your Nylas applications.  The Nylas API is designed using the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) ideology to provide simple and predictable URIs to access and modify objects. Requests support [standard HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) like `GET`, `PUT`, `POST`, and `DELETE`, and [standard status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).  You can use the [Nylas Postman collection](https://www.postman.com/trynylas/workspace/nylas-api/overview) to quickly start using the Nylas APIs. For more information, check out the [Nylas Postman collection documentation](/docs/v3/api-references/postman/).  ## Query parameters  Nylas allows you to include query parameters in `GET` requests that return a list of results. Query parameters let you narrow the results Nylas returns, meaning fewer requests to the provider and less data for your application to sift through. For more information, see [Rate limits in Nylas](/docs/dev-guide/platform/rate-limits/).  The table below shows the query parameters you can use for the `GET` requests in the Administration APIs.  | Endpoint | Query parameters | | :--- | :--- | | [`GET /v3/connectors`](/docs/api/v3/admin/#get-/v3/connectors) | `limit`, `offset` | | [`GET /v3/grants`](/docs/api/v3/admin/#get-/v3/grants) | `limit`, `offset`, `sort_by`, `order_by`, `since`, `before`, `email`, `grant_status`, `ip`, `provider` | | [`GET /v3/connectors/<PROVIDER>/creds`](/docs/api/v3/admin/#get-/v3/connectors/-provider-/creds) | `limit`, `offset`, `sort_by`, `order_by` |  You can use the `limit` parameter to set the maximum number of results Nylas returns for your request. Nylas recommends setting a lower `limit` if you encounter rate limits on the provider. For more information, see [Avoiding rate limits in Nylas](/docs/dev-guide/best-practices/rate-limits/).  ## Updating objects  `PUT` and `PATCH` requests behave similarly in Nylas v3: when you make a request, Nylas replaces all data in the nested object with the information you define. Because of this, your request might fail if you don't include all mandatory fields.  Nylas doesn't erase the data from fields that you don't include in your request, so you can define only the mandatory fields and any that you want to update.  ## Authentication documentation  You can find more information about the Nylas Administration APIs in the main documentation set:  - [Authentication in v3](/docs/v3/auth/)   - [Create grants with OAuth authentication + API key](/docs/v3/auth/hosted-oauth-apikey/)   - [Create grants with OAuth authentication + Access token](/docs/v3/auth/hosted-oauth-accesstoken/)   - [Create grants with custom authentication](/docs/v3/auth/custom/) (called \"native\" authentication in v2)   - [Create grants with IMAP authentication](/docs/v3/auth/imap/) - [Bulk authentication in v3](/docs/v3/auth/bulk-auth-grants/) - [v3 event codes](/docs/v3/api-references/event-codes/) - [Virtual Calendars in v3](/docs/v3/auth/virtual-calendars/)  ## Nylas v3 encoding  Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.
 *
 * The version of the OpenAPI document: v3
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JackWH\NylasV3\Administration\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use JackWH\NylasV3\Administration\ApiException;
use JackWH\NylasV3\Administration\Configuration;
use JackWH\NylasV3\Administration\HeaderSelector;
use JackWH\NylasV3\Administration\ObjectSerializer;

/**
 * AuthenticationAPIsApi Class Doc Comment
 *
 * @package  JackWH\NylasV3\Administration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuthenticationAPIsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'customAuthFlow' => [
            'application/json',
        ],
        'exchangeOauth2Token' => [
            'application/json',
        ],
        'getOauth2Flow' => [
            'application/json',
        ],
        'infoOauth2Token' => [
            'application/json',
        ],
        'revokeOauth2TokenAndGrant' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation customAuthFlow
     *
     * Custom Authentication
     *
     * @param  \JackWH\NylasV3\Administration\Model\CustomAuthFlowRequest $custom_auth_flow_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customAuthFlow'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Administration\Model\CustomAuthFlow201Response|\JackWH\NylasV3\Administration\Model\UpdateApplication400Response|\JackWH\NylasV3\Administration\Model\GetApplication401Response
     */
    public function customAuthFlow(
        \JackWH\NylasV3\Administration\Model\CustomAuthFlowRequest $custom_auth_flow_request,
        string $contentType = self::contentTypes['customAuthFlow'][0]
    ): \JackWH\NylasV3\Administration\Model\CustomAuthFlow201Response
    {
        list($response) = $this->customAuthFlowWithHttpInfo($custom_auth_flow_request, $contentType);
        return $response;
    }

    /**
     * Operation customAuthFlowWithHttpInfo
     *
     * Custom Authentication
     *
     * @param  \JackWH\NylasV3\Administration\Model\CustomAuthFlowRequest $custom_auth_flow_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customAuthFlow'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Administration\Model\CustomAuthFlow201Response|\JackWH\NylasV3\Administration\Model\UpdateApplication400Response|\JackWH\NylasV3\Administration\Model\GetApplication401Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function customAuthFlowWithHttpInfo(
        \JackWH\NylasV3\Administration\Model\CustomAuthFlowRequest $custom_auth_flow_request,
        string $contentType = self::contentTypes['customAuthFlow'][0]
    ): array
    {
        $request = $this->customAuthFlowRequest($custom_auth_flow_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if (in_array('\JackWH\NylasV3\Administration\Model\CustomAuthFlow201Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\CustomAuthFlow201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\CustomAuthFlow201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Administration\Model\UpdateApplication400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\UpdateApplication400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\UpdateApplication400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\JackWH\NylasV3\Administration\Model\GetApplication401Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\GetApplication401Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\GetApplication401Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\JackWH\NylasV3\Administration\Model\CustomAuthFlow201Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\CustomAuthFlow201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\UpdateApplication400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\GetApplication401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customAuthFlowAsync
     *
     * Custom Authentication
     *
     * @param  \JackWH\NylasV3\Administration\Model\CustomAuthFlowRequest $custom_auth_flow_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customAuthFlow'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function customAuthFlowAsync(
        \JackWH\NylasV3\Administration\Model\CustomAuthFlowRequest $custom_auth_flow_request,
        string $contentType = self::contentTypes['customAuthFlow'][0]
    ): PromiseInterface
    {
        return $this->customAuthFlowAsyncWithHttpInfo($custom_auth_flow_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customAuthFlowAsyncWithHttpInfo
     *
     * Custom Authentication
     *
     * @param  \JackWH\NylasV3\Administration\Model\CustomAuthFlowRequest $custom_auth_flow_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customAuthFlow'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function customAuthFlowAsyncWithHttpInfo(
        $custom_auth_flow_request,
        string $contentType = self::contentTypes['customAuthFlow'][0]
    ): PromiseInterface
    {
        $returnType = '\JackWH\NylasV3\Administration\Model\CustomAuthFlow201Response';
        $request = $this->customAuthFlowRequest($custom_auth_flow_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customAuthFlow'
     *
     * @param  \JackWH\NylasV3\Administration\Model\CustomAuthFlowRequest $custom_auth_flow_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customAuthFlow'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customAuthFlowRequest(
        $custom_auth_flow_request,
        string $contentType = self::contentTypes['customAuthFlow'][0]
    ): Request
    {

        // verify the required parameter 'custom_auth_flow_request' is set
        if ($custom_auth_flow_request === null || (is_array($custom_auth_flow_request) && count($custom_auth_flow_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $custom_auth_flow_request when calling customAuthFlow'
            );
        }


        $resourcePath = '/v3/connect/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($custom_auth_flow_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($custom_auth_flow_request));
            } else {
                $httpBody = $custom_auth_flow_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (API key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exchangeOauth2Token
     *
     * Hosted OAuth - Token exchange
     *
     * @param  \JackWH\NylasV3\Administration\Model\ExchangeOauth2TokenRequest $exchange_oauth2_token_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeOauth2Token'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Administration\Model\Data|\JackWH\NylasV3\Administration\Model\Data1
     */
    public function exchangeOauth2Token(
        \JackWH\NylasV3\Administration\Model\ExchangeOauth2TokenRequest $exchange_oauth2_token_request,
        string $contentType = self::contentTypes['exchangeOauth2Token'][0]
    ): \JackWH\NylasV3\Administration\Model\Data
    {
        list($response) = $this->exchangeOauth2TokenWithHttpInfo($exchange_oauth2_token_request, $contentType);
        return $response;
    }

    /**
     * Operation exchangeOauth2TokenWithHttpInfo
     *
     * Hosted OAuth - Token exchange
     *
     * @param  \JackWH\NylasV3\Administration\Model\ExchangeOauth2TokenRequest $exchange_oauth2_token_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeOauth2Token'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Administration\Model\Data|\JackWH\NylasV3\Administration\Model\Data1, HTTP status code, HTTP response headers (array of strings)
     */
    public function exchangeOauth2TokenWithHttpInfo(
        \JackWH\NylasV3\Administration\Model\ExchangeOauth2TokenRequest $exchange_oauth2_token_request,
        string $contentType = self::contentTypes['exchangeOauth2Token'][0]
    ): array
    {
        $request = $this->exchangeOauth2TokenRequest($exchange_oauth2_token_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Administration\Model\Data', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\Data' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\Data', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Administration\Model\Data1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\Data1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\Data1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\JackWH\NylasV3\Administration\Model\Data';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\Data',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\Data1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exchangeOauth2TokenAsync
     *
     * Hosted OAuth - Token exchange
     *
     * @param  \JackWH\NylasV3\Administration\Model\ExchangeOauth2TokenRequest $exchange_oauth2_token_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeOauth2Token'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exchangeOauth2TokenAsync(
        \JackWH\NylasV3\Administration\Model\ExchangeOauth2TokenRequest $exchange_oauth2_token_request,
        string $contentType = self::contentTypes['exchangeOauth2Token'][0]
    ): PromiseInterface
    {
        return $this->exchangeOauth2TokenAsyncWithHttpInfo($exchange_oauth2_token_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exchangeOauth2TokenAsyncWithHttpInfo
     *
     * Hosted OAuth - Token exchange
     *
     * @param  \JackWH\NylasV3\Administration\Model\ExchangeOauth2TokenRequest $exchange_oauth2_token_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeOauth2Token'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exchangeOauth2TokenAsyncWithHttpInfo(
        $exchange_oauth2_token_request,
        string $contentType = self::contentTypes['exchangeOauth2Token'][0]
    ): PromiseInterface
    {
        $returnType = '\JackWH\NylasV3\Administration\Model\Data';
        $request = $this->exchangeOauth2TokenRequest($exchange_oauth2_token_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exchangeOauth2Token'
     *
     * @param  \JackWH\NylasV3\Administration\Model\ExchangeOauth2TokenRequest $exchange_oauth2_token_request  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exchangeOauth2Token'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exchangeOauth2TokenRequest(
        $exchange_oauth2_token_request,
        string $contentType = self::contentTypes['exchangeOauth2Token'][0]
    ): Request
    {

        // verify the required parameter 'exchange_oauth2_token_request' is set
        if ($exchange_oauth2_token_request === null || (is_array($exchange_oauth2_token_request) && count($exchange_oauth2_token_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $exchange_oauth2_token_request when calling exchangeOauth2Token'
            );
        }


        $resourcePath = '/v3/connect/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($exchange_oauth2_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($exchange_oauth2_token_request));
            } else {
                $httpBody = $exchange_oauth2_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Access token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer (API key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOauth2Flow
     *
     * Hosted OAuth - Authorization Request
     *
     * @param  string $client_id Your Nylas application&#39;s client ID (or application ID). (required)
     * @param  string $redirect_uri Your Nylas application&#39;s redirect URI (or callback URI). (required)
     * @param  string $response_type Specifies the type of response Nylas returns for the authorization flow. Should be set to &#x60;code&#x60; for the OAuth 2.0 flow, and &#x60;adminconsent&#x60; for the Microsoft admin consent service flow. (required)
     * @param  string|null $provider The connector provider type that you set up with Nylas for this application. If the provider isn&#39;t set, the end user is directed to the Nylas Hosted login page and prompted to select their provider. Multiple providers can be set as a comma-separated list. (optional)
     * @param  string|null $scope A space-delimited list of scopes that identify the resources that your application may access on the end user&#39;s behalf. If no scopes are set, Nylas uses the default connector scopes. (optional)
     * @param  string|null $prompt (Optional) The prompt for the Hosted login page. This parameter can accept multiple values separated by a comma, without spaces in between. The order of the prompts affects the UI of the Hosted login page. If &#x60;provider&#x60; is not set, the end user is redirected to the provider page directly, and the prompt is ignored. (optional, default to 'select_provider')
     * @param  string|null $state (Optional) The state of the grant, returned after authentication. The maximum length is 256 characters. (optional)
     * @param  string|null $login_hint Prefill the login name (usually the email address) during the authentication flow. If a grant already exists for the provided email address, Nylas automatically re-authenticates the grant. (optional)
     * @param  string|null $access_type Specifies whether Nylas should return a refresh token along with the exchange token. This isn&#39;t suitable for client-side or JavaScript applications. (optional)
     * @param  string|null $code_challenge Specifies a Base64-encoded &#x60;code_verifier&#x60; without padding. The verifier is used as a server-side challenge during the authorization code exchange. (optional)
     * @param  string|null $code_challenge_method Specifies the method used to encode the &#x60;code_verifier&#x60;. The verifier is used as a server-side challenge during the authorization code exchange. (optional, default to 'plain')
     * @param  string|null $credential_id (Microsoft admin consent bulk authentication flow only) The ID of an existing Nylas connector credential record that&#39;s attached to the application&#39;s Microsoft connector. Use this field for Microsoft admin consent credential IDs only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauth2Flow'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function getOauth2Flow(
        string $client_id,
        string $redirect_uri,
        string $response_type,
        ?string $provider = null,
        ?string $scope = null,
        ?string $prompt = 'select_provider',
        ?string $state = null,
        ?string $login_hint = null,
        ?string $access_type = null,
        ?string $code_challenge = null,
        ?string $code_challenge_method = 'plain',
        ?string $credential_id = null,
        string $contentType = self::contentTypes['getOauth2Flow'][0]
    ): void
    {
        $this->getOauth2FlowWithHttpInfo($client_id, $redirect_uri, $response_type, $provider, $scope, $prompt, $state, $login_hint, $access_type, $code_challenge, $code_challenge_method, $credential_id, $contentType);
    }

    /**
     * Operation getOauth2FlowWithHttpInfo
     *
     * Hosted OAuth - Authorization Request
     *
     * @param  string $client_id Your Nylas application&#39;s client ID (or application ID). (required)
     * @param  string $redirect_uri Your Nylas application&#39;s redirect URI (or callback URI). (required)
     * @param  string $response_type Specifies the type of response Nylas returns for the authorization flow. Should be set to &#x60;code&#x60; for the OAuth 2.0 flow, and &#x60;adminconsent&#x60; for the Microsoft admin consent service flow. (required)
     * @param  string|null $provider The connector provider type that you set up with Nylas for this application. If the provider isn&#39;t set, the end user is directed to the Nylas Hosted login page and prompted to select their provider. Multiple providers can be set as a comma-separated list. (optional)
     * @param  string|null $scope A space-delimited list of scopes that identify the resources that your application may access on the end user&#39;s behalf. If no scopes are set, Nylas uses the default connector scopes. (optional)
     * @param  string|null $prompt (Optional) The prompt for the Hosted login page. This parameter can accept multiple values separated by a comma, without spaces in between. The order of the prompts affects the UI of the Hosted login page. If &#x60;provider&#x60; is not set, the end user is redirected to the provider page directly, and the prompt is ignored. (optional, default to 'select_provider')
     * @param  string|null $state (Optional) The state of the grant, returned after authentication. The maximum length is 256 characters. (optional)
     * @param  string|null $login_hint Prefill the login name (usually the email address) during the authentication flow. If a grant already exists for the provided email address, Nylas automatically re-authenticates the grant. (optional)
     * @param  string|null $access_type Specifies whether Nylas should return a refresh token along with the exchange token. This isn&#39;t suitable for client-side or JavaScript applications. (optional)
     * @param  string|null $code_challenge Specifies a Base64-encoded &#x60;code_verifier&#x60; without padding. The verifier is used as a server-side challenge during the authorization code exchange. (optional)
     * @param  string|null $code_challenge_method Specifies the method used to encode the &#x60;code_verifier&#x60;. The verifier is used as a server-side challenge during the authorization code exchange. (optional, default to 'plain')
     * @param  string|null $credential_id (Microsoft admin consent bulk authentication flow only) The ID of an existing Nylas connector credential record that&#39;s attached to the application&#39;s Microsoft connector. Use this field for Microsoft admin consent credential IDs only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauth2Flow'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOauth2FlowWithHttpInfo(
        string $client_id,
        string $redirect_uri,
        string $response_type,
        ?string $provider = null,
        ?string $scope = null,
        ?string $prompt = 'select_provider',
        ?string $state = null,
        ?string $login_hint = null,
        ?string $access_type = null,
        ?string $code_challenge = null,
        ?string $code_challenge_method = 'plain',
        ?string $credential_id = null,
        string $contentType = self::contentTypes['getOauth2Flow'][0]
    ): array
    {
        $request = $this->getOauth2FlowRequest($client_id, $redirect_uri, $response_type, $provider, $scope, $prompt, $state, $login_hint, $access_type, $code_challenge, $code_challenge_method, $credential_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getOauth2FlowAsync
     *
     * Hosted OAuth - Authorization Request
     *
     * @param  string $client_id Your Nylas application&#39;s client ID (or application ID). (required)
     * @param  string $redirect_uri Your Nylas application&#39;s redirect URI (or callback URI). (required)
     * @param  string $response_type Specifies the type of response Nylas returns for the authorization flow. Should be set to &#x60;code&#x60; for the OAuth 2.0 flow, and &#x60;adminconsent&#x60; for the Microsoft admin consent service flow. (required)
     * @param  string|null $provider The connector provider type that you set up with Nylas for this application. If the provider isn&#39;t set, the end user is directed to the Nylas Hosted login page and prompted to select their provider. Multiple providers can be set as a comma-separated list. (optional)
     * @param  string|null $scope A space-delimited list of scopes that identify the resources that your application may access on the end user&#39;s behalf. If no scopes are set, Nylas uses the default connector scopes. (optional)
     * @param  string|null $prompt (Optional) The prompt for the Hosted login page. This parameter can accept multiple values separated by a comma, without spaces in between. The order of the prompts affects the UI of the Hosted login page. If &#x60;provider&#x60; is not set, the end user is redirected to the provider page directly, and the prompt is ignored. (optional, default to 'select_provider')
     * @param  string|null $state (Optional) The state of the grant, returned after authentication. The maximum length is 256 characters. (optional)
     * @param  string|null $login_hint Prefill the login name (usually the email address) during the authentication flow. If a grant already exists for the provided email address, Nylas automatically re-authenticates the grant. (optional)
     * @param  string|null $access_type Specifies whether Nylas should return a refresh token along with the exchange token. This isn&#39;t suitable for client-side or JavaScript applications. (optional)
     * @param  string|null $code_challenge Specifies a Base64-encoded &#x60;code_verifier&#x60; without padding. The verifier is used as a server-side challenge during the authorization code exchange. (optional)
     * @param  string|null $code_challenge_method Specifies the method used to encode the &#x60;code_verifier&#x60;. The verifier is used as a server-side challenge during the authorization code exchange. (optional, default to 'plain')
     * @param  string|null $credential_id (Microsoft admin consent bulk authentication flow only) The ID of an existing Nylas connector credential record that&#39;s attached to the application&#39;s Microsoft connector. Use this field for Microsoft admin consent credential IDs only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauth2Flow'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOauth2FlowAsync(
        string $client_id,
        string $redirect_uri,
        string $response_type,
        ?string $provider = null,
        ?string $scope = null,
        ?string $prompt = 'select_provider',
        ?string $state = null,
        ?string $login_hint = null,
        ?string $access_type = null,
        ?string $code_challenge = null,
        ?string $code_challenge_method = 'plain',
        ?string $credential_id = null,
        string $contentType = self::contentTypes['getOauth2Flow'][0]
    ): PromiseInterface
    {
        return $this->getOauth2FlowAsyncWithHttpInfo($client_id, $redirect_uri, $response_type, $provider, $scope, $prompt, $state, $login_hint, $access_type, $code_challenge, $code_challenge_method, $credential_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOauth2FlowAsyncWithHttpInfo
     *
     * Hosted OAuth - Authorization Request
     *
     * @param  string $client_id Your Nylas application&#39;s client ID (or application ID). (required)
     * @param  string $redirect_uri Your Nylas application&#39;s redirect URI (or callback URI). (required)
     * @param  string $response_type Specifies the type of response Nylas returns for the authorization flow. Should be set to &#x60;code&#x60; for the OAuth 2.0 flow, and &#x60;adminconsent&#x60; for the Microsoft admin consent service flow. (required)
     * @param  string|null $provider The connector provider type that you set up with Nylas for this application. If the provider isn&#39;t set, the end user is directed to the Nylas Hosted login page and prompted to select their provider. Multiple providers can be set as a comma-separated list. (optional)
     * @param  string|null $scope A space-delimited list of scopes that identify the resources that your application may access on the end user&#39;s behalf. If no scopes are set, Nylas uses the default connector scopes. (optional)
     * @param  string|null $prompt (Optional) The prompt for the Hosted login page. This parameter can accept multiple values separated by a comma, without spaces in between. The order of the prompts affects the UI of the Hosted login page. If &#x60;provider&#x60; is not set, the end user is redirected to the provider page directly, and the prompt is ignored. (optional, default to 'select_provider')
     * @param  string|null $state (Optional) The state of the grant, returned after authentication. The maximum length is 256 characters. (optional)
     * @param  string|null $login_hint Prefill the login name (usually the email address) during the authentication flow. If a grant already exists for the provided email address, Nylas automatically re-authenticates the grant. (optional)
     * @param  string|null $access_type Specifies whether Nylas should return a refresh token along with the exchange token. This isn&#39;t suitable for client-side or JavaScript applications. (optional)
     * @param  string|null $code_challenge Specifies a Base64-encoded &#x60;code_verifier&#x60; without padding. The verifier is used as a server-side challenge during the authorization code exchange. (optional)
     * @param  string|null $code_challenge_method Specifies the method used to encode the &#x60;code_verifier&#x60;. The verifier is used as a server-side challenge during the authorization code exchange. (optional, default to 'plain')
     * @param  string|null $credential_id (Microsoft admin consent bulk authentication flow only) The ID of an existing Nylas connector credential record that&#39;s attached to the application&#39;s Microsoft connector. Use this field for Microsoft admin consent credential IDs only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauth2Flow'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getOauth2FlowAsyncWithHttpInfo(
        $client_id,
        $redirect_uri,
        $response_type,
        $provider = null,
        $scope = null,
        $prompt = 'select_provider',
        $state = null,
        $login_hint = null,
        $access_type = null,
        $code_challenge = null,
        $code_challenge_method = 'plain',
        $credential_id = null,
        string $contentType = self::contentTypes['getOauth2Flow'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->getOauth2FlowRequest($client_id, $redirect_uri, $response_type, $provider, $scope, $prompt, $state, $login_hint, $access_type, $code_challenge, $code_challenge_method, $credential_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOauth2Flow'
     *
     * @param  string $client_id Your Nylas application&#39;s client ID (or application ID). (required)
     * @param  string $redirect_uri Your Nylas application&#39;s redirect URI (or callback URI). (required)
     * @param  string $response_type Specifies the type of response Nylas returns for the authorization flow. Should be set to &#x60;code&#x60; for the OAuth 2.0 flow, and &#x60;adminconsent&#x60; for the Microsoft admin consent service flow. (required)
     * @param  string|null $provider The connector provider type that you set up with Nylas for this application. If the provider isn&#39;t set, the end user is directed to the Nylas Hosted login page and prompted to select their provider. Multiple providers can be set as a comma-separated list. (optional)
     * @param  string|null $scope A space-delimited list of scopes that identify the resources that your application may access on the end user&#39;s behalf. If no scopes are set, Nylas uses the default connector scopes. (optional)
     * @param  string|null $prompt (Optional) The prompt for the Hosted login page. This parameter can accept multiple values separated by a comma, without spaces in between. The order of the prompts affects the UI of the Hosted login page. If &#x60;provider&#x60; is not set, the end user is redirected to the provider page directly, and the prompt is ignored. (optional, default to 'select_provider')
     * @param  string|null $state (Optional) The state of the grant, returned after authentication. The maximum length is 256 characters. (optional)
     * @param  string|null $login_hint Prefill the login name (usually the email address) during the authentication flow. If a grant already exists for the provided email address, Nylas automatically re-authenticates the grant. (optional)
     * @param  string|null $access_type Specifies whether Nylas should return a refresh token along with the exchange token. This isn&#39;t suitable for client-side or JavaScript applications. (optional)
     * @param  string|null $code_challenge Specifies a Base64-encoded &#x60;code_verifier&#x60; without padding. The verifier is used as a server-side challenge during the authorization code exchange. (optional)
     * @param  string|null $code_challenge_method Specifies the method used to encode the &#x60;code_verifier&#x60;. The verifier is used as a server-side challenge during the authorization code exchange. (optional, default to 'plain')
     * @param  string|null $credential_id (Microsoft admin consent bulk authentication flow only) The ID of an existing Nylas connector credential record that&#39;s attached to the application&#39;s Microsoft connector. Use this field for Microsoft admin consent credential IDs only. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOauth2Flow'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOauth2FlowRequest(
        $client_id,
        $redirect_uri,
        $response_type,
        $provider = null,
        $scope = null,
        $prompt = 'select_provider',
        $state = null,
        $login_hint = null,
        $access_type = null,
        $code_challenge = null,
        $code_challenge_method = 'plain',
        $credential_id = null,
        string $contentType = self::contentTypes['getOauth2Flow'][0]
    ): Request
    {

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $client_id when calling getOauth2Flow'
            );
        }

        // verify the required parameter 'redirect_uri' is set
        if ($redirect_uri === null || (is_array($redirect_uri) && count($redirect_uri) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $redirect_uri when calling getOauth2Flow'
            );
        }

        // verify the required parameter 'response_type' is set
        if ($response_type === null || (is_array($response_type) && count($response_type) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $response_type when calling getOauth2Flow'
            );
        }











        $resourcePath = '/v3/connect/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider,
            'provider', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $redirect_uri,
            'redirect_uri', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_type,
            'response_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scope,
            'scope', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prompt,
            'prompt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $login_hint,
            'login_hint', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_type,
            'access_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code_challenge,
            'code_challenge', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code_challenge_method,
            'code_challenge_method', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $credential_id,
            'credential_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Access token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer (API key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation infoOauth2Token
     *
     * OAuth Token Info
     *
     * @param  string|null $id_token ID token (optional)
     * @param  string|null $access_token Access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['infoOauth2Token'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Administration\Model\InfoOauth2Token200Response|\JackWH\NylasV3\Administration\Model\Data2
     */
    public function infoOauth2Token(
        ?string $id_token = null,
        ?string $access_token = null,
        string $contentType = self::contentTypes['infoOauth2Token'][0]
    ): \JackWH\NylasV3\Administration\Model\InfoOauth2Token200Response
    {
        list($response) = $this->infoOauth2TokenWithHttpInfo($id_token, $access_token, $contentType);
        return $response;
    }

    /**
     * Operation infoOauth2TokenWithHttpInfo
     *
     * OAuth Token Info
     *
     * @param  string|null $id_token ID token (optional)
     * @param  string|null $access_token Access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['infoOauth2Token'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Administration\Model\InfoOauth2Token200Response|\JackWH\NylasV3\Administration\Model\Data2, HTTP status code, HTTP response headers (array of strings)
     */
    public function infoOauth2TokenWithHttpInfo(
        ?string $id_token = null,
        ?string $access_token = null,
        string $contentType = self::contentTypes['infoOauth2Token'][0]
    ): array
    {
        $request = $this->infoOauth2TokenRequest($id_token, $access_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Administration\Model\InfoOauth2Token200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\InfoOauth2Token200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\InfoOauth2Token200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Administration\Model\Data2', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\Data2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\Data2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\JackWH\NylasV3\Administration\Model\InfoOauth2Token200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\InfoOauth2Token200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\Data2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation infoOauth2TokenAsync
     *
     * OAuth Token Info
     *
     * @param  string|null $id_token ID token (optional)
     * @param  string|null $access_token Access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['infoOauth2Token'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function infoOauth2TokenAsync(
        ?string $id_token = null,
        ?string $access_token = null,
        string $contentType = self::contentTypes['infoOauth2Token'][0]
    ): PromiseInterface
    {
        return $this->infoOauth2TokenAsyncWithHttpInfo($id_token, $access_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation infoOauth2TokenAsyncWithHttpInfo
     *
     * OAuth Token Info
     *
     * @param  string|null $id_token ID token (optional)
     * @param  string|null $access_token Access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['infoOauth2Token'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function infoOauth2TokenAsyncWithHttpInfo(
        $id_token = null,
        $access_token = null,
        string $contentType = self::contentTypes['infoOauth2Token'][0]
    ): PromiseInterface
    {
        $returnType = '\JackWH\NylasV3\Administration\Model\InfoOauth2Token200Response';
        $request = $this->infoOauth2TokenRequest($id_token, $access_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'infoOauth2Token'
     *
     * @param  string|null $id_token ID token (optional)
     * @param  string|null $access_token Access token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['infoOauth2Token'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function infoOauth2TokenRequest(
        $id_token = null,
        $access_token = null,
        string $contentType = self::contentTypes['infoOauth2Token'][0]
    ): Request
    {




        $resourcePath = '/v3/connect/tokeninfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_token,
            'id_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_token,
            'access_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Access token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer (API key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation revokeOauth2TokenAndGrant
     *
     * Hosted OAuth - Revoke OAuth token
     *
     * @param  string $token The token to revoke (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeOauth2TokenAndGrant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return object|\JackWH\NylasV3\Administration\Model\Data2
     */
    public function revokeOauth2TokenAndGrant(
        string $token,
        string $contentType = self::contentTypes['revokeOauth2TokenAndGrant'][0]
    ): object
    {
        list($response) = $this->revokeOauth2TokenAndGrantWithHttpInfo($token, $contentType);
        return $response;
    }

    /**
     * Operation revokeOauth2TokenAndGrantWithHttpInfo
     *
     * Hosted OAuth - Revoke OAuth token
     *
     * @param  string $token The token to revoke (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeOauth2TokenAndGrant'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of object|\JackWH\NylasV3\Administration\Model\Data2, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeOauth2TokenAndGrantWithHttpInfo(
        string $token,
        string $contentType = self::contentTypes['revokeOauth2TokenAndGrant'][0]
    ): array
    {
        $request = $this->revokeOauth2TokenAndGrantRequest($token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('object', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Administration\Model\Data2', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\Data2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\Data2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\Data2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation revokeOauth2TokenAndGrantAsync
     *
     * Hosted OAuth - Revoke OAuth token
     *
     * @param  string $token The token to revoke (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeOauth2TokenAndGrant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function revokeOauth2TokenAndGrantAsync(
        string $token,
        string $contentType = self::contentTypes['revokeOauth2TokenAndGrant'][0]
    ): PromiseInterface
    {
        return $this->revokeOauth2TokenAndGrantAsyncWithHttpInfo($token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation revokeOauth2TokenAndGrantAsyncWithHttpInfo
     *
     * Hosted OAuth - Revoke OAuth token
     *
     * @param  string $token The token to revoke (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeOauth2TokenAndGrant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function revokeOauth2TokenAndGrantAsyncWithHttpInfo(
        $token,
        string $contentType = self::contentTypes['revokeOauth2TokenAndGrant'][0]
    ): PromiseInterface
    {
        $returnType = 'object';
        $request = $this->revokeOauth2TokenAndGrantRequest($token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'revokeOauth2TokenAndGrant'
     *
     * @param  string $token The token to revoke (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['revokeOauth2TokenAndGrant'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function revokeOauth2TokenAndGrantRequest(
        $token,
        string $contentType = self::contentTypes['revokeOauth2TokenAndGrant'][0]
    ): Request
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $token when calling revokeOauth2TokenAndGrant'
            );
        }


        $resourcePath = '/v3/connect/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Access token) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer (API key) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
