<?php
/**
 * PubSubNotificationsApi
 * PHP version 8.1
 *
 * @package  JackWH\NylasV3\Administration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nylas v3 Administration APIs
 *
 * <div style=\"padding:24px; background-color: #F5FFFD; border: 1px solid #00A88C; color: #161717\">This API reference documentation covers the <strong>Administration APIs</strong> only. See the <strong><a href=\"/docs/api/v3/ecc/\">Email, Calendar, and Contacts API reference</a></strong> for information on working with the Email, Calendar, and Contacts APIs.</div>  The **Nylas Administration APIs** are how you query and change your Nylas applications, including the application's authentication configuration, provider settings, and webhook subscriptions. You can also use Administration APIs to query your application to list the Grants (specific permissions to access user data) that are associated with each of your Nylas applications.  The Nylas API is designed using the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) ideology to provide simple and predictable URIs to access and modify objects. Requests support [standard HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) like `GET`, `PUT`, `POST`, and `DELETE`, and [standard status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).  You can use the [Nylas Postman collection](https://www.postman.com/trynylas/workspace/nylas-api/overview) to quickly start using the Nylas APIs. For more information, check out the [Nylas Postman collection documentation](/docs/v3/api-references/postman/).  ## Query parameters  Nylas allows you to include query parameters in `GET` requests that return a list of results. Query parameters let you narrow the results Nylas returns, meaning fewer requests to the provider and less data for your application to sift through. For more information, see [Rate limits in Nylas](/docs/dev-guide/platform/rate-limits/).  The table below shows the query parameters you can use for the `GET` requests in the Administration APIs.  | Endpoint | Query parameters | | :--- | :--- | | [`GET /v3/connectors`](/docs/api/v3/admin/#get-/v3/connectors) | `limit`, `offset` | | [`GET /v3/grants`](/docs/api/v3/admin/#get-/v3/grants) | `limit`, `offset`, `sort_by`, `order_by`, `since`, `before`, `email`, `grant_status`, `ip`, `provider` | | [`GET /v3/connectors/<PROVIDER>/creds`](/docs/api/v3/admin/#get-/v3/connectors/-provider-/creds) | `limit`, `offset`, `sort_by`, `order_by` |  You can use the `limit` parameter to set the maximum number of results Nylas returns for your request. Nylas recommends setting a lower `limit` if you encounter rate limits on the provider. For more information, see [Avoiding rate limits in Nylas](/docs/dev-guide/best-practices/rate-limits/).  ## Updating objects  `PUT` and `PATCH` requests behave similarly in Nylas v3: when you make a request, Nylas replaces all data in the nested object with the information you define. Because of this, your request might fail if you don't include all mandatory fields.  Nylas doesn't erase the data from fields that you don't include in your request, so you can define only the mandatory fields and any that you want to update.  ## Authentication documentation  You can find more information about the Nylas Administration APIs in the main documentation set:  - [Authentication in v3](/docs/v3/auth/)   - [Create grants with OAuth authentication + API key](/docs/v3/auth/hosted-oauth-apikey/)   - [Create grants with OAuth authentication + Access token](/docs/v3/auth/hosted-oauth-accesstoken/)   - [Create grants with custom authentication](/docs/v3/auth/custom/) (called \"native\" authentication in v2)   - [Create grants with IMAP authentication](/docs/v3/auth/imap/) - [Bulk authentication in v3](/docs/v3/auth/bulk-auth-grants/) - [v3 event codes](/docs/v3/api-references/event-codes/) - [Virtual Calendars in v3](/docs/v3/auth/virtual-calendars/)  ## Nylas v3 encoding  Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.
 *
 * The version of the OpenAPI document: v3
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JackWH\NylasV3\Administration\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use JackWH\NylasV3\Administration\ApiException;
use JackWH\NylasV3\Administration\Configuration;
use JackWH\NylasV3\Administration\HeaderSelector;
use JackWH\NylasV3\Administration\ObjectSerializer;

/**
 * PubSubNotificationsApi Class Doc Comment
 *
 * @package  JackWH\NylasV3\Administration
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PubSubNotificationsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] * */
    public const contentTypes = [
        'createPubsubChannel' => [
            'application/json',
        ],
        'deletePubsubById' => [
            'application/json',
        ],
        'getMockWebhookPayload' => [
            'application/json',
        ],
        'getPubsubById' => [
            'application/json',
        ],
        'getPubsubChannels' => [
            'application/json',
        ],
        'putPubsubById' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createPubsubChannel
     *
     * Create a Pub/Sub channel
     *
     * @param  \JackWH\NylasV3\Administration\Model\DestinationPayload1 $destination_payload1 Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPubsubChannel'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Administration\Model\CreatePubsubChannel200Response|\JackWH\NylasV3\Administration\Model\CreatePubsubChannel400Response
     */
    public function createPubsubChannel(
        \JackWH\NylasV3\Administration\Model\DestinationPayload1 $destination_payload1,
        string $contentType = self::contentTypes['createPubsubChannel'][0]
    ): \JackWH\NylasV3\Administration\Model\CreatePubsubChannel200Response {
        list($response) = $this->createPubsubChannelWithHttpInfo($destination_payload1, $contentType);

        return $response;
    }

    /**
     * Operation createPubsubChannelWithHttpInfo
     *
     * Create a Pub/Sub channel
     *
     * @param  \JackWH\NylasV3\Administration\Model\DestinationPayload1 $destination_payload1 Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPubsubChannel'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Administration\Model\CreatePubsubChannel200Response|\JackWH\NylasV3\Administration\Model\CreatePubsubChannel400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPubsubChannelWithHttpInfo(
        \JackWH\NylasV3\Administration\Model\DestinationPayload1 $destination_payload1,
        string $contentType = self::contentTypes['createPubsubChannel'][0]
    ): array {
        $request = $this->createPubsubChannelRequest($destination_payload1, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Administration\Model\CreatePubsubChannel200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\CreatePubsubChannel200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\CreatePubsubChannel200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Administration\Model\CreatePubsubChannel400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\CreatePubsubChannel400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\CreatePubsubChannel400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\JackWH\NylasV3\Administration\Model\CreatePubsubChannel200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\CreatePubsubChannel200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\CreatePubsubChannel400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createPubsubChannelAsync
     *
     * Create a Pub/Sub channel
     *
     * @param  \JackWH\NylasV3\Administration\Model\DestinationPayload1 $destination_payload1 Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPubsubChannel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPubsubChannelAsync(
        \JackWH\NylasV3\Administration\Model\DestinationPayload1 $destination_payload1,
        string $contentType = self::contentTypes['createPubsubChannel'][0]
    ): PromiseInterface {
        return $this->createPubsubChannelAsyncWithHttpInfo($destination_payload1, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPubsubChannelAsyncWithHttpInfo
     *
     * Create a Pub/Sub channel
     *
     * @param  \JackWH\NylasV3\Administration\Model\DestinationPayload1 $destination_payload1 Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPubsubChannel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createPubsubChannelAsyncWithHttpInfo(
        $destination_payload1,
        string $contentType = self::contentTypes['createPubsubChannel'][0]
    ): PromiseInterface {
        $returnType = '\JackWH\NylasV3\Administration\Model\CreatePubsubChannel200Response';
        $request = $this->createPubsubChannelRequest($destination_payload1, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPubsubChannel'
     *
     * @param  \JackWH\NylasV3\Administration\Model\DestinationPayload1 $destination_payload1 Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPubsubChannel'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPubsubChannelRequest(
        $destination_payload1,
        string $contentType = self::contentTypes['createPubsubChannel'][0]
    ): Request {

        // verify the required parameter 'destination_payload1' is set
        if ($destination_payload1 === null || (is_array($destination_payload1) && count($destination_payload1) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $destination_payload1 when calling createPubsubChannel'
            );
        }


        $resourcePath = '/v3/channels/pubsub';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($destination_payload1)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($destination_payload1));
            } else {
                $httpBody = $destination_payload1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (API key) authentication (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePubsubById
     *
     * Delete a specific Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePubsubById'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Administration\Model\DeleteWebhookById200Response|\JackWH\NylasV3\Administration\Model\PutWebhookById400Response
     */
    public function deletePubsubById(
        string $id,
        string $contentType = self::contentTypes['deletePubsubById'][0]
    ): \JackWH\NylasV3\Administration\Model\DeleteWebhookById200Response {
        list($response) = $this->deletePubsubByIdWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation deletePubsubByIdWithHttpInfo
     *
     * Delete a specific Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePubsubById'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Administration\Model\DeleteWebhookById200Response|\JackWH\NylasV3\Administration\Model\PutWebhookById400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePubsubByIdWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['deletePubsubById'][0]
    ): array {
        $request = $this->deletePubsubByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Administration\Model\DeleteWebhookById200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\DeleteWebhookById200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\DeleteWebhookById200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Administration\Model\PutWebhookById400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\PutWebhookById400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\PutWebhookById400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\JackWH\NylasV3\Administration\Model\DeleteWebhookById200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\DeleteWebhookById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\PutWebhookById400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePubsubByIdAsync
     *
     * Delete a specific Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePubsubById'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePubsubByIdAsync(
        string $id,
        string $contentType = self::contentTypes['deletePubsubById'][0]
    ): PromiseInterface {
        return $this->deletePubsubByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePubsubByIdAsyncWithHttpInfo
     *
     * Delete a specific Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePubsubById'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deletePubsubByIdAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['deletePubsubById'][0]
    ): PromiseInterface {
        $returnType = '\JackWH\NylasV3\Administration\Model\DeleteWebhookById200Response';
        $request = $this->deletePubsubByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePubsubById'
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePubsubById'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePubsubByIdRequest(
        $id,
        string $contentType = self::contentTypes['deletePubsubById'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling deletePubsubById'
            );
        }


        $resourcePath = '/v3/channels/pubsub/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (API key) authentication (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMockWebhookPayload
     *
     * Get mock notification payload
     *
     * @param  \JackWH\NylasV3\Administration\Model\InputPayload $input_payload Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMockWebhookPayload'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Administration\Model\GetMockWebhookPayload200Response
     */
    public function getMockWebhookPayload(
        \JackWH\NylasV3\Administration\Model\InputPayload $input_payload,
        string $contentType = self::contentTypes['getMockWebhookPayload'][0]
    ): \JackWH\NylasV3\Administration\Model\GetMockWebhookPayload200Response {
        list($response) = $this->getMockWebhookPayloadWithHttpInfo($input_payload, $contentType);

        return $response;
    }

    /**
     * Operation getMockWebhookPayloadWithHttpInfo
     *
     * Get mock notification payload
     *
     * @param  \JackWH\NylasV3\Administration\Model\InputPayload $input_payload Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMockWebhookPayload'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Administration\Model\GetMockWebhookPayload200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMockWebhookPayloadWithHttpInfo(
        \JackWH\NylasV3\Administration\Model\InputPayload $input_payload,
        string $contentType = self::contentTypes['getMockWebhookPayload'][0]
    ): array {
        $request = $this->getMockWebhookPayloadRequest($input_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Administration\Model\GetMockWebhookPayload200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\GetMockWebhookPayload200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\GetMockWebhookPayload200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\JackWH\NylasV3\Administration\Model\GetMockWebhookPayload200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\GetMockWebhookPayload200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMockWebhookPayloadAsync
     *
     * Get mock notification payload
     *
     * @param  \JackWH\NylasV3\Administration\Model\InputPayload $input_payload Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMockWebhookPayload'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMockWebhookPayloadAsync(
        \JackWH\NylasV3\Administration\Model\InputPayload $input_payload,
        string $contentType = self::contentTypes['getMockWebhookPayload'][0]
    ): PromiseInterface {
        return $this->getMockWebhookPayloadAsyncWithHttpInfo($input_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMockWebhookPayloadAsyncWithHttpInfo
     *
     * Get mock notification payload
     *
     * @param  \JackWH\NylasV3\Administration\Model\InputPayload $input_payload Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMockWebhookPayload'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getMockWebhookPayloadAsyncWithHttpInfo(
        $input_payload,
        string $contentType = self::contentTypes['getMockWebhookPayload'][0]
    ): PromiseInterface {
        $returnType = '\JackWH\NylasV3\Administration\Model\GetMockWebhookPayload200Response';
        $request = $this->getMockWebhookPayloadRequest($input_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMockWebhookPayload'
     *
     * @param  \JackWH\NylasV3\Administration\Model\InputPayload $input_payload Destination definition (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMockWebhookPayload'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMockWebhookPayloadRequest(
        $input_payload,
        string $contentType = self::contentTypes['getMockWebhookPayload'][0]
    ): Request {

        // verify the required parameter 'input_payload' is set
        if ($input_payload === null || (is_array($input_payload) && count($input_payload) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $input_payload when calling getMockWebhookPayload'
            );
        }


        $resourcePath = '/v3/webhooks/mock-payload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($input_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($input_payload));
            } else {
                $httpBody = $input_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (API key) authentication (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPubsubById
     *
     * Get a specific Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubById'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Administration\Model\GetPubsubById200Response|\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response
     */
    public function getPubsubById(
        string $id,
        string $contentType = self::contentTypes['getPubsubById'][0]
    ): \JackWH\NylasV3\Administration\Model\GetPubsubById200Response {
        list($response) = $this->getPubsubByIdWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation getPubsubByIdWithHttpInfo
     *
     * Get a specific Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubById'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Administration\Model\GetPubsubById200Response|\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPubsubByIdWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['getPubsubById'][0]
    ): array {
        $request = $this->getPubsubByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Administration\Model\GetPubsubById200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\GetPubsubById200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\GetPubsubById200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\JackWH\NylasV3\Administration\Model\GetPubsubById200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\GetPubsubById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPubsubByIdAsync
     *
     * Get a specific Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubById'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPubsubByIdAsync(
        string $id,
        string $contentType = self::contentTypes['getPubsubById'][0]
    ): PromiseInterface {
        return $this->getPubsubByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPubsubByIdAsyncWithHttpInfo
     *
     * Get a specific Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubById'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPubsubByIdAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes['getPubsubById'][0]
    ): PromiseInterface {
        $returnType = '\JackWH\NylasV3\Administration\Model\GetPubsubById200Response';
        $request = $this->getPubsubByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPubsubById'
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubById'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPubsubByIdRequest(
        $id,
        string $contentType = self::contentTypes['getPubsubById'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling getPubsubById'
            );
        }


        $resourcePath = '/v3/channels/pubsub/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (API key) authentication (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPubsubChannels
     *
     * Get Pub/Sub channels for an application
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubChannels'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Administration\Model\GetPubsubChannels200Response|\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response
     */
    public function getPubsubChannels(
        string $contentType = self::contentTypes['getPubsubChannels'][0]
    ): \JackWH\NylasV3\Administration\Model\GetPubsubChannels200Response {
        list($response) = $this->getPubsubChannelsWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation getPubsubChannelsWithHttpInfo
     *
     * Get Pub/Sub channels for an application
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubChannels'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Administration\Model\GetPubsubChannels200Response|\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPubsubChannelsWithHttpInfo(
        string $contentType = self::contentTypes['getPubsubChannels'][0]
    ): array {
        $request = $this->getPubsubChannelsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Administration\Model\GetPubsubChannels200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\GetPubsubChannels200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\GetPubsubChannels200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\JackWH\NylasV3\Administration\Model\GetPubsubChannels200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\GetPubsubChannels200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\GetPubsubChannels400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPubsubChannelsAsync
     *
     * Get Pub/Sub channels for an application
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubChannels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPubsubChannelsAsync(
        string $contentType = self::contentTypes['getPubsubChannels'][0]
    ): PromiseInterface {
        return $this->getPubsubChannelsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPubsubChannelsAsyncWithHttpInfo
     *
     * Get Pub/Sub channels for an application
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubChannels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getPubsubChannelsAsyncWithHttpInfo(
        string $contentType = self::contentTypes['getPubsubChannels'][0]
    ): PromiseInterface {
        $returnType = '\JackWH\NylasV3\Administration\Model\GetPubsubChannels200Response';
        $request = $this->getPubsubChannelsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPubsubChannels'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPubsubChannels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPubsubChannelsRequest(
        string $contentType = self::contentTypes['getPubsubChannels'][0]
    ): Request {


        $resourcePath = '/v3/channels/pubsub';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (API key) authentication (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putPubsubById
     *
     * Update a Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  \JackWH\NylasV3\Administration\Model\PutPubsubByIdRequest $put_pubsub_by_id_request The Pub/Sub channel properties to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPubsubById'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Administration\Model\PutPubsubById200Response|\JackWH\NylasV3\Administration\Model\PutPubsubById400Response
     */
    public function putPubsubById(
        string $id,
        \JackWH\NylasV3\Administration\Model\PutPubsubByIdRequest $put_pubsub_by_id_request,
        string $contentType = self::contentTypes['putPubsubById'][0]
    ): \JackWH\NylasV3\Administration\Model\PutPubsubById200Response {
        list($response) = $this->putPubsubByIdWithHttpInfo($id, $put_pubsub_by_id_request, $contentType);

        return $response;
    }

    /**
     * Operation putPubsubByIdWithHttpInfo
     *
     * Update a Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  \JackWH\NylasV3\Administration\Model\PutPubsubByIdRequest $put_pubsub_by_id_request The Pub/Sub channel properties to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPubsubById'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Administration\Model\PutPubsubById200Response|\JackWH\NylasV3\Administration\Model\PutPubsubById400Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPubsubByIdWithHttpInfo(
        string $id,
        \JackWH\NylasV3\Administration\Model\PutPubsubByIdRequest $put_pubsub_by_id_request,
        string $contentType = self::contentTypes['putPubsubById'][0]
    ): array {
        $request = $this->putPubsubByIdRequest($id, $put_pubsub_by_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Administration\Model\PutPubsubById200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\PutPubsubById200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\PutPubsubById200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Administration\Model\PutPubsubById400Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Administration\Model\PutPubsubById400Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Administration\Model\PutPubsubById400Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\JackWH\NylasV3\Administration\Model\PutPubsubById200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\PutPubsubById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Administration\Model\PutPubsubById400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPubsubByIdAsync
     *
     * Update a Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  \JackWH\NylasV3\Administration\Model\PutPubsubByIdRequest $put_pubsub_by_id_request The Pub/Sub channel properties to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPubsubById'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putPubsubByIdAsync(
        string $id,
        \JackWH\NylasV3\Administration\Model\PutPubsubByIdRequest $put_pubsub_by_id_request,
        string $contentType = self::contentTypes['putPubsubById'][0]
    ): PromiseInterface {
        return $this->putPubsubByIdAsyncWithHttpInfo($id, $put_pubsub_by_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putPubsubByIdAsyncWithHttpInfo
     *
     * Update a Pub/Sub channel
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  \JackWH\NylasV3\Administration\Model\PutPubsubByIdRequest $put_pubsub_by_id_request The Pub/Sub channel properties to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPubsubById'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putPubsubByIdAsyncWithHttpInfo(
        $id,
        $put_pubsub_by_id_request,
        string $contentType = self::contentTypes['putPubsubById'][0]
    ): PromiseInterface {
        $returnType = '\JackWH\NylasV3\Administration\Model\PutPubsubById200Response';
        $request = $this->putPubsubByIdRequest($id, $put_pubsub_by_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putPubsubById'
     *
     * @param  string $id The ID of the Pub/Sub channel to retrieve. (required)
     * @param  \JackWH\NylasV3\Administration\Model\PutPubsubByIdRequest $put_pubsub_by_id_request The Pub/Sub channel properties to update. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putPubsubById'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putPubsubByIdRequest(
        $id,
        $put_pubsub_by_id_request,
        string $contentType = self::contentTypes['putPubsubById'][0]
    ): Request {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling putPubsubById'
            );
        }

        // verify the required parameter 'put_pubsub_by_id_request' is set
        if ($put_pubsub_by_id_request === null || (is_array($put_pubsub_by_id_request) && count($put_pubsub_by_id_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $put_pubsub_by_id_request when calling putPubsubById'
            );
        }


        $resourcePath = '/v3/channels/pubsub/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_pubsub_by_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_pubsub_by_id_request));
            } else {
                $httpBody = $put_pubsub_by_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (API key) authentication (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (! $options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
