<?php
/**
 * AvailabilityApi
 * PHP version 8.1
 *
 * @package  JackWH\NylasV3\Scheduler
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nylas v3 Scheduler APIs
 *
 * <div style=\"padding:24px; background-color: #F5FFFD; border: 1px solid #00A88C; color: #161717\">This API reference documentation covers the <strong>Nylas Scheduler API</strong>. See the see the <strong><a href=\"/docs/api/v3/admin/\">Administration API documentation</a></strong> for information about working with Nylas applications, authentication, connectors, and webhook subscriptions.</div>  The **Nylas Scheduler API** is designed using the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) ideology to provide simple and predictable URIs to access and modify objects. Requests support [standard HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) like `GET`, `PUT`, `POST`, and `DELETE`, and [standard status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html). Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.  ## Updating objects  `PUT` and `PATCH` requests behave similarly in Nylas v3: when you make a request, Nylas replaces all data in the nested object with the information you define. Because of this, your request might fail if you don't include all mandatory fields.  Nylas doesn't erase the data from fields that you don't include in your request, so you can define only the mandatory fields and any that you want to update.  ## Nylas Postman collection  You can use the [Nylas Postman collection](https://www.postman.com/trynylas/workspace/nylas-api/overview) to quickly start using the Nylas Scheduler API. For more information, check out the [Nylas Postman collection documentation](/docs/v3/api-references/postman/).  ## Scheduler documentation  You can find more information about Scheduler in the main documentation set:  - [Scheduler overview](/docs/v3/scheduler/) - [Scheduler Quickstart guide](/docs/v3/quickstart/scheduler/)  ## Nylas v3 encoding  Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.
 *
 * The version of the OpenAPI document: v3
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JackWH\NylasV3\Scheduler\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use JackWH\NylasV3\Scheduler\ApiException;
use JackWH\NylasV3\Scheduler\Configuration;
use JackWH\NylasV3\Scheduler\HeaderSelector;
use JackWH\NylasV3\Scheduler\ObjectSerializer;

/**
 * AvailabilityApi Class Doc Comment
 *
 * @package  JackWH\NylasV3\Scheduler
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AvailabilityApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] * */
    public const contentTypes = [
        'getAvailability' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getAvailability
     *
     * Get Availability
     *
     * @param  string $start_time A Unix timestamp for the start time to check availability for. (required)
     * @param  string $end_time A Unix timestamp for the end time to check availability for. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string|null $booking_id This is the ID of the booking to reschedule, if you are checking availability to reschedule a round-robin booking. Required only if &#x60;availability_method&#x60; is &#x60;max-fairness&#x60; or &#x60;max-availability&#x60;. See [Retrieving booking IDs](/docs/v3/scheduler/retrieve-booking-ids/) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Scheduler\Model\GetAvailability200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1
     */
    public function getAvailability(
        string $start_time,
        string $end_time,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?string $booking_id = null,
        string $contentType = self::contentTypes['getAvailability'][0]
    ): \JackWH\NylasV3\Scheduler\Model\GetAvailability200Response {
        list($response) = $this->getAvailabilityWithHttpInfo($start_time, $end_time, $configuration_id, $slug, $client_id, $booking_id, $contentType);

        return $response;
    }

    /**
     * Operation getAvailabilityWithHttpInfo
     *
     * Get Availability
     *
     * @param  string $start_time A Unix timestamp for the start time to check availability for. (required)
     * @param  string $end_time A Unix timestamp for the end time to check availability for. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string|null $booking_id This is the ID of the booking to reschedule, if you are checking availability to reschedule a round-robin booking. Required only if &#x60;availability_method&#x60; is &#x60;max-fairness&#x60; or &#x60;max-availability&#x60;. See [Retrieving booking IDs](/docs/v3/scheduler/retrieve-booking-ids/) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailability'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Scheduler\Model\GetAvailability200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvailabilityWithHttpInfo(
        string $start_time,
        string $end_time,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?string $booking_id = null,
        string $contentType = self::contentTypes['getAvailability'][0]
    ): array {
        $request = $this->getAvailabilityRequest($start_time, $end_time, $configuration_id, $slug, $client_id, $booking_id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\GetAvailability200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\GetAvailability200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\GetAvailability200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 401:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 404:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 429:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 504:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\JackWH\NylasV3\Scheduler\Model\GetAvailability200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\GetAvailability200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAvailabilityAsync
     *
     * Get Availability
     *
     * @param  string $start_time A Unix timestamp for the start time to check availability for. (required)
     * @param  string $end_time A Unix timestamp for the end time to check availability for. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string|null $booking_id This is the ID of the booking to reschedule, if you are checking availability to reschedule a round-robin booking. Required only if &#x60;availability_method&#x60; is &#x60;max-fairness&#x60; or &#x60;max-availability&#x60;. See [Retrieving booking IDs](/docs/v3/scheduler/retrieve-booking-ids/) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAvailabilityAsync(
        string $start_time,
        string $end_time,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?string $booking_id = null,
        string $contentType = self::contentTypes['getAvailability'][0]
    ): PromiseInterface {
        return $this->getAvailabilityAsyncWithHttpInfo($start_time, $end_time, $configuration_id, $slug, $client_id, $booking_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAvailabilityAsyncWithHttpInfo
     *
     * Get Availability
     *
     * @param  string $start_time A Unix timestamp for the start time to check availability for. (required)
     * @param  string $end_time A Unix timestamp for the end time to check availability for. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string|null $booking_id This is the ID of the booking to reschedule, if you are checking availability to reschedule a round-robin booking. Required only if &#x60;availability_method&#x60; is &#x60;max-fairness&#x60; or &#x60;max-availability&#x60;. See [Retrieving booking IDs](/docs/v3/scheduler/retrieve-booking-ids/) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAvailabilityAsyncWithHttpInfo(
        $start_time,
        $end_time,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $booking_id = null,
        string $contentType = self::contentTypes['getAvailability'][0]
    ): PromiseInterface {
        $returnType = '\JackWH\NylasV3\Scheduler\Model\GetAvailability200Response';
        $request = $this->getAvailabilityRequest($start_time, $end_time, $configuration_id, $slug, $client_id, $booking_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAvailability'
     *
     * @param  string $start_time A Unix timestamp for the start time to check availability for. (required)
     * @param  string $end_time A Unix timestamp for the end time to check availability for. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string|null $booking_id This is the ID of the booking to reschedule, if you are checking availability to reschedule a round-robin booking. Required only if &#x60;availability_method&#x60; is &#x60;max-fairness&#x60; or &#x60;max-availability&#x60;. See [Retrieving booking IDs](/docs/v3/scheduler/retrieve-booking-ids/) for more information. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAvailability'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAvailabilityRequest(
        $start_time,
        $end_time,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $booking_id = null,
        string $contentType = self::contentTypes['getAvailability'][0]
    ): Request {

        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $start_time when calling getAvailability'
            );
        }

        // verify the required parameter 'end_time' is set
        if ($end_time === null || (is_array($end_time) && count($end_time) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $end_time when calling getAvailability'
            );
        }






        $resourcePath = '/v3/scheduling/availability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'start_time', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'end_time', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configuration_id,
            'configuration_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $slug,
            'slug', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $booking_id,
            'booking_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Session ID) authentication (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (! $options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
