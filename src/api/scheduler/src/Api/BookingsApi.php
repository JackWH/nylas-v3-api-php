<?php
/**
 * BookingsApi
 * PHP version 8.1
 *
 * @package  JackWH\NylasV3\Scheduler
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nylas v3 Scheduler APIs
 *
 * <div style=\"padding:24px; background-color: #F5FFFD; border: 1px solid #00A88C; color: #161717\">This API reference documentation covers the <strong>Nylas Scheduler API</strong>. See the see the <strong><a href=\"/docs/api/v3/admin/\">Administration API documentation</a></strong> for information about working with Nylas applications, authentication, connectors, and webhook subscriptions.</div>  The **Nylas Scheduler API** is designed using the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) ideology to provide simple and predictable URIs to access and modify objects. Requests support [standard HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) like `GET`, `PUT`, `POST`, and `DELETE`, and [standard status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html). Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.  ## Updating objects  `PUT` and `PATCH` requests behave similarly in Nylas v3: when you make a request, Nylas replaces all data in the nested object with the information you define. Because of this, your request might fail if you don't include all mandatory fields.  Nylas doesn't erase the data from fields that you don't include in your request, so you can define only the mandatory fields and any that you want to update.  ## Nylas Postman collection  You can use the [Nylas Postman collection](https://www.postman.com/trynylas/workspace/nylas-api/overview) to quickly start using the Nylas Scheduler API. For more information, check out the [Nylas Postman collection documentation](/docs/v3/api-references/postman/).  ## Scheduler documentation  You can find more information about Scheduler in the main documentation set:  - [Scheduler overview](/docs/v3/scheduler/) - [Scheduler Quickstart guide](/docs/v3/quickstart/scheduler/)  ## Nylas v3 encoding  Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.
 *
 * The version of the OpenAPI document: v3
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JackWH\NylasV3\Scheduler\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use JackWH\NylasV3\Scheduler\ApiException;
use JackWH\NylasV3\Scheduler\Configuration;
use JackWH\NylasV3\Scheduler\HeaderSelector;
use JackWH\NylasV3\Scheduler\ObjectSerializer;

/**
 * BookingsApi Class Doc Comment
 *
 * @package  JackWH\NylasV3\Scheduler
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BookingsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteBookingsId' => [
            'application/json',
        ],
        'getBookingsId' => [
            'application/json',
        ],
        'patchBookingsId' => [
            'application/json',
        ],
        'postBookings' => [
            'application/json',
        ],
        'putBookingsId' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation deleteBookingsId
     *
     * Delete a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\DeleteBookingsIdRequest|null $delete_bookings_id_request delete_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBookingsId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Scheduler\Model\DeleteConfigurationsId200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1
     */
    public function deleteBookingsId(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\DeleteBookingsIdRequest $delete_bookings_id_request = null,
        string $contentType = self::contentTypes['deleteBookingsId'][0]
    ): \JackWH\NylasV3\Scheduler\Model\DeleteConfigurationsId200Response
    {
        list($response) = $this->deleteBookingsIdWithHttpInfo($booking_id, $configuration_id, $slug, $client_id, $delete_bookings_id_request, $contentType);
        return $response;
    }

    /**
     * Operation deleteBookingsIdWithHttpInfo
     *
     * Delete a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\DeleteBookingsIdRequest|null $delete_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBookingsId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Scheduler\Model\DeleteConfigurationsId200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBookingsIdWithHttpInfo(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\DeleteBookingsIdRequest $delete_bookings_id_request = null,
        string $contentType = self::contentTypes['deleteBookingsId'][0]
    ): array
    {
        $request = $this->deleteBookingsIdRequest($booking_id, $configuration_id, $slug, $client_id, $delete_bookings_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\DeleteConfigurationsId200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\DeleteConfigurationsId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\DeleteConfigurationsId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\JackWH\NylasV3\Scheduler\Model\DeleteConfigurationsId200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\DeleteConfigurationsId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBookingsIdAsync
     *
     * Delete a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\DeleteBookingsIdRequest|null $delete_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteBookingsIdAsync(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\DeleteBookingsIdRequest $delete_bookings_id_request = null,
        string $contentType = self::contentTypes['deleteBookingsId'][0]
    ): PromiseInterface
    {
        return $this->deleteBookingsIdAsyncWithHttpInfo($booking_id, $configuration_id, $slug, $client_id, $delete_bookings_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBookingsIdAsyncWithHttpInfo
     *
     * Delete a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\DeleteBookingsIdRequest|null $delete_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteBookingsIdAsyncWithHttpInfo(
        $booking_id,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $delete_bookings_id_request = null,
        string $contentType = self::contentTypes['deleteBookingsId'][0]
    ): PromiseInterface
    {
        $returnType = '\JackWH\NylasV3\Scheduler\Model\DeleteConfigurationsId200Response';
        $request = $this->deleteBookingsIdRequest($booking_id, $configuration_id, $slug, $client_id, $delete_bookings_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBookingsId'
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\DeleteBookingsIdRequest|null $delete_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBookingsIdRequest(
        $booking_id,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $delete_bookings_id_request = null,
        string $contentType = self::contentTypes['deleteBookingsId'][0]
    ): Request
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling deleteBookingsId'
            );
        }






        $resourcePath = '/v3/scheduling/bookings/{booking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configuration_id,
            'configuration_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $slug,
            'slug', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_bookings_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_bookings_id_request));
            } else {
                $httpBody = $delete_bookings_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Session ID) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBookingsId
     *
     * Return a Booking object
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingsId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Scheduler\Model\PostBookings200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1
     */
    public function getBookingsId(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        string $contentType = self::contentTypes['getBookingsId'][0]
    ): \JackWH\NylasV3\Scheduler\Model\PostBookings200Response
    {
        list($response) = $this->getBookingsIdWithHttpInfo($booking_id, $configuration_id, $slug, $client_id, $contentType);
        return $response;
    }

    /**
     * Operation getBookingsIdWithHttpInfo
     *
     * Return a Booking object
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingsId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Scheduler\Model\PostBookings200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBookingsIdWithHttpInfo(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        string $contentType = self::contentTypes['getBookingsId'][0]
    ): array
    {
        $request = $this->getBookingsIdRequest($booking_id, $configuration_id, $slug, $client_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\PostBookings200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\PostBookings200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\PostBookings200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\JackWH\NylasV3\Scheduler\Model\PostBookings200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\PostBookings200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBookingsIdAsync
     *
     * Return a Booking object
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBookingsIdAsync(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        string $contentType = self::contentTypes['getBookingsId'][0]
    ): PromiseInterface
    {
        return $this->getBookingsIdAsyncWithHttpInfo($booking_id, $configuration_id, $slug, $client_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBookingsIdAsyncWithHttpInfo
     *
     * Return a Booking object
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getBookingsIdAsyncWithHttpInfo(
        $booking_id,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        string $contentType = self::contentTypes['getBookingsId'][0]
    ): PromiseInterface
    {
        $returnType = '\JackWH\NylasV3\Scheduler\Model\PostBookings200Response';
        $request = $this->getBookingsIdRequest($booking_id, $configuration_id, $slug, $client_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBookingsId'
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBookingsIdRequest(
        $booking_id,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        string $contentType = self::contentTypes['getBookingsId'][0]
    ): Request
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling getBookingsId'
            );
        }





        $resourcePath = '/v3/scheduling/bookings/{booking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configuration_id,
            'configuration_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $slug,
            'slug', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Session ID) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchBookingsId
     *
     * Reschedule a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PatchBookingsIdRequest|null $patch_bookings_id_request patch_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchBookingsId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Scheduler\Model\PatchBookingsId200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1
     */
    public function patchBookingsId(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\PatchBookingsIdRequest $patch_bookings_id_request = null,
        string $contentType = self::contentTypes['patchBookingsId'][0]
    ): \JackWH\NylasV3\Scheduler\Model\PatchBookingsId200Response
    {
        list($response) = $this->patchBookingsIdWithHttpInfo($booking_id, $configuration_id, $slug, $client_id, $patch_bookings_id_request, $contentType);
        return $response;
    }

    /**
     * Operation patchBookingsIdWithHttpInfo
     *
     * Reschedule a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PatchBookingsIdRequest|null $patch_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchBookingsId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Scheduler\Model\PatchBookingsId200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchBookingsIdWithHttpInfo(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\PatchBookingsIdRequest $patch_bookings_id_request = null,
        string $contentType = self::contentTypes['patchBookingsId'][0]
    ): array
    {
        $request = $this->patchBookingsIdRequest($booking_id, $configuration_id, $slug, $client_id, $patch_bookings_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\PatchBookingsId200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\PatchBookingsId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\PatchBookingsId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\JackWH\NylasV3\Scheduler\Model\PatchBookingsId200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\PatchBookingsId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchBookingsIdAsync
     *
     * Reschedule a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PatchBookingsIdRequest|null $patch_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function patchBookingsIdAsync(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\PatchBookingsIdRequest $patch_bookings_id_request = null,
        string $contentType = self::contentTypes['patchBookingsId'][0]
    ): PromiseInterface
    {
        return $this->patchBookingsIdAsyncWithHttpInfo($booking_id, $configuration_id, $slug, $client_id, $patch_bookings_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchBookingsIdAsyncWithHttpInfo
     *
     * Reschedule a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PatchBookingsIdRequest|null $patch_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function patchBookingsIdAsyncWithHttpInfo(
        $booking_id,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $patch_bookings_id_request = null,
        string $contentType = self::contentTypes['patchBookingsId'][0]
    ): PromiseInterface
    {
        $returnType = '\JackWH\NylasV3\Scheduler\Model\PatchBookingsId200Response';
        $request = $this->patchBookingsIdRequest($booking_id, $configuration_id, $slug, $client_id, $patch_bookings_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchBookingsId'
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PatchBookingsIdRequest|null $patch_bookings_id_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchBookingsIdRequest(
        $booking_id,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $patch_bookings_id_request = null,
        string $contentType = self::contentTypes['patchBookingsId'][0]
    ): Request
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling patchBookingsId'
            );
        }






        $resourcePath = '/v3/scheduling/bookings/{booking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configuration_id,
            'configuration_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $slug,
            'slug', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_bookings_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_bookings_id_request));
            } else {
                $httpBody = $patch_bookings_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Session ID) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postBookings
     *
     * Book an event
     *
     * @param  string|null $timezone The timezone to use for the booking. If not provided, Nylas uses the timezone from the Configuration object. (optional)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PostBookingsRequest|null $post_bookings_request Booking Create Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBookings'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Scheduler\Model\PostBookings200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1
     */
    public function postBookings(
        ?string $timezone = null,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\PostBookingsRequest $post_bookings_request = null,
        string $contentType = self::contentTypes['postBookings'][0]
    ): \JackWH\NylasV3\Scheduler\Model\PostBookings200Response
    {
        list($response) = $this->postBookingsWithHttpInfo($timezone, $configuration_id, $slug, $client_id, $post_bookings_request, $contentType);
        return $response;
    }

    /**
     * Operation postBookingsWithHttpInfo
     *
     * Book an event
     *
     * @param  string|null $timezone The timezone to use for the booking. If not provided, Nylas uses the timezone from the Configuration object. (optional)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PostBookingsRequest|null $post_bookings_request Booking Create Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBookings'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Scheduler\Model\PostBookings200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1, HTTP status code, HTTP response headers (array of strings)
     */
    public function postBookingsWithHttpInfo(
        ?string $timezone = null,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\PostBookingsRequest $post_bookings_request = null,
        string $contentType = self::contentTypes['postBookings'][0]
    ): array
    {
        $request = $this->postBookingsRequest($timezone, $configuration_id, $slug, $client_id, $post_bookings_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\PostBookings200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\PostBookings200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\PostBookings200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\JackWH\NylasV3\Scheduler\Model\PostBookings200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\PostBookings200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postBookingsAsync
     *
     * Book an event
     *
     * @param  string|null $timezone The timezone to use for the booking. If not provided, Nylas uses the timezone from the Configuration object. (optional)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PostBookingsRequest|null $post_bookings_request Booking Create Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBookings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postBookingsAsync(
        ?string $timezone = null,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\PostBookingsRequest $post_bookings_request = null,
        string $contentType = self::contentTypes['postBookings'][0]
    ): PromiseInterface
    {
        return $this->postBookingsAsyncWithHttpInfo($timezone, $configuration_id, $slug, $client_id, $post_bookings_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postBookingsAsyncWithHttpInfo
     *
     * Book an event
     *
     * @param  string|null $timezone The timezone to use for the booking. If not provided, Nylas uses the timezone from the Configuration object. (optional)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PostBookingsRequest|null $post_bookings_request Booking Create Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBookings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postBookingsAsyncWithHttpInfo(
        $timezone = null,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $post_bookings_request = null,
        string $contentType = self::contentTypes['postBookings'][0]
    ): PromiseInterface
    {
        $returnType = '\JackWH\NylasV3\Scheduler\Model\PostBookings200Response';
        $request = $this->postBookingsRequest($timezone, $configuration_id, $slug, $client_id, $post_bookings_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postBookings'
     *
     * @param  string|null $timezone The timezone to use for the booking. If not provided, Nylas uses the timezone from the Configuration object. (optional)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PostBookingsRequest|null $post_bookings_request Booking Create Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postBookings'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postBookingsRequest(
        $timezone = null,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $post_bookings_request = null,
        string $contentType = self::contentTypes['postBookings'][0]
    ): Request
    {







        $resourcePath = '/v3/scheduling/bookings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone,
            'timezone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configuration_id,
            'configuration_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $slug,
            'slug', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_bookings_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_bookings_request));
            } else {
                $httpBody = $post_bookings_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Session ID) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putBookingsId
     *
     * Confirm a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PutBookingsIdRequest|null $put_bookings_id_request Booking Confirm Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putBookingsId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \JackWH\NylasV3\Scheduler\Model\PutBookingsId200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1
     */
    public function putBookingsId(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\PutBookingsIdRequest $put_bookings_id_request = null,
        string $contentType = self::contentTypes['putBookingsId'][0]
    ): \JackWH\NylasV3\Scheduler\Model\PutBookingsId200Response
    {
        list($response) = $this->putBookingsIdWithHttpInfo($booking_id, $configuration_id, $slug, $client_id, $put_bookings_id_request, $contentType);
        return $response;
    }

    /**
     * Operation putBookingsIdWithHttpInfo
     *
     * Confirm a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PutBookingsIdRequest|null $put_bookings_id_request Booking Confirm Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putBookingsId'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \JackWH\NylasV3\Scheduler\Model\PutBookingsId200Response|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1|\JackWH\NylasV3\Scheduler\Model\Error1, HTTP status code, HTTP response headers (array of strings)
     */
    public function putBookingsIdWithHttpInfo(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\PutBookingsIdRequest $put_bookings_id_request = null,
        string $contentType = self::contentTypes['putBookingsId'][0]
    ): array
    {
        $request = $this->putBookingsIdRequest($booking_id, $configuration_id, $slug, $client_id, $put_bookings_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\PutBookingsId200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\PutBookingsId200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\PutBookingsId200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 504:
                    if (in_array('\JackWH\NylasV3\Scheduler\Model\Error1', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\JackWH\NylasV3\Scheduler\Model\Error1' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\JackWH\NylasV3\Scheduler\Model\Error1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\JackWH\NylasV3\Scheduler\Model\PutBookingsId200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\PutBookingsId200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\JackWH\NylasV3\Scheduler\Model\Error1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putBookingsIdAsync
     *
     * Confirm a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PutBookingsIdRequest|null $put_bookings_id_request Booking Confirm Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putBookingsIdAsync(
        string $booking_id,
        ?string $configuration_id = null,
        ?string $slug = null,
        ?string $client_id = null,
        ?\JackWH\NylasV3\Scheduler\Model\PutBookingsIdRequest $put_bookings_id_request = null,
        string $contentType = self::contentTypes['putBookingsId'][0]
    ): PromiseInterface
    {
        return $this->putBookingsIdAsyncWithHttpInfo($booking_id, $configuration_id, $slug, $client_id, $put_bookings_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putBookingsIdAsyncWithHttpInfo
     *
     * Confirm a booking
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PutBookingsIdRequest|null $put_bookings_id_request Booking Confirm Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putBookingsIdAsyncWithHttpInfo(
        $booking_id,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $put_bookings_id_request = null,
        string $contentType = self::contentTypes['putBookingsId'][0]
    ): PromiseInterface
    {
        $returnType = '\JackWH\NylasV3\Scheduler\Model\PutBookingsId200Response';
        $request = $this->putBookingsIdRequest($booking_id, $configuration_id, $slug, $client_id, $put_bookings_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putBookingsId'
     *
     * @param  string $booking_id ID of the booking object to access. (required)
     * @param  string|null $configuration_id The ID of the Configuration object whose settings are used for calculating availability. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;), &#x60;configuration_id&#x60; is not required. (optional)
     * @param  string|null $slug The slug of the Configuration object. You can use this with the &#x60;client_id&#x60; instead of using the &#x60;configuration_id&#x60;. If you&#39;re using session authentication (&#x60;requires_session_auth&#x60; is set to &#x60;true&#x60;) or using the &#x60;configuration_id&#x60;, &#x60;slug&#x60; is not required. (optional)
     * @param  string|null $client_id The client ID that was used to create the Configuration object. &#x60;client_id&#x60; is required only if you&#39;re using &#x60;slug&#x60;. (optional)
     * @param  \JackWH\NylasV3\Scheduler\Model\PutBookingsIdRequest|null $put_bookings_id_request Booking Confirm Response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putBookingsId'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putBookingsIdRequest(
        $booking_id,
        $configuration_id = null,
        $slug = null,
        $client_id = null,
        $put_bookings_id_request = null,
        string $contentType = self::contentTypes['putBookingsId'][0]
    ): Request
    {

        // verify the required parameter 'booking_id' is set
        if ($booking_id === null || (is_array($booking_id) && count($booking_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $booking_id when calling putBookingsId'
            );
        }






        $resourcePath = '/v3/scheduling/bookings/{booking_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configuration_id,
            'configuration_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $slug,
            'slug', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($booking_id !== null) {
            $resourcePath = str_replace(
                '{' . 'booking_id' . '}',
                ObjectSerializer::toPathValue($booking_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_bookings_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_bookings_id_request));
            } else {
                $httpBody = $put_bookings_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (Session ID) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
