<?php
/**
 * ConfigurationEventBooking
 *
 * PHP version 8.1
 *
 * @package  JackWH\NylasV3\Scheduler
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nylas v3 Scheduler APIs
 *
 * <div style=\"padding:24px; background-color: #F5FFFD; border: 1px solid #00A88C; color: #161717\">This API reference documentation covers the <strong>Nylas Scheduler API</strong>. See the see the <strong><a href=\"/docs/api/v3/admin/\">Administration API documentation</a></strong> for information about working with Nylas applications, authentication, connectors, and webhook subscriptions.</div>  The **Nylas Scheduler API** is designed using the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) ideology to provide simple and predictable URIs to access and modify objects. Requests support [standard HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) like `GET`, `PUT`, `POST`, and `DELETE`, and [standard status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html). Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.  ## Updating objects  `PUT` and `PATCH` requests behave similarly in Nylas v3: when you make a request, Nylas replaces all data in the nested object with the information you define. Because of this, your request might fail if you don't include all mandatory fields.  Nylas doesn't erase the data from fields that you don't include in your request, so you can define only the mandatory fields and any that you want to update.  ## Nylas Postman collection  You can use the [Nylas Postman collection](https://www.postman.com/trynylas/workspace/nylas-api/overview) to quickly start using the Nylas Scheduler API. For more information, check out the [Nylas Postman collection documentation](/docs/v3/api-references/postman/).  ## Scheduler documentation  You can find more information about Scheduler in the main documentation set:  - [Scheduler overview](/docs/v3/scheduler/) - [Scheduler Quickstart guide](/docs/v3/quickstart/scheduler/)  ## Nylas v3 encoding  Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.
 *
 * The version of the OpenAPI document: v3
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JackWH\NylasV3\Scheduler\Model;

use ArrayAccess;
use InvalidArgumentException;
use JackWH\NylasV3\Scheduler\ObjectSerializer;
use JsonSerializable;
use ReturnTypeWillChange;

/**
 * ConfigurationEventBooking Class Doc Comment
 *
 * @description The booking data for the event.
 * @package  JackWH\NylasV3\Scheduler
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ConfigurationEventBooking implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'configuration_event_booking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'title' => 'string',
        'description' => 'string',
        'location' => 'string',
        'timezone' => 'string',
        'booking_type' => 'string',
        'conferencing' => '\JackWH\NylasV3\Scheduler\Model\GetConfigurations200ResponseAllOfDataInnerEventBookingConferencing',
        'disable_emails' => 'bool',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'title' => null,
        'description' => null,
        'location' => null,
        'timezone' => null,
        'booking_type' => null,
        'conferencing' => null,
        'disable_emails' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'title' => false,
        'description' => false,
        'location' => false,
        'timezone' => false,
        'booking_type' => false,
        'conferencing' => false,
        'disable_emails' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'title' => 'title',
        'description' => 'description',
        'location' => 'location',
        'timezone' => 'timezone',
        'booking_type' => 'booking_type',
        'conferencing' => 'conferencing',
        'disable_emails' => 'disable_emails',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'title' => 'setTitle',
        'description' => 'setDescription',
        'location' => 'setLocation',
        'timezone' => 'setTimezone',
        'booking_type' => 'setBookingType',
        'conferencing' => 'setConferencing',
        'disable_emails' => 'setDisableEmails',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'title' => 'getTitle',
        'description' => 'getDescription',
        'location' => 'getLocation',
        'timezone' => 'getTimezone',
        'booking_type' => 'getBookingType',
        'conferencing' => 'getConferencing',
        'disable_emails' => 'getDisableEmails',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const BOOKING_TYPE_BOOKING = 'booking';
    public const BOOKING_TYPE_ORGANIZER_CONFIRMATION = 'organizer-confirmation';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBookingTypeAllowableValues()
    {
        return [
            self::BOOKING_TYPE_BOOKING,
            self::BOOKING_TYPE_ORGANIZER_CONFIRMATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('booking_type', $data ?? [], 'booking');
        $this->setIfExists('conferencing', $data ?? [], null);
        $this->setIfExists('disable_emails', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if (! is_null($this->container['timezone']) && (mb_strlen($this->container['timezone']) < 1)) {
            $invalidProperties[] = "invalid value for 'timezone', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getBookingTypeAllowableValues();
        if (! is_null($this->container['booking_type']) && ! in_array($this->container['booking_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'booking_type', must be one of '%s'",
                $this->container['booking_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle(): string
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the event.
     *
     * @return $this
     */
    public function setTitle(string $title): static
    {
        if (is_null($title)) {
            throw new InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the event.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation(): ?string
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The location of the event.
     *
     * @return $this
     */
    public function setLocation(?string $location): static
    {
        if (is_null($location)) {
            throw new InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone(): ?string
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone The timezone for displaying the times in confirmation email messages and reminders. The timezone must be an [IANA time zone database](https://en.wikipedia.org/wiki/Tz_database) formatted string. For example, `America/New_York`.
     *
     * @return $this
     */
    public function setTimezone(?string $timezone): static
    {
        if (is_null($timezone)) {
            throw new InvalidArgumentException('non-nullable timezone cannot be null');
        }

        if ((mb_strlen($timezone) < 1)) {
            throw new InvalidArgumentException('invalid length for $timezone when calling ConfigurationEventBooking., must be bigger than or equal to 1.');
        }

        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets booking_type
     *
     * @return string|null
     */
    public function getBookingType(): ?string
    {
        return $this->container['booking_type'];
    }

    /**
     * Sets booking_type
     *
     * @param string|null $booking_type The type of booking. If set to `booking`, Scheduler follows the [standard booking flow](/docs/v3/scheduler/customize-booking-flows/) and instantly creates the event. If set to `organizer-confirmation`, Scheduler creates an event marked \"Pending\" in the organizer's calendar and sends an confirmation request email to the organizer. The confirmation request email includes a link to a page where the organizer can confirm or cancel the booking.
     *
     * @return $this
     */
    public function setBookingType(?string $booking_type): static
    {
        if (is_null($booking_type)) {
            throw new InvalidArgumentException('non-nullable booking_type cannot be null');
        }
        $allowedValues = $this->getBookingTypeAllowableValues();
        if (! in_array($booking_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'booking_type', must be one of '%s'",
                    $booking_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['booking_type'] = $booking_type;

        return $this;
    }

    /**
     * Gets conferencing
     *
     * @return \JackWH\NylasV3\Scheduler\Model\GetConfigurations200ResponseAllOfDataInnerEventBookingConferencing|null
     */
    public function getConferencing(): ?\JackWH\NylasV3\Scheduler\Model\GetConfigurations200ResponseAllOfDataInnerEventBookingConferencing
    {
        return $this->container['conferencing'];
    }

    /**
     * Sets conferencing
     *
     * @param \JackWH\NylasV3\Scheduler\Model\GetConfigurations200ResponseAllOfDataInnerEventBookingConferencing|null $conferencing conferencing
     *
     * @return $this
     */
    public function setConferencing(?\JackWH\NylasV3\Scheduler\Model\GetConfigurations200ResponseAllOfDataInnerEventBookingConferencing $conferencing): static
    {
        if (is_null($conferencing)) {
            throw new InvalidArgumentException('non-nullable conferencing cannot be null');
        }
        $this->container['conferencing'] = $conferencing;

        return $this;
    }

    /**
     * Gets disable_emails
     *
     * @return bool|null
     */
    public function getDisableEmails(): ?bool
    {
        return $this->container['disable_emails'];
    }

    /**
     * Sets disable_emails
     *
     * @param bool|null $disable_emails If `true`, Nylas doesn't send any email messages when an event is booked, cancelled, or rescheduled.
     *
     * @return $this
     */
    public function setDisableEmails(?bool $disable_emails): static
    {
        if (is_null($disable_emails)) {
            throw new InvalidArgumentException('non-nullable disable_emails cannot be null');
        }
        $this->container['disable_emails'] = $disable_emails;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
