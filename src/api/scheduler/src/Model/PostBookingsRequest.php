<?php
/**
 * PostBookingsRequest
 *
 * PHP version 8.1
 *
 * @package  JackWH\NylasV3\Scheduler
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nylas v3 Scheduler APIs
 *
 * <div style=\"padding:24px; background-color: #F5FFFD; border: 1px solid #00A88C; color: #161717\">This API reference documentation covers the <strong>Nylas Scheduler API</strong>. See the see the <strong><a href=\"/docs/api/v3/admin/\">Administration API documentation</a></strong> for information about working with Nylas applications, authentication, connectors, and webhook subscriptions.</div>  The **Nylas Scheduler API** is designed using the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) ideology to provide simple and predictable URIs to access and modify objects. Requests support [standard HTTP methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html) like `GET`, `PUT`, `POST`, and `DELETE`, and [standard status codes](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html). Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.  ## Updating objects  `PUT` and `PATCH` requests behave similarly in Nylas v3: when you make a request, Nylas replaces all data in the nested object with the information you define. Because of this, your request might fail if you don't include all mandatory fields.  Nylas doesn't erase the data from fields that you don't include in your request, so you can define only the mandatory fields and any that you want to update.  ## Nylas Postman collection  You can use the [Nylas Postman collection](https://www.postman.com/trynylas/workspace/nylas-api/overview) to quickly start using the Nylas Scheduler API. For more information, check out the [Nylas Postman collection documentation](/docs/v3/api-references/postman/).  ## Scheduler documentation  You can find more information about Scheduler in the main documentation set:  - [Scheduler overview](/docs/v3/scheduler/) - [Scheduler Quickstart guide](/docs/v3/quickstart/scheduler/)  ## Nylas v3 encoding  Response bodies are always UTF-8 encoded JSON objects, unless explicitly documented otherwise.
 *
 * The version of the OpenAPI document: v3
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace JackWH\NylasV3\Scheduler\Model;

use ArrayAccess;
use InvalidArgumentException;
use JackWH\NylasV3\Scheduler\ObjectSerializer;
use JsonSerializable;
use ReturnTypeWillChange;

/**
 * PostBookingsRequest Class Doc Comment
 *
 * @package  JackWH\NylasV3\Scheduler
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class PostBookingsRequest implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'post_bookings_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'start_time' => 'string',
        'end_time' => 'string',
        'participants' => '\JackWH\NylasV3\Scheduler\Model\PostBookingsRequestParticipantsInner[]',
        'guest' => '\JackWH\NylasV3\Scheduler\Model\PostBookingsRequestGuest',
        'timezone' => 'string',
        'email_language' => 'string',
        'additional_guests' => '\JackWH\NylasV3\Scheduler\Model\PostBookingsRequestAdditionalGuestsInner[]',
        'additional_fields' => 'array<string,string>',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'start_time' => null,
        'end_time' => null,
        'participants' => null,
        'guest' => null,
        'timezone' => null,
        'email_language' => null,
        'additional_guests' => null,
        'additional_fields' => null,
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'start_time' => false,
        'end_time' => false,
        'participants' => false,
        'guest' => false,
        'timezone' => false,
        'email_language' => false,
        'additional_guests' => false,
        'additional_fields' => false,
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'start_time' => 'start_time',
        'end_time' => 'end_time',
        'participants' => 'participants',
        'guest' => 'guest',
        'timezone' => 'timezone',
        'email_language' => 'email_language',
        'additional_guests' => 'additional_guests',
        'additional_fields' => 'additional_fields',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'start_time' => 'setStartTime',
        'end_time' => 'setEndTime',
        'participants' => 'setParticipants',
        'guest' => 'setGuest',
        'timezone' => 'setTimezone',
        'email_language' => 'setEmailLanguage',
        'additional_guests' => 'setAdditionalGuests',
        'additional_fields' => 'setAdditionalFields',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'start_time' => 'getStartTime',
        'end_time' => 'getEndTime',
        'participants' => 'getParticipants',
        'guest' => 'getGuest',
        'timezone' => 'getTimezone',
        'email_language' => 'getEmailLanguage',
        'additional_guests' => 'getAdditionalGuests',
        'additional_fields' => 'getAdditionalFields',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const EMAIL_LANGUAGE_EN = 'en';
    public const EMAIL_LANGUAGE_FR = 'fr';
    public const EMAIL_LANGUAGE_DE = 'de';
    public const EMAIL_LANGUAGE_ES = 'es';
    public const EMAIL_LANGUAGE_NL = 'nl';
    public const EMAIL_LANGUAGE_SV = 'sv';
    public const EMAIL_LANGUAGE_JA = 'ja';
    public const EMAIL_LANGUAGE_ZH = 'zh';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailLanguageAllowableValues()
    {
        return [
            self::EMAIL_LANGUAGE_EN,
            self::EMAIL_LANGUAGE_FR,
            self::EMAIL_LANGUAGE_DE,
            self::EMAIL_LANGUAGE_ES,
            self::EMAIL_LANGUAGE_NL,
            self::EMAIL_LANGUAGE_SV,
            self::EMAIL_LANGUAGE_JA,
            self::EMAIL_LANGUAGE_ZH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('participants', $data ?? [], null);
        $this->setIfExists('guest', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('email_language', $data ?? [], '["en"]');
        $this->setIfExists('additional_guests', $data ?? [], null);
        $this->setIfExists('additional_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['start_time'] === null) {
            $invalidProperties[] = "'start_time' can't be null";
        }
        if ($this->container['end_time'] === null) {
            $invalidProperties[] = "'end_time' can't be null";
        }
        if ($this->container['guest'] === null) {
            $invalidProperties[] = "'guest' can't be null";
        }
        $allowedValues = $this->getEmailLanguageAllowableValues();
        if (! is_null($this->container['email_language']) && ! in_array($this->container['email_language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'email_language', must be one of '%s'",
                $this->container['email_language'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets start_time
     *
     * @return string
     */
    public function getStartTime(): string
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string $start_time The event's start time, in Unix epoch format.
     *
     * @return $this
     */
    public function setStartTime(string $start_time): static
    {
        if (is_null($start_time)) {
            throw new InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return string
     */
    public function getEndTime(): string
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param string $end_time The event's end time, in Unix epoch format.
     *
     * @return $this
     */
    public function setEndTime(string $end_time): static
    {
        if (is_null($end_time)) {
            throw new InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \JackWH\NylasV3\Scheduler\Model\PostBookingsRequestParticipantsInner[]|null
     */
    public function getParticipants(): ?array
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \JackWH\NylasV3\Scheduler\Model\PostBookingsRequestParticipantsInner[]|null $participants An array of objects that include a list of participant email addresses from the Configuration object to include in the booking. If not provided, Nylas includes all participants from the Configuration object.
     *
     * @return $this
     */
    public function setParticipants(?array $participants): static
    {
        if (is_null($participants)) {
            throw new InvalidArgumentException('non-nullable participants cannot be null');
        }
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets guest
     *
     * @return \JackWH\NylasV3\Scheduler\Model\PostBookingsRequestGuest
     */
    public function getGuest(): \JackWH\NylasV3\Scheduler\Model\PostBookingsRequestGuest
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     *
     * @param \JackWH\NylasV3\Scheduler\Model\PostBookingsRequestGuest $guest guest
     *
     * @return $this
     */
    public function setGuest(\JackWH\NylasV3\Scheduler\Model\PostBookingsRequestGuest $guest): static
    {
        if (is_null($guest)) {
            throw new InvalidArgumentException('non-nullable guest cannot be null');
        }
        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone(): ?string
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone The guest's timezone that is used in email notifications. If not provided, Nylas uses the timezone from the [Configuration](/docs/api/v3/scheduler/#post-/v3/grants/-grant_id-/scheduling/configurations) object.
     *
     * @return $this
     */
    public function setTimezone(?string $timezone): static
    {
        if (is_null($timezone)) {
            throw new InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets email_language
     *
     * @return string|null
     */
    public function getEmailLanguage(): ?string
    {
        return $this->container['email_language'];
    }

    /**
     * Sets email_language
     *
     * @param string|null $email_language The language of the guest email notifications.
     *
     * @return $this
     */
    public function setEmailLanguage(?string $email_language): static
    {
        if (is_null($email_language)) {
            throw new InvalidArgumentException('non-nullable email_language cannot be null');
        }
        $allowedValues = $this->getEmailLanguageAllowableValues();
        if (! in_array($email_language, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'email_language', must be one of '%s'",
                    $email_language,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email_language'] = $email_language;

        return $this;
    }

    /**
     * Gets additional_guests
     *
     * @return \JackWH\NylasV3\Scheduler\Model\PostBookingsRequestAdditionalGuestsInner[]|null
     */
    public function getAdditionalGuests(): ?array
    {
        return $this->container['additional_guests'];
    }

    /**
     * Sets additional_guests
     *
     * @param \JackWH\NylasV3\Scheduler\Model\PostBookingsRequestAdditionalGuestsInner[]|null $additional_guests An array of objects that include a list of additional guest email addresses to include in the booking.
     *
     * @return $this
     */
    public function setAdditionalGuests(?array $additional_guests): static
    {
        if (is_null($additional_guests)) {
            throw new InvalidArgumentException('non-nullable additional_guests cannot be null');
        }
        $this->container['additional_guests'] = $additional_guests;

        return $this;
    }

    /**
     * Gets additional_fields
     *
     * @return array<string,string>|null
     */
    public function getAdditionalFields(): ?array
    {
        return $this->container['additional_fields'];
    }

    /**
     * Sets additional_fields
     *
     * @param array<string,string>|null $additional_fields A dictionary of additional field keys mapped to the values populated by the guest in the booking form.
     *
     * @return $this
     */
    public function setAdditionalFields(?array $additional_fields): static
    {
        if (is_null($additional_fields)) {
            throw new InvalidArgumentException('non-nullable additional_fields cannot be null');
        }
        $this->container['additional_fields'] = $additional_fields;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
